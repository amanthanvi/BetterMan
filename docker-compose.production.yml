version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: betterman-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_files:/usr/share/nginx/html/static
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - betterman-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: betterman-frontend
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://api.betterman.dev
    volumes:
      - static_files:/app/dist
    restart: unless-stopped
    networks:
      - betterman-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: betterman-backend
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://betterman:${POSTGRES_PASSWORD}@postgres:5432/betterman
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=https://betterman.dev,https://www.betterman.dev
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - betterman-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: betterman-postgres
    environment:
      - POSTGRES_DB=betterman
      - POSTGRES_USER=betterman
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - betterman-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U betterman"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: betterman-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - betterman-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: betterman-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - betterman-network

  grafana:
    image: grafana/grafana:latest
    container_name: betterman-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    restart: unless-stopped
    networks:
      - betterman-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  static_files:

networks:
  betterman-network:
    driver: bridge
