name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: betterman_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run unit tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost/betterman_test
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key
          ENVIRONMENT: test
        run: |
          pytest tests/test_services.py tests/test_security.py tests/test_performance.py -v --cov=src --cov-report=xml
      
      - name: Run integration tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost/betterman_test
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key
          ENVIRONMENT: test
        run: |
          pytest tests/test_integration.py -v
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run linting
        working-directory: ./frontend
        run: npm run lint
      
      - name: Run unit tests
        working-directory: ./frontend
        run: npm run test:coverage
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: betterman_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Start backend
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost/betterman_test
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key
          ENVIRONMENT: test
        run: |
          python -m src.db.init_db
          uvicorn src.main:app --host 0.0.0.0 --port 8000 &
          sleep 5
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps
      
      - name: Run E2E tests
        working-directory: ./frontend
        env:
          VITE_API_URL: http://localhost:8000
        run: npm run test:e2e
      
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run bandit security linter
        working-directory: ./backend
        run: |
          pip install bandit
          bandit -r src/ -f json -o bandit-report.json || true
      
      - name: Upload bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: backend/bandit-report.json

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: betterman_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Prepare test data
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost/betterman_test
          REDIS_URL: redis://localhost:6379
        run: |
          python -m src.db.init_db
          python -m src.db.populate_test_data
      
      - name: Start backend
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost/betterman_test
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key
          ENVIRONMENT: test
        run: |
          uvicorn src.main:app --host 0.0.0.0 --port 8000 &
          sleep 5
      
      - name: Run load tests
        working-directory: ./backend
        run: |
          locust -f tests/locustfile.py \
            --headless \
            --users 100 \
            --spawn-rate 10 \
            --run-time 2m \
            --host http://localhost:8000 \
            --html performance-report.html
      
      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: backend/performance-report.html
      
      - name: Check performance thresholds
        run: |
          # Add performance threshold checks here
          echo "Performance tests completed"

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Run Black formatter check
        working-directory: ./backend
        run: |
          pip install black
          black --check src/
      
      - name: Run isort import checker
        working-directory: ./backend
        run: |
          pip install isort
          isort --check-only src/
      
      - name: Run mypy type checker
        working-directory: ./backend
        run: |
          pip install mypy
          mypy src/ || true
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run TypeScript compiler
        working-directory: ./frontend
        run: npx tsc --noEmit
      
      - name: Check bundle size
        working-directory: ./frontend
        run: |
          npm run build
          echo "Bundle size analysis:"
          ls -lh dist/assets/