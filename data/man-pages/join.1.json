{
  "name": "join",
  "section": 1,
  "title": "join manual page",
  "description": "The join utility performs an “equality join” on the specified files and writes the result to the standard output.",
  "synopsis": "join [-a file_number | -v file_number] [-e string] [-o list] [-t char] [-1 field] [-2 field] file1 file2",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "[-1 field] [-2 field] file1 file2",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     join – relational database operator\n",
        "     join [-a file_number | -v file_number] [-e string] [-o list] [-t char]"
      ]
    },
    {
      "id": "description",
      "title": "DESCRIPTION",
      "content": "macOS 15.5\t\t\t June 20, 2020\t\t\t    macOS 15.5",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     The join utility performs an “equality join” on the specified files and\n     writes the result to the standard output.\tThe “join field” is the field\n     in each file by which the files are compared.  The first field in each\n     line is used by default.  There is one line in the output for each pair\n     of lines in file1 and file2 which have identical join fields.  Each\n     output line consists of the join field, the remaining fields from file1\n     and then the remaining fields from file2.\n\n     The default field separators are tab and space characters.  In this case,\n     multiple tabs and spaces count as a single field separator, and leading\n     tabs and spaces are ignored.  The default output field separator is a\n     single space character.\n\n     Many of the options use file and field numbers.  Both file numbers and\n     field numbers are 1 based, i.e., the first file on the command line is\n     file number 1 and the first field is field number 1.  The following\n     options are available:\n\n     -a file_number\n\t     In addition to the default output, produce a line for each\n\t     unpairable line in file file_number.\n\n     -e string\n\t     Replace empty output fields with string.\n\n     -o list\n\t     The -o option specifies the fields that will be output from each\n\t     file for each line with matching join fields.  Each element of\n\t     list has either the form file_number.field, where file_number is\n\t     a file number and field is a field number, or the form ‘0’\n\t     (zero), representing the join field.  The elements of list must\n\t     be either comma (‘,’) or whitespace separated.  (The latter\n\t     requires quoting to protect it from the shell, or, a simpler\n\t     approach is to use multiple -o options.)\n\n     -t char\n\t     Use character char as a field delimiter for both input and\n\t     output.  Every occurrence of char in a line is significant.\n\n     -v file_number\n\t     Do not display the default output, but display a line for each\n\t     unpairable line in file file_number.  The options -v 1 and -v 2\n\t     may be specified at the same time.\n\n     -1 field\n\t     Join on the field'th field of file1.\n\n     -2 field\n\t     Join on the field'th field of file2.\n\n     When the default field delimiter characters are used, the files to be\n     joined should be ordered in the collating sequence of sort(1), using the\n     -b option, on the fields on which they are to be joined, otherwise join\n     may not report all field matches.\tWhen the field delimiter characters\n     are specified by the -t option, the collating sequence should be the same\n     as sort(1) without the -b option.\n\n     If one of the arguments file1 or file2 is ‘-’, the standard input is\n     used.\n",
        "     The join utility exits 0 on success, and >0 if an error occurs.\n",
        "     Assuming a file named nobel_laureates.txt with information about some of\n     the first Nobel Peace Prize laureates:\n\n\t   1901,Jean Henri Dunant,M\n\t   1901,Frederic Passy,M\n\t   1902,Elie Ducommun,M\n\t   1905,Baroness Bertha Sophie Felicita Von Suttner,F\n\t   1910,Permanent International Peace Bureau,\n\n     and a second file nobel_nationalities.txt with their nationalities:\n\n\t   Jean Henri Dunant,Switzerland\n\t   Frederic Passy,France\n\t   Elie Ducommun,Switzerland\n\t   Baroness Bertha Sophie Felicita Von Suttner\n\n     Join the two files using the second column from first file and the\n     default first column from second file specifying a custom field\n     delimiter:\n\n\t   $ join -t, -1 2 nobel_laureates.txt nobel_nationalities.txt\n\t   Jean Henri Dunant,1901,M,Switzerland\n\t   Frederic Passy,1901,M,France\n\t   Elie Ducommun,1902,M,Switzerland\n\t   Baroness Bertha Sophie Felicita Von Suttner,1905,F\n\n     Show only the year and the nationality of the laureate using ‘<<NULL>>’\n     to replace empty fields:\n\n\t   $ join -e \"<<NULL>>\" -t, -1 2 -o \"1.1 2.2\" nobel_laureates.txt nobel_nationalities.txt\n\t   1901,Switzerland\n\t   1901,France\n\t   1902,Switzerland\n\t   1905,<<NULL>>\n\n     Show only lines from first file which do not have a match in second file:\n\n\t   $ join -v1 -t, -1 2 nobel_laureates.txt nobel_nationalities.txt\n\t   Permanent International Peace Bureau,1910,\n\n     Assuming a file named capitals.txt with the following content:\n\n\t   Belgium,Brussels\n\t   France,Paris\n\t   Italy,Rome\n\t   Switzerland\n\n     Show the name and capital of the country where the laureate was born.\n     This example uses nobel_nationalities.txt as a bridge but does not show\n     any information from that file.  Also see the note about sort(1) above to\n     understand why we need to sort the intermediate result.\n\n\t   $ join -t, -1 2 -o 1.2 2.2 nobel_laureates.txt nobel_nationalities.txt | \\\n\t       sort -k2 -t, | join -t, -e \"<<NULL>>\" -1 2 -o 1.1 2.2 - capitals.txt\n\t   Elie Ducommun,<<NULL>>\n\t   Jean Henri Dunant,<<NULL>>\n",
        "     For compatibility with historic versions of join, the following options\n     are available:\n\n     -a      In addition to the default output, produce a line for each\n\t     unpairable line in both file1 and file2.\n\n     -j1 field\n\t     Join on the field'th field of file1.\n\n     -j2 field\n\t     Join on the field'th field of file2.\n\n     -j field\n\t     Join on the field'th field of both file1 and file2.\n\n     -o list ...\n\t     Historical implementations of join permitted multiple arguments\n\t     to the -o option.\tThese arguments were of the form\n\t     file_number.field_number as described for the current -o option.\n\t     This has obvious difficulties in the presence of files named 1.2.\n\n     These options are available only so historic shell scripts do not require\n     modification and should not be used.\n",
        "     awk(1), comm(1), paste(1), sort(1), uniq(1)\n",
        "     The join command conforms to IEEE Std 1003.1-2001 (“POSIX.1”).\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "-a",
      "description": " In addition to the default output, produce a line for each unpairable line in file file_number.",
      "optional": true
    },
    {
      "flag": "-e",
      "description": " Replace empty output fields with string.",
      "optional": true
    },
    {
      "flag": "-o",
      "description": " The -o option specifies the fields that will be output from each file for each line with matching join fields.  Each element of list has either the form file_number.field, where file_number is a file number and field is a field number, or the form ‘0’ (zero), representing the join field.  The elements of list must be either comma (‘,’) or whitespace separated.  (The latter requires quoting to protect it from the shell, or, a simpler approach is to use multiple -o options.)",
      "optional": true
    },
    {
      "flag": "-t",
      "description": " Use character char as a field delimiter for both input and output.  Every occurrence of char in a line is significant.",
      "optional": true
    },
    {
      "flag": "-v",
      "description": " Do not display the default output, but display a line for each unpairable line in file file_number.  The options -v 1 and -v 2 may be specified at the same time.",
      "optional": false
    },
    {
      "flag": "-1",
      "description": " Join on the field'th field of file1.",
      "optional": true
    },
    {
      "flag": "-2",
      "description": " Join on the field'th field of file2. When the default field delimiter characters are used, the files to be joined should be ordered in the collating sequence of sort(1), using the",
      "optional": true
    },
    {
      "flag": "-b",
      "description": "option, on the fields on which they are to be joined, otherwise join may not report all field matches.\tWhen the field delimiter characters are specified by the -t option, the collating sequence should be the same as sort(1) without the -b option. If one of the arguments file1 or file2 is ‘-’, the standard input is used. EXIT STATUS The join utility exits 0 on success, and >0 if an error occurs."
    }
  ],
  "examples": [
    {
      "command": "join -t, -1 2 nobel_laureates.txt nobel_nationalities.txt",
      "description": "Jean Henri Dunant,1901,M,Switzerland",
      "tags": [],
      "output": "\t   Jean Henri Dunant,1901,M,Switzerland\n\t   Frederic Passy,1901,M,France\n\t   Elie Ducommun,1902,M,Switzerland\n\t   Baroness Bertha Sophie Felicita Von Suttner,1905,F\n     Show only the year and the nationality of the laureate using ‘<<NULL>>’\n     to replace empty fields:\n"
    },
    {
      "command": "join -e \"<<NULL>>\" -t, -1 2 -o \"1.1 2.2\" nobel_laureates.txt nobel_nationalities.txt",
      "description": "1901,Switzerland",
      "tags": [
        "redirect"
      ],
      "output": "\t   1901,Switzerland\n\t   1901,France\n\t   1902,Switzerland\n\t   1905,<<NULL>>\n     Show only lines from first file which do not have a match in second file:\n"
    },
    {
      "command": "join -v1 -t, -1 2 nobel_laureates.txt nobel_nationalities.txt",
      "description": "Permanent International Peace Bureau,1910,",
      "tags": [],
      "output": "\t   Permanent International Peace Bureau,1910,\n     Assuming a file named capitals.txt with the following content:\n\t   Belgium,Brussels\n\t   France,Paris\n\t   Italy,Rome\n\t   Switzerland\n     Show the name and capital of the country where the laureate was born.\n     This example uses nobel_nationalities.txt as a bridge but does not show\n     any information from that file.  Also see the note about sort(1) above to\n     understand why we need to sort the intermediate result.\n"
    },
    {
      "command": "join -t, -1 2 -o 1.2 2.2 nobel_laureates.txt nobel_nationalities.txt | \\",
      "description": "sort -k2 -t, | join -t, -e \"<<NULL>>\" -1 2 -o 1.1 2.2 - capitals.txt",
      "tags": [
        "pipe"
      ],
      "output": "\t       sort -k2 -t, | join -t, -e \"<<NULL>>\" -1 2 -o 1.1 2.2 - capitals.txt\n\t   Elie Ducommun,<<NULL>>\n\t   Jean Henri Dunant,<<NULL>>\n"
    }
  ],
  "relatedCommands": [
    "awk",
    "comm",
    "paste",
    "sort",
    "uniq",
    "join",
    "relational",
    "database",
    "operator",
    "file_number",
    "string",
    "list",
    "char",
    "field",
    "file1"
  ],
  "seeAlso": [
    {
      "name": "awk",
      "section": 1
    },
    {
      "name": "comm",
      "section": 1
    },
    {
      "name": "paste",
      "section": 1
    },
    {
      "name": "sort",
      "section": 1
    },
    {
      "name": "uniq",
      "section": 1
    }
  ],
  "metadata": {},
  "searchContent": "join join manual page the join utility performs an equality join on the specified files and writes the result to the standard output join -a file number -v file number -e string -o list -t char -1 field -2 field file1 file2 join manual page utility performs equality join specified writes result standard output -a in addition to the default output produce a line for each unpairable line in file file number -e replace empty output fields with string -o the -o option specifies the fields that will be output from each file for each line with matching join fields each element of list has either the form file number field where file number is a file number and field is a field number or the form 0 zero representing the join field the elements of list must be either comma or whitespace separated the latter requires quoting to protect it from the shell or a simpler approach is to use multiple -o options -t use character char as a field delimiter for both input and output every occurrence of char in a line is significant -v do not display the default output but display a line for each unpairable line in file file number the options -v 1 and -v 2 may be specified at the same time -1 join on the field th field of file1 -2 join on the field th field of file2 when the default field delimiter characters are used the files to be joined should be ordered in the collating sequence of sort 1 using the -b option on the fields on which they are to be joined otherwise join may not report all field matches when the field delimiter characters are specified by the -t option the collating sequence should be the same as sort 1 without the -b option if one of the arguments file1 or file2 is - the standard input is used exit status the join utility exits 0 on success and 0 if an error occurs join -t -1 2 nobel laureates txt nobel nationalities txt jean henri dunant 1901 m switzerland join -e null -t -1 2 -o 1 1 2 2 nobel laureates txt nobel nationalities txt 1901 switzerland join -v1 -t -1 2 nobel laureates txt nobel nationalities txt permanent international peace bureau 1910 join -t -1 2 -o 1 2 2 2 nobel laureates txt nobel nationalities txt sort -k2 -t join -t -e null -1 2 -o 1 1 2 2 - capitals txt name -1 field -2 field file1 file2 description macos 15 5 june 20 2020 macos 15 5",
  "keywords": [
    "join",
    "manual",
    "page",
    "utility",
    "performs",
    "“equality",
    "join”",
    "specified",
    "writes",
    "result",
    "standard",
    "output."
  ],
  "complexity": "intermediate",
  "hash": "62efe6ce51a37415",
  "parsedAt": "2025-06-17T19:32:26.879Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": true,
  "hasDiagrams": false
}