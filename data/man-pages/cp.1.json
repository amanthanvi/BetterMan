{
  "name": "cp",
  "section": 1,
  "title": "cp manual page",
  "description": "In the first synopsis form, the cp utility copies the contents of the source_file to the target_file.",
  "synopsis": "cp [-R [-H | -L | -P]] [-f | -i | -n] [-aclNpSsvXx] source_file target_file cp [-R [-H | -L | -P]] [-f | -i | -n] [-aclNpSsvXx] source_file ... target_directory cp [-f | -i | -n] [-aclNPpSsvXx] source_file target_file cp [-f | -i | -n] [-aclNPpSsvXx] source_file ... target_directory",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "macOS 15.5\t\t\tMarch 28, 2024\t\t\t    macOS 15.5",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     cp – copy files\n",
        "     cp [-R [-H | -L | -P]] [-f | -i | -n] [-aclNpSsvXx]",
        "     cp [-R [-H | -L | -P]] [-f | -i | -n] [-aclNpSsvXx]",
        "     cp [-f | -i | -n] [-aclNPpSsvXx] source_file target_file\n     cp [-f | -i | -n] [-aclNPpSsvXx] source_file ... target_directory\n",
        "     In the first synopsis form, the cp utility copies the contents of the\n     source_file to the target_file.  In the second synopsis form, the\n     contents of each named source_file is copied to the destination\n     target_directory.\tThe names of the files themselves are not changed.  If\n     cp detects an attempt to copy a file to itself, the copy will fail.\n\n     The following options are available:\n\n     -H    If the -R option is specified, symbolic links on the command line\n\t   are followed.  (Symbolic links encountered in the tree traversal\n\t   are not followed.)\n\n     -L    If the -R option is specified, all symbolic links are followed.\n\n     -P    No symbolic links are followed.  This is the default if the -R\n\t   option is specified.\n\n     -R    If source_file designates a directory, cp copies the directory and\n\t   the entire subtree connected at that point.\tIf the source_file\n\t   ends in a /, the contents of the directory are copied rather than\n\t   the directory itself.  This option also causes symbolic links to be\n\t   copied, rather than indirected through, and for cp to create\n\t   special files rather than copying them as normal files.  Created\n\t   directories have the same mode as the corresponding source\n\t   directory, unmodified by the process' umask.\n\n\t   In -R mode, cp will continue copying even if errors are detected.\n\n\t   Note that cp copies hard linked files as separate files.  If you\n\t   need to preserve hard links, consider using tar(1), cpio(1), or\n\t   pax(1) instead.\n\n     -a    Archive mode.  Same as -RpP.  Preserves structure and attributes of\n\t   files but not directory structure.\n\n     -c    copy files using clonefile(2).  Note that if clonefile(2) is not\n\t   supported for the target filesystem, then cp will fallback to using\n\t   copyfile(2) instead to ensure the copy still succeeds.\n\n     -f    For each existing destination pathname, remove it and create a new\n\t   file, without prompting for confirmation regardless of its\n\t   permissions.  (The -f option overrides any previous -i or -n\n\t   options.)\n\n\t   The target file is not unlinked before the copy.  Thus, any\n\t   existing access rights will be retained.\n\n     -i    Cause cp to write a prompt to the standard error output before\n\t   copying a file that would overwrite an existing file.  If the\n\t   response from the standard input begins with the character ‘y’ or\n\t   ‘Y’, the file copy is attempted.  (The -i option overrides any\n\t   previous -f or -n options.)\n\n     -l    Create hard links to regular files in a hierarchy instead of\n\t   copying.\n\n     -N    When used with -p, suppress copying file flags.\n\n     -n    Do not overwrite an existing file.  (The -n option overrides any\n\t   previous -f or -i options.)\n\n     -p    Cause cp to preserve the following attributes of each source file\n\t   in the copy: modification time, access time, file flags, file mode,\n\t   user ID, and group ID, as allowed by permissions.  Access Control\n\t   Lists (ACLs) and Extended Attributes (EAs), including resource\n\t   forks, will also be preserved.\n\n\t   If the user ID and group ID cannot be preserved, no error message\n\t   is displayed and the exit value is not altered.\n\n\t   If the source file has its set-user-ID bit on and the user ID\n\t   cannot be preserved, the set-user-ID bit is not preserved in the\n\t   copy's permissions.\tIf the source file has its set-group-ID bit on\n\t   and the group ID cannot be preserved, the set-group-ID bit is not\n\t   preserved in the copy's permissions.  If the source file has both\n\t   its set-user-ID and set-group-ID bits on, and either the user ID or\n\t   group ID cannot be preserved, neither the set-user-ID nor set-\n\t   group-ID bits are preserved in the copy's permissions.\n\n     -S    Do not attempt to preserve holes in sparse files.\n\n     -s    Create symbolic links to regular files in a hierarchy instead of\n\t   copying.\n\n     -v    Cause cp to be verbose, showing files as they are copied.\n\n     -X    Do not copy Extended Attributes (EAs) or resource forks.\n\n     -x    File system mount points are not traversed.\n\n     For each destination file that already exists, its contents are\n     overwritten if permissions allow.\tIts mode, user ID, and group ID are\n     unchanged unless the -p option was specified.\n\n     In the second synopsis form, target_directory must exist unless there is\n     only one named source_file which is a directory and the -R flag is\n     specified.\n\n     If the destination file does not exist, the mode of the source file is\n     used as modified by the file mode creation mask (umask, see csh(1)).  If\n     the source file has its set-user-ID bit on, that bit is removed unless\n     both the source file and the destination file are owned by the same user.\n     If the source file has its set-group-ID bit on, that bit is removed\n     unless both the source file and the destination file are in the same\n     group and the user is a member of that group.  If both the set-user-ID\n     and set-group-ID bits are set, all of the above conditions must be\n     fulfilled or both bits are removed.\n\n     Appropriate permissions are required for file creation or overwriting.\n\n     Symbolic links are always followed unless the -R flag is set, in which\n     case symbolic links are not followed, by default.\tThe -H or -L flags (in\n     conjunction with the -R flag) cause symbolic links to be followed as\n     described above.  The -H, -L and -P options are ignored unless the -R\n     option is specified.  In addition, these options override each other and\n     the command's actions are determined by the last one specified.\n\n     If cp receives a SIGINFO (see the status argument for stty(1)) signal,\n     the current input and output file and the percentage complete will be\n     written to the standard output.\n\n     If cp encounters an I/O error during the copy, then cp may leave a\n     partially copied target_file in place.  cp specifically avoids cleaning\n     up the output file in error cases to avoid further data loss in cases\n     where the source may not be recoverable.  Alternatives, like install(1),\n     may be preferred if stronger guarantees about the target_file are\n     required.\n",
        "     The cp utility exits 0 on success, and >0 if an error occurs.\n",
        "     Make a copy of file foo named bar:\n\n\t   $ cp foo bar\n\n     Copy a group of files to the /tmp directory:\n\n\t   $ cp *.txt /tmp\n\n     Copy the directory junk and all of its contents (including any\n     subdirectories) to the /tmp directory:\n\n\t   $ cp -R junk /tmp\n",
        "     Historic versions of the cp utility had a -r option.  This implementation\n     supports that option, however, its behavior is different from historical\n     FreeBSD behavior.\tUse of this option is strongly discouraged as the\n     behavior is implementation-dependent.  In FreeBSD, -r is a synonym for\n     -RL and works the same unless modified by other flags.  Historical\n     implementations of -r differ as they copy special files as normal files\n     while recreating a hierarchy.\n\n     The -a, -c, -l, -N, -n, -S, -s, -v, -X, and -x options are non-standard\n     and their use in scripts is not recommended.\n",
        "     In legacy mode, -f will override -i.  Also, under the -f option, the\n     target file is always unlinked before the copy.  Thus, new access rights\n     will always be set.\n\n     In -R mode, copying will terminate if an error is encountered.\n\n     For more information about legacy mode, see compat(5).\n",
        "     install(1), mv(1), rcp(1), clonefile(2), copyfile(2), umask(2), fts(3),\n     compat(5), symlink(7)\n",
        "     The cp command is expected to be IEEE Std 1003.2 (“POSIX.2”) compatible.\n",
        "     A cp command appeared in Version 1 AT&T UNIX.\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "-H",
      "description": "If the -R option is specified, symbolic links on the command line are followed.  (Symbolic links encountered in the tree traversal are not followed.)"
    },
    {
      "flag": "-L",
      "description": "If the -R option is specified, all symbolic links are followed."
    },
    {
      "flag": "-P",
      "description": "No symbolic links are followed.  This is the default if the -R option is specified."
    },
    {
      "flag": "-R",
      "description": " the entire subtree connected at that point.\tIf the source_file ends in a /, the contents of the directory are copied rather than the directory itself.  This option also causes symbolic links to be copied, rather than indirected through, and for cp to create special files rather than copying them as normal files.  Created directories have the same mode as the corresponding source directory, unmodified by the process' umask. In -R mode, cp will continue copying even if errors are detected. Note that cp copies hard linked files as separate files.  If you need to preserve hard links, consider using tar(1), cpio(1), or pax(1) instead.",
      "argument": "-H | -L | -P",
      "optional": true
    },
    {
      "flag": "-a",
      "description": "Archive mode.  Same as -RpP.  Preserves structure and attributes of files but not directory structure."
    },
    {
      "flag": "-c",
      "description": "copy files using clonefile(2).  Note that if clonefile(2) is not supported for the target filesystem, then cp will fallback to using copyfile(2) instead to ensure the copy still succeeds."
    },
    {
      "flag": "-f",
      "description": " file, without prompting for confirmation regardless of its permissions.  (The -f option overrides any previous -i or -n options.) The target file is not unlinked before the copy.  Thus, any existing access rights will be retained.",
      "optional": true
    },
    {
      "flag": "-i",
      "description": " copying a file that would overwrite an existing file.  If the response from the standard input begins with the character ‘y’ or ‘Y’, the file copy is attempted.  (The -i option overrides any previous -f or -n options.)",
      "optional": false
    },
    {
      "flag": "-l",
      "description": "Create hard links to regular files in a hierarchy instead of copying."
    },
    {
      "flag": "-N",
      "description": "When used with -p, suppress copying file flags."
    },
    {
      "flag": "-n",
      "description": " previous -f or -i options.)",
      "optional": false
    },
    {
      "flag": "-p",
      "description": "Cause cp to preserve the following attributes of each source file in the copy: modification time, access time, file flags, file mode, user ID, and group ID, as allowed by permissions.  Access Control Lists (ACLs) and Extended Attributes (EAs), including resource forks, will also be preserved. If the user ID and group ID cannot be preserved, no error message is displayed and the exit value is not altered. If the source file has its set-user-ID bit on and the user ID cannot be preserved, the set-user-ID bit is not preserved in the copy's permissions.\tIf the source file has its set-group-ID bit on and the group ID cannot be preserved, the set-group-ID bit is not preserved in the copy's permissions.  If the source file has both its set-user-ID and set-group-ID bits on, and either the user ID or group ID cannot be preserved, neither the set-user-ID nor set- group-ID bits are preserved in the copy's permissions."
    },
    {
      "flag": "-S",
      "description": "Do not attempt to preserve holes in sparse files."
    },
    {
      "flag": "-s",
      "description": "Create symbolic links to regular files in a hierarchy instead of copying."
    },
    {
      "flag": "-v",
      "description": "Cause cp to be verbose, showing files as they are copied."
    },
    {
      "flag": "-X",
      "description": "Do not copy Extended Attributes (EAs) or resource forks."
    },
    {
      "flag": "-x",
      "description": "File system mount points are not traversed. For each destination file that already exists, its contents are overwritten if permissions allow.\tIts mode, user ID, and group ID are unchanged unless the -p option was specified. In the second synopsis form, target_directory must exist unless there is only one named source_file which is a directory and the -R flag is specified. If the destination file does not exist, the mode of the source file is used as modified by the file mode creation mask (umask, see csh(1)).  If the source file has its set-user-ID bit on, that bit is removed unless both the source file and the destination file are owned by the same user. If the source file has its set-group-ID bit on, that bit is removed unless both the source file and the destination file are in the same group and the user is a member of that group.  If both the set-user-ID and set-group-ID bits are set, all of the above conditions must be fulfilled or both bits are removed. Appropriate permissions are required for file creation or overwriting. Symbolic links are always followed unless the -R flag is set, in which case symbolic links are not followed, by default.\tThe -H or -L flags (in conjunction with the -R flag) cause symbolic links to be followed as described above.  The -H, -L and -P options are ignored unless the -R option is specified.  In addition, these options override each other and the command's actions are determined by the last one specified. If cp receives a SIGINFO (see the status argument for stty(1)) signal, the current input and output file and the percentage complete will be written to the standard output. If cp encounters an I/O error during the copy, then cp may leave a partially copied target_file in place.  cp specifically avoids cleaning up the output file in error cases to avoid further data loss in cases where the source may not be recoverable.  Alternatives, like install(1), may be preferred if stronger guarantees about the target_file are required. EXIT STATUS The cp utility exits 0 on success, and >0 if an error occurs."
    }
  ],
  "examples": [
    {
      "command": "cp foo bar",
      "description": "",
      "tags": [],
      "output": "     Copy a group of files to the /tmp directory:\n"
    },
    {
      "command": "cp *.txt /tmp",
      "description": "",
      "tags": [
        "glob"
      ],
      "output": "     Copy the directory junk and all of its contents (including any\n     subdirectories) to the /tmp directory:\n"
    },
    {
      "command": "cp -R junk /tmp",
      "description": "",
      "tags": []
    }
  ],
  "relatedCommands": [
    "install",
    "mv",
    "rcp",
    "clonefile",
    "copyfile",
    "umask",
    "fts",
    "compat",
    "symlink",
    "copy",
    "source_file",
    "target_file",
    "first",
    "synopsis",
    "form"
  ],
  "seeAlso": [
    {
      "name": "install",
      "section": 1
    },
    {
      "name": "mv",
      "section": 1
    },
    {
      "name": "rcp",
      "section": 1
    },
    {
      "name": "clonefile",
      "section": 2
    },
    {
      "name": "copyfile",
      "section": 2
    },
    {
      "name": "umask",
      "section": 2
    },
    {
      "name": "fts",
      "section": 3
    },
    {
      "name": "compat",
      "section": 5
    },
    {
      "name": "symlink",
      "section": 7
    }
  ],
  "metadata": {},
  "searchContent": "cp cp manual page in the first synopsis form the cp utility copies the contents of the source file to the target file cp -r -h -l -p -f -i -n -aclnpssvxx source file target file cp -r -h -l -p -f -i -n -aclnpssvxx source file target directory cp -f -i -n -aclnppssvxx source file target file cp -f -i -n -aclnppssvxx source file target directory cp manual page first synopsis form utility copies contents source file target file -h if the -r option is specified symbolic links on the command line are followed symbolic links encountered in the tree traversal are not followed -l if the -r option is specified all symbolic links are followed -p no symbolic links are followed this is the default if the -r option is specified -r the entire subtree connected at that point if the source file ends in a the contents of the directory are copied rather than the directory itself this option also causes symbolic links to be copied rather than indirected through and for cp to create special files rather than copying them as normal files created directories have the same mode as the corresponding source directory unmodified by the process umask in -r mode cp will continue copying even if errors are detected note that cp copies hard linked files as separate files if you need to preserve hard links consider using tar 1 cpio 1 or pax 1 instead -a archive mode same as -rpp preserves structure and attributes of files but not directory structure -c copy files using clonefile 2 note that if clonefile 2 is not supported for the target filesystem then cp will fallback to using copyfile 2 instead to ensure the copy still succeeds -f file without prompting for confirmation regardless of its permissions the -f option overrides any previous -i or -n options the target file is not unlinked before the copy thus any existing access rights will be retained -i copying a file that would overwrite an existing file if the response from the standard input begins with the character y or y the file copy is attempted the -i option overrides any previous -f or -n options -l create hard links to regular files in a hierarchy instead of copying -n when used with -p suppress copying file flags -n previous -f or -i options -p cause cp to preserve the following attributes of each source file in the copy modification time access time file flags file mode user id and group id as allowed by permissions access control lists acls and extended attributes eas including resource forks will also be preserved if the user id and group id cannot be preserved no error message is displayed and the exit value is not altered if the source file has its set-user-id bit on and the user id cannot be preserved the set-user-id bit is not preserved in the copy s permissions if the source file has its set-group-id bit on and the group id cannot be preserved the set-group-id bit is not preserved in the copy s permissions if the source file has both its set-user-id and set-group-id bits on and either the user id or group id cannot be preserved neither the set-user-id nor set- group-id bits are preserved in the copy s permissions -s do not attempt to preserve holes in sparse files -s create symbolic links to regular files in a hierarchy instead of copying -v cause cp to be verbose showing files as they are copied -x do not copy extended attributes eas or resource forks -x file system mount points are not traversed for each destination file that already exists its contents are overwritten if permissions allow its mode user id and group id are unchanged unless the -p option was specified in the second synopsis form target directory must exist unless there is only one named source file which is a directory and the -r flag is specified if the destination file does not exist the mode of the source file is used as modified by the file mode creation mask umask see csh 1 if the source file has its set-user-id bit on that bit is removed unless both the source file and the destination file are owned by the same user if the source file has its set-group-id bit on that bit is removed unless both the source file and the destination file are in the same group and the user is a member of that group if both the set-user-id and set-group-id bits are set all of the above conditions must be fulfilled or both bits are removed appropriate permissions are required for file creation or overwriting symbolic links are always followed unless the -r flag is set in which case symbolic links are not followed by default the -h or -l flags in conjunction with the -r flag cause symbolic links to be followed as described above the -h -l and -p options are ignored unless the -r option is specified in addition these options override each other and the command s actions are determined by the last one specified if cp receives a siginfo see the status argument for stty 1 signal the current input and output file and the percentage complete will be written to the standard output if cp encounters an i o error during the copy then cp may leave a partially copied target file in place cp specifically avoids cleaning up the output file in error cases to avoid further data loss in cases where the source may not be recoverable alternatives like install 1 may be preferred if stronger guarantees about the target file are required exit status the cp utility exits 0 on success and 0 if an error occurs cp foo bar cp txt tmp cp -r junk tmp name macos 15 5 march 28 2024 macos 15 5",
  "keywords": [
    "cp",
    "manual",
    "page",
    "first",
    "synopsis",
    "form,",
    "utility",
    "copies",
    "contents",
    "source_file",
    "target_file."
  ],
  "complexity": "basic",
  "hash": "28d082e0ef536611",
  "parsedAt": "2025-06-17T19:31:47.347Z",
  "parseVersion": "2.0.0",
  "isCommon": true,
  "hasInteractiveExamples": true,
  "hasDiagrams": false
}