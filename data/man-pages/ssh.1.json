{
  "name": "ssh",
  "section": 1,
  "title": "ssh manual page",
  "description": "ssh (SSH client) is a program for logging into a remote machine and for executing commands on a remote machine.",
  "synopsis": "ssh [-46AaCfGgKkMNnqsTtVvXxYy] [-B bind_interface] [-b bind_address] [-c cipher_spec] [-D [bind_address:]port] [-E log_file] [-e escape_char] [-F configfile] [-I pkcs11] [-i identity_file] [-J destination] [-L address] [-l login_name] [-m mac_spec] [-O ctl_cmd] [-o option] [-P tag] [-p port] [-R address] [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]] destination [command [argument ...]] ssh [-Q query_option]",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "macOS 15.5\t\t\t July 18, 2024\t\t\t    macOS 15.5",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     ssh – OpenSSH remote login client\n",
        "     ssh [-46AaCfGgKkMNnqsTtVvXxYy] [-B bind_interface] [-b bind_address]",
        "     ssh [-Q query_option]\n",
        "     ssh (SSH client) is a program for logging into a remote machine and for\n     executing commands on a remote machine.  It is intended to provide secure\n     encrypted communications between two untrusted hosts over an insecure\n     network.  X11 connections, arbitrary TCP ports and UNIX-domain sockets\n     can also be forwarded over the secure channel.\n\n     ssh connects and logs into the specified destination, which may be\n     specified as either [user@]hostname or a URI of the form\n     ssh://[user@]hostname[:port].  The user must prove their identity to the\n     remote machine using one of several methods (see below).\n\n     If a command is specified, it will be executed on the remote host instead\n     of a login shell.\tA complete command line may be specified as command,\n     or it may have additional arguments.  If supplied, the arguments will be\n     appended to the command, separated by spaces, before it is sent to the\n     server to be executed.\n\n     The options are as follows:\n\n     -4      Forces ssh to use IPv4 addresses only.\n\n     -6      Forces ssh to use IPv6 addresses only.\n\n     -A      Enables forwarding of connections from an authentication agent\n\t     such as ssh-agent(1).  This can also be specified on a per-host\n\t     basis in a configuration file.\n\n\t     Agent forwarding should be enabled with caution.  Users with the\n\t     ability to bypass file permissions on the remote host (for the\n\t     agent's UNIX-domain socket) can access the local agent through\n\t     the forwarded connection.\tAn attacker cannot obtain key material\n\t     from the agent, however they can perform operations on the keys\n\t     that enable them to authenticate using the identities loaded into\n\t     the agent.  A safer alternative may be to use a jump host (see\n\t     -J).\n\n     -a      Disables forwarding of the authentication agent connection.\n\n     -B bind_interface\n\t     Bind to the address of bind_interface before attempting to\n\t     connect to the destination host.  This is only useful on systems\n\t     with more than one address.\n\n     -b bind_address\n\t     Use bind_address on the local machine as the source address of\n\t     the connection.  Only useful on systems with more than one\n\t     address.\n\n     -C      Requests compression of all data (including stdin, stdout,\n\t     stderr, and data for forwarded X11, TCP and UNIX-domain\n\t     connections).  The compression algorithm is the same used by\n\t     gzip(1).  Compression is desirable on modem lines and other slow\n\t     connections, but will only slow down things on fast networks.\n\t     The default value can be set on a host-by-host basis in the\n\t     configuration files; see the Compression option in ssh_config(5).\n\n     -c cipher_spec\n\t     Selects the cipher specification for encrypting the session.\n\t     cipher_spec is a comma-separated list of ciphers listed in order\n\t     of preference.  See the Ciphers keyword in ssh_config(5) for more\n\t     information.\n\n     -D [bind_address:]port\n\t     Specifies a local “dynamic” application-level port forwarding.\n\t     This works by allocating a socket to listen to port on the local\n\t     side, optionally bound to the specified bind_address.  Whenever a\n\t     connection is made to this port, the connection is forwarded over\n\t     the secure channel, and the application protocol is then used to\n\t     determine where to connect to from the remote machine.  Currently\n\t     the SOCKS4 and SOCKS5 protocols are supported, and ssh will act\n\t     as a SOCKS server.  Only root can forward privileged ports.\n\t     Dynamic port forwardings can also be specified in the\n\t     configuration file.\n\n\t     IPv6 addresses can be specified by enclosing the address in\n\t     square brackets.  Only the superuser can forward privileged\n\t     ports.  By default, the local port is bound in accordance with\n\t     the GatewayPorts setting.\tHowever, an explicit bind_address may\n\t     be used to bind the connection to a specific address.  The\n\t     bind_address of “localhost” indicates that the listening port be\n\t     bound for local use only, while an empty address or ‘*’ indicates\n\t     that the port should be available from all interfaces.\n\n     -E log_file\n\t     Append debug logs to log_file instead of standard error.\n\n     -e escape_char\n\t     Sets the escape character for sessions with a pty (default: ‘~’).\n\t     The escape character is only recognized at the beginning of a\n\t     line.  The escape character followed by a dot (‘.’) closes the\n\t     connection; followed by control-Z suspends the connection; and\n\t     followed by itself sends the escape character once.  Setting the\n\t     character to “none” disables any escapes and makes the session\n\t     fully transparent.\n\n     -F configfile\n\t     Specifies an alternative per-user configuration file.  If a\n\t     configuration file is given on the command line, the system-wide\n\t     configuration file (/etc/ssh/ssh_config) will be ignored.\tThe\n\t     default for the per-user configuration file is ~/.ssh/config.  If\n\t     set to “none”, no configuration files will be read.\n\n     -f      Requests ssh to go to background just before command execution.\n\t     This is useful if ssh is going to ask for passwords or\n\t     passphrases, but the user wants it in the background.  This\n\t     implies -n.  The recommended way to start X11 programs at a\n\t     remote site is with something like ssh -f host xterm.\n\n\t     If the ExitOnForwardFailure configuration option is set to “yes”,\n\t     then a client started with -f will wait for all remote port\n\t     forwards to be successfully established before placing itself in\n\t     the background.  Refer to the description of\n\t     ForkAfterAuthentication in ssh_config(5) for details.\n\n     -G      Causes ssh to print its configuration after evaluating Host and\n\t     Match blocks and exit.\n\n     -g      Allows remote hosts to connect to local forwarded ports.  If used\n\t     on a multiplexed connection, then this option must be specified\n\t     on the master process.\n\n     -I pkcs11\n\t     Specify the PKCS#11 shared library ssh should use to communicate\n\t     with a PKCS#11 token providing keys for user authentication.  Use\n\t     of this option will disable UseKeychain.\n\n     -i identity_file\n\t     Selects a file from which the identity (private key) for public\n\t     key authentication is read.  You can also specify a public key\n\t     file to use the corresponding private key that is loaded in\n\t     ssh-agent(1) when the private key file is not present locally.\n\t     The default is ~/.ssh/id_rsa, ~/.ssh/id_ecdsa,\n\t     ~/.ssh/id_ecdsa_sk, ~/.ssh/id_ed25519 and ~/.ssh/id_ed25519_sk.\n\t     Identity files may also be specified on a per-host basis in the\n\t     configuration file.  It is possible to have multiple -i options\n\t     (and multiple identities specified in configuration files).  If\n\t     no certificates have been explicitly specified by the\n\t     CertificateFile directive, ssh will also try to load certificate\n\t     information from the filename obtained by appending -cert.pub to\n\t     identity filenames.\n\n     -J destination\n\t     Connect to the target host by first making an ssh connection to\n\t     the jump host described by destination and then establishing a\n\t     TCP forwarding to the ultimate destination from there.  Multiple\n\t     jump hops may be specified separated by comma characters.\tIPv6\n\t     addresses can be specified by enclosing the address in square\n\t     brackets.\tThis is a shortcut to specify a ProxyJump\n\t     configuration directive.  Note that configuration directives\n\t     supplied on the command-line generally apply to the destination\n\t     host and not any specified jump hosts.  Use ~/.ssh/config to\n\t     specify configuration for jump hosts.\n\n     -K      Enables GSSAPI-based authentication and forwarding (delegation)\n\t     of GSSAPI credentials to the server.\n\n     -k      Disables forwarding (delegation) of GSSAPI credentials to the\n\t     server.\n\n     -L [bind_address:]port:host:hostport\n     -L [bind_address:]port:remote_socket\n     -L local_socket:host:hostport\n     -L local_socket:remote_socket\n\t     Specifies that connections to the given TCP port or Unix socket\n\t     on the local (client) host are to be forwarded to the given host\n\t     and port, or Unix socket, on the remote side.  This works by\n\t     allocating a socket to listen to either a TCP port on the local\n\t     side, optionally bound to the specified bind_address, or to a\n\t     Unix socket.  Whenever a connection is made to the local port or\n\t     socket, the connection is forwarded over the secure channel, and\n\t     a connection is made to either host port hostport, or the Unix\n\t     socket remote_socket, from the remote machine.\n\n\t     Port forwardings can also be specified in the configuration file.\n\t     Only the superuser can forward privileged ports.  IPv6 addresses\n\t     can be specified by enclosing the address in square brackets.\n\n\t     By default, the local port is bound in accordance with the\n\t     GatewayPorts setting.  However, an explicit bind_address may be\n\t     used to bind the connection to a specific address.  The\n\t     bind_address of “localhost” indicates that the listening port be\n\t     bound for local use only, while an empty address or ‘*’ indicates\n\t     that the port should be available from all interfaces.\n\n     -l login_name\n\t     Specifies the user to log in as on the remote machine.  This also\n\t     may be specified on a per-host basis in the configuration file.\n\n     -M      Places the ssh client into “master” mode for connection sharing.\n\t     Multiple -M options places ssh into “master” mode but with\n\t     confirmation required using ssh-askpass(1) before each operation\n\t     that changes the multiplexing state (e.g. opening a new session).\n\t     Refer to the description of ControlMaster in ssh_config(5) for\n\t     details.\n\n     -m mac_spec\n\t     A comma-separated list of MAC (message authentication code)\n\t     algorithms, specified in order of preference.  See the MACs\n\t     keyword in ssh_config(5) for more information.\n\n     -N      Do not execute a remote command.  This is useful for just\n\t     forwarding ports.\tRefer to the description of SessionType in\n\t     ssh_config(5) for details.\n\n     -n      Redirects stdin from /dev/null (actually, prevents reading from\n\t     stdin).  This must be used when ssh is run in the background.  A\n\t     common trick is to use this to run X11 programs on a remote\n\t     machine.  For example, ssh -n shadows.cs.hut.fi emacs & will\n\t     start an emacs on shadows.cs.hut.fi, and the X11 connection will\n\t     be automatically forwarded over an encrypted channel.  The ssh\n\t     program will be put in the background.  (This does not work if\n\t     ssh needs to ask for a password or passphrase; see also the -f\n\t     option.)  Refer to the description of StdinNull in ssh_config(5)\n\t     for details.\n\n     -O ctl_cmd\n\t     Control an active connection multiplexing master process.\tWhen\n\t     the -O option is specified, the ctl_cmd argument is interpreted\n\t     and passed to the master process.\tValid commands are: “check”\n\t     (check that the master process is running), “forward” (request\n\t     forwardings without command execution), “cancel” (cancel\n\t     forwardings), “proxy” (connect to a running multiplexing master\n\t     in proxy mode), “exit” (request the master to exit), and “stop”\n\t     (request the master to stop accepting further multiplexing\n\t     requests).\n\n     -o option\n\t     Can be used to give options in the format used in the\n\t     configuration file.  This is useful for specifying options for\n\t     which there is no separate command-line flag.  For full details\n\t     of the options listed below, and their possible values, see\n\t     ssh_config(5).\n\n\t\t   AddKeysToAgent\n\t\t   AddressFamily\n\t\t   BatchMode\n\t\t   BindAddress\n\t\t   CanonicalDomains\n\t\t   CanonicalizeFallbackLocal\n\t\t   CanonicalizeHostname\n\t\t   CanonicalizeMaxDots\n\t\t   CanonicalizePermittedCNAMEs\n\t\t   CASignatureAlgorithms\n\t\t   CertificateFile\n\t\t   CheckHostIP\n\t\t   Ciphers\n\t\t   ClearAllForwardings\n\t\t   Compression\n\t\t   ConnectionAttempts\n\t\t   ConnectTimeout\n\t\t   ControlMaster\n\t\t   ControlPath\n\t\t   ControlPersist\n\t\t   DynamicForward\n\t\t   EnableEscapeCommandline\n\t\t   EscapeChar\n\t\t   ExitOnForwardFailure\n\t\t   FingerprintHash\n\t\t   ForkAfterAuthentication\n\t\t   ForwardAgent\n\t\t   ForwardX11\n\t\t   ForwardX11Timeout\n\t\t   ForwardX11Trusted\n\t\t   GatewayPorts\n\t\t   GlobalKnownHostsFile\n\t\t   GSSAPIAuthentication\n\t\t   GSSAPIDelegateCredentials\n\t\t   HashKnownHosts\n\t\t   Host\n\t\t   HostbasedAcceptedAlgorithms\n\t\t   HostbasedAuthentication\n\t\t   HostKeyAlgorithms\n\t\t   HostKeyAlias\n\t\t   Hostname\n\t\t   IdentitiesOnly\n\t\t   IdentityAgent\n\t\t   IdentityFile\n\t\t   IPQoS\n\t\t   KbdInteractiveAuthentication\n\t\t   KbdInteractiveDevices\n\t\t   KexAlgorithms\n\t\t   KnownHostsCommand\n\t\t   LocalCommand\n\t\t   LocalForward\n\t\t   LogLevel\n\t\t   MACs\n\t\t   Match\n\t\t   NoHostAuthenticationForLocalhost\n\t\t   NumberOfPasswordPrompts\n\t\t   PasswordAuthentication\n\t\t   PermitLocalCommand\n\t\t   PermitRemoteOpen\n\t\t   PKCS11Provider\n\t\t   Port\n\t\t   PreferredAuthentications\n\t\t   ProxyCommand\n\t\t   ProxyJump\n\t\t   ProxyUseFdpass\n\t\t   PubkeyAcceptedAlgorithms\n\t\t   PubkeyAuthentication\n\t\t   RekeyLimit\n\t\t   RemoteCommand\n\t\t   RemoteForward\n\t\t   RequestTTY\n\t\t   RequiredRSASize\n\t\t   SendEnv\n\t\t   ServerAliveInterval\n\t\t   ServerAliveCountMax\n\t\t   SessionType\n\t\t   SetEnv\n\t\t   StdinNull\n\t\t   StreamLocalBindMask\n\t\t   StreamLocalBindUnlink\n\t\t   StrictHostKeyChecking\n\t\t   TCPKeepAlive\n\t\t   Tunnel\n\t\t   TunnelDevice\n\t\t   UpdateHostKeys\n\t\t   UseKeychain\n\t\t   User\n\t\t   UserKnownHostsFile\n\t\t   VerifyHostKeyDNS\n\t\t   VisualHostKey\n\t\t   XAuthLocation\n\n     -P tag  Specify a tag name that may be used to select configuration in\n\t     ssh_config(5).  Refer to the Tag and Match keywords in\n\t     ssh_config(5) for more information.\n     -p port\n\t     Port to connect to on the remote host.  This can be specified on\n\t     a per-host basis in the configuration file.\n\n     -Q query_option\n\t     Queries for the algorithms supported by one of the following\n\t     features: cipher (supported symmetric ciphers), cipher-auth\n\t     (supported symmetric ciphers that support authenticated\n\t     encryption), help (supported query terms for use with the -Q\n\t     flag), mac (supported message integrity codes), kex (key exchange\n\t     algorithms), key (key types), key-ca-sign (valid CA signature\n\t     algorithms for certificates), key-cert (certificate key types),\n\t     key-plain (non-certificate key types), key-sig (all key types and\n\t     signature algorithms), protocol-version (supported SSH protocol\n\t     versions), and sig (supported signature algorithms).\n\t     Alternatively, any keyword from ssh_config(5) or sshd_config(5)\n\t     that takes an algorithm list may be used as an alias for the\n\t     corresponding query_option.\n\n     -q      Quiet mode.  Causes most warning and diagnostic messages to be\n\t     suppressed.\n\n     -R [bind_address:]port:host:hostport\n     -R [bind_address:]port:local_socket\n     -R remote_socket:host:hostport\n     -R remote_socket:local_socket\n     -R [bind_address:]port\n\t     Specifies that connections to the given TCP port or Unix socket\n\t     on the remote (server) host are to be forwarded to the local\n\t     side.\n\n\t     This works by allocating a socket to listen to either a TCP port\n\t     or to a Unix socket on the remote side.  Whenever a connection is\n\t     made to this port or Unix socket, the connection is forwarded\n\t     over the secure channel, and a connection is made from the local\n\t     machine to either an explicit destination specified by host port\n\t     hostport, or local_socket, or, if no explicit destination was\n\t     specified, ssh will act as a SOCKS 4/5 proxy and forward\n\t     connections to the destinations requested by the remote SOCKS\n\t     client.\n\n\t     Port forwardings can also be specified in the configuration file.\n\t     Privileged ports can be forwarded only when logging in as root on\n\t     the remote machine.  IPv6 addresses can be specified by enclosing\n\t     the address in square brackets.\n\n\t     By default, TCP listening sockets on the server will be bound to\n\t     the loopback interface only.  This may be overridden by\n\t     specifying a bind_address.  An empty bind_address, or the address\n\t     ‘*’, indicates that the remote socket should listen on all\n\t     interfaces.  Specifying a remote bind_address will only succeed\n\t     if the server's GatewayPorts option is enabled (see\n\t     sshd_config(5)).\n\n\t     If the port argument is ‘0’, the listen port will be dynamically\n\t     allocated on the server and reported to the client at run time.\n\t     When used together with -O forward, the allocated port will be\n\t     printed to the standard output.\n\n     -S ctl_path\n\t     Specifies the location of a control socket for connection\n\t     sharing, or the string “none” to disable connection sharing.\n\t     Refer to the description of ControlPath and ControlMaster in\n\t     ssh_config(5) for details.\n\n     -s      May be used to request invocation of a subsystem on the remote\n\t     system.  Subsystems facilitate the use of SSH as a secure\n\t     transport for other applications (e.g. sftp(1)).  The subsystem\n\t     is specified as the remote command.  Refer to the description of\n\t     SessionType in ssh_config(5) for details.\n\n     -T      Disable pseudo-terminal allocation.\n\n     -t      Force pseudo-terminal allocation.\tThis can be used to execute\n\t     arbitrary screen-based programs on a remote machine, which can be\n\t     very useful, e.g. when implementing menu services.  Multiple -t\n\t     options force tty allocation, even if ssh has no local tty.\n\n     -V      Display the version number and exit.\n\n     -v      Verbose mode.  Causes ssh to print debugging messages about its\n\t     progress.\tThis is helpful in debugging connection,\n\t     authentication, and configuration problems.  Multiple -v options\n\t     increase the verbosity.  The maximum is 3.\n\n     -W host:port\n\t     Requests that standard input and output on the client be\n\t     forwarded to host on port over the secure channel.  Implies -N,\n\t     -T, ExitOnForwardFailure and ClearAllForwardings, though these\n\t     can be overridden in the configuration file or using -o command\n\t     line options.\n\n     -w local_tun[:remote_tun]\n\t     Requests tunnel device forwarding with the specified tun(4)\n\t     devices between the client (local_tun) and the server\n\t     (remote_tun).\n\n\t     The devices may be specified by numerical ID or the keyword\n\t     “any”, which uses the next available tunnel device.  If\n\t     remote_tun is not specified, it defaults to “any”.  See also the\n\t     Tunnel and TunnelDevice directives in ssh_config(5).\n\n\t     If the Tunnel directive is unset, it will be set to the default\n\t     tunnel mode, which is “point-to-point”.  If a different Tunnel\n\t     forwarding mode it desired, then it should be specified before\n\t     -w.\n\n     -X      Enables X11 forwarding.  This can also be specified on a per-host\n\t     basis in a configuration file.\n\n\t     X11 forwarding should be enabled with caution.  Users with the\n\t     ability to bypass file permissions on the remote host (for the\n\t     user's X authorization database) can access the local X11 display\n\t     through the forwarded connection.\tAn attacker may then be able\n\t     to perform activities such as keystroke monitoring.\n\n\t     For this reason, X11 forwarding is subjected to X11 SECURITY\n\t     extension restrictions by default.  Refer to the ssh -Y option\n\t     and the ForwardX11Trusted directive in ssh_config(5) for more\n\t     information.\n\n     -x      Disables X11 forwarding.\n\n     -Y      Enables trusted X11 forwarding.  Trusted X11 forwardings are not\n\t     subjected to the X11 SECURITY extension controls.\n\n     -y      Send log information using the syslog(3) system module.  By\n\t     default this information is sent to stderr.\n\n     ssh may additionally obtain configuration data from a per-user\n     configuration file and a system-wide configuration file.  The file format\n     and configuration options are described in ssh_config(5).\n",
        "     The OpenSSH SSH client supports SSH protocol 2.\n\n     The methods available for authentication are: GSSAPI-based\n     authentication, host-based authentication, public key authentication,\n     keyboard-interactive authentication, and password authentication.\n     Authentication methods are tried in the order specified above, though\n     PreferredAuthentications can be used to change the default order.\n\n     Host-based authentication works as follows: If the machine the user logs\n     in from is listed in /etc/hosts.equiv or /etc/shosts.equiv on the remote\n     machine, the user is non-root and the user names are the same on both\n     sides, or if the files ~/.rhosts or ~/.shosts exist in the user's home\n     directory on the remote machine and contain a line containing the name of\n     the client machine and the name of the user on that machine, the user is\n     considered for login.  Additionally, the server must be able to verify\n     the client's host key (see the description of /etc/ssh/ssh_known_hosts\n     and ~/.ssh/known_hosts, below) for login to be permitted.\tThis\n     authentication method closes security holes due to IP spoofing, DNS\n     spoofing, and routing spoofing.  [Note to the administrator:\n     /etc/hosts.equiv, ~/.rhosts, and the rlogin/rsh protocol in general, are\n     inherently insecure and should be disabled if security is desired.]\n\n     Public key authentication works as follows: The scheme is based on\n     public-key cryptography, using cryptosystems where encryption and\n     decryption are done using separate keys, and it is unfeasible to derive\n     the decryption key from the encryption key.  The idea is that each user\n     creates a public/private key pair for authentication purposes.  The\n     server knows the public key, and only the user knows the private key.\n     ssh implements public key authentication protocol automatically, using\n     one of the ECDSA, Ed25519 or RSA algorithms.\n\n     The file ~/.ssh/authorized_keys lists the public keys that are permitted\n     for logging in.  When the user logs in, the ssh program tells the server\n     which key pair it would like to use for authentication.  The client\n     proves that it has access to the private key and the server checks that\n     the corresponding public key is authorized to accept the account.\n\n     The server may inform the client of errors that prevented public key\n     authentication from succeeding after authentication completes using a\n     different method.\tThese may be viewed by increasing the LogLevel to\n     DEBUG or higher (e.g. by using the -v flag).\n\n     The user creates their key pair by running ssh-keygen(1).\tThis stores\n     the private key in ~/.ssh/id_ecdsa (ECDSA), ~/.ssh/id_ecdsa_sk\n     (authenticator-hosted ECDSA), ~/.ssh/id_ed25519 (Ed25519),\n     ~/.ssh/id_ed25519_sk (authenticator-hosted Ed25519), or ~/.ssh/id_rsa\n     (RSA) and stores the public key in ~/.ssh/id_ecdsa.pub (ECDSA),\n     ~/.ssh/id_ecdsa_sk.pub (authenticator-hosted ECDSA),\n     ~/.ssh/id_ed25519.pub (Ed25519), ~/.ssh/id_ed25519_sk.pub (authenticator-\n     hosted Ed25519), or ~/.ssh/id_rsa.pub (RSA) in the user's home directory.\n     The user should then copy the public key to ~/.ssh/authorized_keys in\n     their home directory on the remote machine.  The authorized_keys file\n     corresponds to the conventional ~/.rhosts file, and has one key per line,\n     though the lines can be very long.  After this, the user can log in\n     without giving the password.\n\n     A variation on public key authentication is available in the form of\n     certificate authentication: instead of a set of public/private keys,\n     signed certificates are used.  This has the advantage that a single\n     trusted certification authority can be used in place of many\n     public/private keys.  See the CERTIFICATES section of ssh-keygen(1) for\n     more information.\n\n     The most convenient way to use public key or certificate authentication\n     may be with an authentication agent.  See ssh-agent(1) and (optionally)\n     the AddKeysToAgent directive in ssh_config(5) for more information.\n\n     Keyboard-interactive authentication works as follows: The server sends an\n     arbitrary \"challenge\" text and prompts for a response, possibly multiple\n     times.  Examples of keyboard-interactive authentication include BSD\n     Authentication (see login.conf(5)) and PAM (some non-OpenBSD systems).\n\n     Finally, if other authentication methods fail, ssh prompts the user for a\n     password.\tThe password is sent to the remote host for checking; however,\n     since all communications are encrypted, the password cannot be seen by\n     someone listening on the network.\n\n     ssh automatically maintains and checks a database containing\n     identification for all hosts it has ever been used with.  Host keys are\n     stored in ~/.ssh/known_hosts in the user's home directory.  Additionally,\n     the file /etc/ssh/ssh_known_hosts is automatically checked for known\n     hosts.  Any new hosts are automatically added to the user's file.\tIf a\n     host's identification ever changes, ssh warns about this and disables\n     password authentication to prevent server spoofing or man-in-the-middle\n     attacks, which could otherwise be used to circumvent the encryption.  The\n     StrictHostKeyChecking option can be used to control logins to machines\n     whose host key is not known or has changed.\n\n     When the user's identity has been accepted by the server, the server\n     either executes the given command in a non-interactive session or, if no\n     command has been specified, logs into the machine and gives the user a\n     normal shell as an interactive session.  All communication with the\n     remote command or shell will be automatically encrypted.\n\n     If an interactive session is requested, ssh by default will only request\n     a pseudo-terminal (pty) for interactive sessions when the client has one.\n     The flags -T and -t can be used to override this behaviour.\n\n     If a pseudo-terminal has been allocated, the user may use the escape\n     characters noted below.\n\n     If no pseudo-terminal has been allocated, the session is transparent and\n     can be used to reliably transfer binary data.  On most systems, setting\n     the escape character to “none” will also make the session transparent\n     even if a tty is used.\n\n     The session terminates when the command or shell on the remote machine\n     exits and all X11 and TCP connections have been closed.\n",
        "     When a pseudo-terminal has been requested, ssh supports a number of\n     functions through the use of an escape character.\n\n     A single tilde character can be sent as ~~ or by following the tilde by a\n     character other than those described below.  The escape character must\n     always follow a newline to be interpreted as special.  The escape\n     character can be changed in configuration files using the EscapeChar\n     configuration directive or on the command line by the -e option.\n\n     The supported escapes (assuming the default ‘~’) are:\n\n     ~.      Disconnect.\n\n     ~^Z     Background ssh.\n\n     ~#      List forwarded connections.\n\n     ~&      Background ssh at logout when waiting for forwarded connection /\n\t     X11 sessions to terminate.\n\n     ~?      Display a list of escape characters.\n\n     ~B      Send a BREAK to the remote system (only useful if the peer\n\t     supports it).\n\n     ~C      Open command line.  Currently this allows the addition of port\n\t     forwardings using the -L, -R and -D options (see above).  It also\n\t     allows the cancellation of existing port-forwardings with\n\t     -KL[bind_address:]port for local, -KR[bind_address:]port for\n\t     remote and -KD[bind_address:]port for dynamic port-forwardings.\n\t     !command allows the user to execute a local command if the\n\t     PermitLocalCommand option is enabled in ssh_config(5).  Basic\n\t     help is available, using the -h option.\n\n     ~R      Request rekeying of the connection (only useful if the peer\n\t     supports it).\n\n     ~V      Decrease the verbosity (LogLevel) when errors are being written\n\t     to stderr.\n\n     ~v      Increase the verbosity (LogLevel) when errors are being written\n\t     to stderr.\n",
        "     Forwarding of arbitrary TCP connections over a secure channel can be\n     specified either on the command line or in a configuration file.  One\n     possible application of TCP forwarding is a secure connection to a mail\n     server; another is going through firewalls.\n\n     In the example below, we look at encrypting communication for an IRC\n     client, even though the IRC server it connects to does not directly\n     support encrypted communication.  This works as follows: the user\n     connects to the remote host using ssh, specifying the ports to be used to\n     forward the connection.  After that it is possible to start the program\n     locally, and ssh will encrypt and forward the connection to the remote\n     server.\n\n     The following example tunnels an IRC session from the client to an IRC\n     server at “server.example.com”, joining channel “#users”, nickname\n     “pinky”, using the standard IRC port, 6667:\n",
        "     The -f option backgrounds ssh and the remote command “sleep 10” is\n     specified to allow an amount of time (10 seconds, in the example) to\n     start the program which is going to use the tunnel.  If no connections\n     are made within the time specified, ssh will exit.\n",
        "     If the ForwardX11 variable is set to “yes” (or see the description of the\n     -X, -x, and -Y options above) and the user is using X11 (the DISPLAY\n     environment variable is set), the connection to the X11 display is\n     automatically forwarded to the remote side in such a way that any X11\n     programs started from the shell (or command) will go through the\n     encrypted channel, and the connection to the real X server will be made\n     from the local machine.  The user should not manually set DISPLAY.\n     Forwarding of X11 connections can be configured on the command line or in\n     configuration files.\n\n     The DISPLAY value set by ssh will point to the server machine, but with a\n     display number greater than zero.\tThis is normal, and happens because\n     ssh creates a “proxy” X server on the server machine for forwarding the\n     connections over the encrypted channel.\n\n     ssh will also automatically set up Xauthority data on the server machine.\n     For this purpose, it will generate a random authorization cookie, store\n     it in Xauthority on the server, and verify that any forwarded connections\n     carry this cookie and replace it by the real cookie when the connection\n     is opened.  The real authentication cookie is never sent to the server\n     machine (and no cookies are sent in the plain).\n\n     If the ForwardAgent variable is set to “yes” (or see the description of\n     the -A and -a options above) and the user is using an authentication\n     agent, the connection to the agent is automatically forwarded to the\n     remote side.\n",
        "     When connecting to a server for the first time, a fingerprint of the\n     server's public key is presented to the user (unless the option\n     StrictHostKeyChecking has been disabled).\tFingerprints can be determined\n     using ssh-keygen(1):\n\n\t   $ ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key\n\n     If the fingerprint is already known, it can be matched and the key can be\n     accepted or rejected.  If only legacy (MD5) fingerprints for the server\n     are available, the ssh-keygen(1) -E option may be used to downgrade the\n     fingerprint algorithm to match.\n\n     Because of the difficulty of comparing host keys just by looking at\n     fingerprint strings, there is also support to compare host keys visually,\n     using random art.\tBy setting the VisualHostKey option to “yes”, a small\n     ASCII graphic gets displayed on every login to a server, no matter if the\n     session itself is interactive or not.  By learning the pattern a known\n     server produces, a user can easily find out that the host key has changed\n     when a completely different pattern is displayed.\tBecause these patterns\n     are not unambiguous however, a pattern that looks similar to the pattern\n     remembered only gives a good probability that the host key is the same,\n     not guaranteed proof.\n\n     To get a listing of the fingerprints along with their random art for all\n     known hosts, the following command line can be used:\n\n\t   $ ssh-keygen -lv -f ~/.ssh/known_hosts\n\n     If the fingerprint is unknown, an alternative method of verification is\n     available: SSH fingerprints verified by DNS.  An additional resource\n     record (RR), SSHFP, is added to a zonefile and the connecting client is\n     able to match the fingerprint with that of the key presented.\n\n     In this example, we are connecting a client to a server,\n     “host.example.com”.  The SSHFP resource records should first be added to\n     the zonefile for host.example.com:\n\n\t   $ ssh-keygen -r host.example.com.\n\n     The output lines will have to be added to the zonefile.  To check that\n     the zone is answering fingerprint queries:\n\n\t   $ dig -t SSHFP host.example.com\n\n     Finally the client connects:\n\n\t   $ ssh -o \"VerifyHostKeyDNS ask\" host.example.com\n\t   [...]\n\t   Matching host key fingerprint found in DNS.\n\t   Are you sure you want to continue connecting (yes/no)?\n\n     See the VerifyHostKeyDNS option in ssh_config(5) for more information.\n",
        "     ssh contains support for Virtual Private Network (VPN) tunnelling using\n     the tun(4) network pseudo-device, allowing two networks to be joined\n     securely.\tThe sshd_config(5) configuration option PermitTunnel controls\n     whether the server supports this, and at what level (layer 2 or 3\n     traffic).\n\n     The following example would connect client network 10.0.50.0/24 with\n     remote network 10.0.99.0/24 using a point-to-point connection from\n     10.1.1.1 to 10.1.1.2, provided that the SSH server running on the gateway\n     to the remote network, at 192.168.1.15, allows it.\n\n     On the client:\n\n\t   # ssh -f -w 0:1 192.168.1.15 true\n\t   # ifconfig tun0 10.1.1.1 10.1.1.2 netmask 255.255.255.252\n\t   # route add 10.0.99.0/24 10.1.1.2\n\n     On the server:\n\n\t   # ifconfig tun1 10.1.1.2 10.1.1.1 netmask 255.255.255.252\n\t   # route add 10.0.50.0/24 10.1.1.1\n\n     Client access may be more finely tuned via the /root/.ssh/authorized_keys\n     file (see below) and the PermitRootLogin server option.  The following\n     entry would permit connections on tun(4) device 1 from user “jane” and on\n     tun device 2 from user “john”, if PermitRootLogin is set to\n     “forced-commands-only”:\n\n       tunnel=\"1\",command=\"sh /etc/netstart tun1\" ssh-rsa ... jane\n       tunnel=\"2\",command=\"sh /etc/netstart tun2\" ssh-rsa ... john\n\n     Since an SSH-based setup entails a fair amount of overhead, it may be\n     more suited to temporary setups, such as for wireless VPNs.  More\n     permanent VPNs are better provided by tools such as ipsecctl(8) and\n     isakmpd(8).\n",
        "     ssh will normally set the following environment variables:\n\n     DISPLAY\t\t   The DISPLAY variable indicates the location of the\n\t\t\t   X11 server.\tIt is automatically set by ssh to\n\t\t\t   point to a value of the form “hostname:n”, where\n\t\t\t   “hostname” indicates the host where the shell runs,\n\t\t\t   and ‘n’ is an integer ≥ 1.  ssh uses this special\n\t\t\t   value to forward X11 connections over the secure\n\t\t\t   channel.  The user should normally not set DISPLAY\n\t\t\t   explicitly, as that will render the X11 connection\n\t\t\t   insecure (and will require the user to manually\n\t\t\t   copy any required authorization cookies).\n\n     HOME\t\t   Set to the path of the user's home directory.\n\n     LOGNAME\t\t   Synonym for USER; set for compatibility with\n\t\t\t   systems that use this variable.\n\n     MAIL\t\t   Set to the path of the user's mailbox.\n\n     PATH\t\t   Set to the default PATH, as specified when\n\t\t\t   compiling ssh.\n\n     SSH_ASKPASS\t   If ssh needs a passphrase, it will read the\n\t\t\t   passphrase from the current terminal if it was run\n\t\t\t   from a terminal.  If ssh does not have a terminal\n\t\t\t   associated with it but DISPLAY and SSH_ASKPASS are\n\t\t\t   set, it will execute the program specified by\n\t\t\t   SSH_ASKPASS and open an X11 window to read the\n\t\t\t   passphrase.\tThis is particularly useful when\n\t\t\t   calling ssh from a .xsession or related script.\n\t\t\t   (Note that on some machines it may be necessary to\n\t\t\t   redirect the input from /dev/null to make this\n\t\t\t   work.)\n\n     SSH_ASKPASS_REQUIRE   Allows further control over the use of an askpass\n\t\t\t   program.  If this variable is set to “never” then\n\t\t\t   ssh will never attempt to use one.  If it is set to\n\t\t\t   “prefer”, then ssh will prefer to use the askpass\n\t\t\t   program instead of the TTY when requesting\n\t\t\t   passwords.  Finally, if the variable is set to\n\t\t\t   “force”, then the askpass program will be used for\n\t\t\t   all passphrase input regardless of whether DISPLAY\n\t\t\t   is set.\n\n     SSH_AUTH_SOCK\t   Identifies the path of a UNIX-domain socket used to\n\t\t\t   communicate with the agent.\n\n     SSH_CONNECTION\t   Identifies the client and server ends of the\n\t\t\t   connection.\tThe variable contains four space-\n\t\t\t   separated values: client IP address, client port\n\t\t\t   number, server IP address, and server port number.\n\n     SSH_ORIGINAL_COMMAND  This variable contains the original command line if\n\t\t\t   a forced command is executed.  It can be used to\n\t\t\t   extract the original arguments.\n\n     SSH_TTY\t\t   This is set to the name of the tty (path to the\n\t\t\t   device) associated with the current shell or\n\t\t\t   command.  If the current session has no tty, this\n\t\t\t   variable is not set.\n\n     SSH_TUNNEL \t   Optionally set by sshd(8) to contain the interface\n\t\t\t   names assigned if tunnel forwarding was requested\n\t\t\t   by the client.\n\n     SSH_USER_AUTH\t   Optionally set by sshd(8), this variable may\n\t\t\t   contain a pathname to a file that lists the\n\t\t\t   authentication methods successfully used when the\n\t\t\t   session was established, including any public keys\n\t\t\t   that were used.\n\n     TZ \t\t   This variable is set to indicate the present time\n\t\t\t   zone if it was set when the daemon was started\n\t\t\t   (i.e. the daemon passes the value on to new\n\t\t\t   connections).\n\n     USER\t\t   Set to the name of the user logging in.\n\n     Additionally, ssh reads ~/.ssh/environment, and adds lines of the format\n     “VARNAME=value” to the environment if the file exists and users are\n     allowed to change their environment.  For more information, see the\n     PermitUserEnvironment option in sshd_config(5).\n",
        "     ~/.rhosts\n\t     This file is used for host-based authentication (see above).  On\n\t     some machines this file may need to be world-readable if the\n\t     user's home directory is on an NFS partition, because sshd(8)\n\t     reads it as root.\tAdditionally, this file must be owned by the\n\t     user, and must not have write permissions for anyone else.  The\n\t     recommended permission for most machines is read/write for the\n\t     user, and not accessible by others.\n\n     ~/.shosts\n\t     This file is used in exactly the same way as .rhosts, but allows\n\t     host-based authentication without permitting login with\n\t     rlogin/rsh.\n\n     ~/.ssh/\n\t     This directory is the default location for all user-specific\n\t     configuration and authentication information.  There is no\n\t     general requirement to keep the entire contents of this directory\n\t     secret, but the recommended permissions are read/write/execute\n\t     for the user, and not accessible by others.\n\n     ~/.ssh/authorized_keys\n\t     Lists the public keys (ECDSA, Ed25519, RSA) that can be used for\n\t     logging in as this user.  The format of this file is described in\n\t     the sshd(8) manual page.  This file is not highly sensitive, but\n\t     the recommended permissions are read/write for the user, and not\n\t     accessible by others.\n\n     ~/.ssh/config\n\t     This is the per-user configuration file.  The file format and\n\t     configuration options are described in ssh_config(5).  Because of\n\t     the potential for abuse, this file must have strict permissions:\n\t     read/write for the user, and not writable by others.\n\n     ~/.ssh/environment\n\t     Contains additional definitions for environment variables; see\n\t     ENVIRONMENT, above.\n\n     ~/.ssh/id_ecdsa\n     ~/.ssh/id_ecdsa_sk\n     ~/.ssh/id_ed25519\n     ~/.ssh/id_ed25519_sk\n     ~/.ssh/id_rsa\n\t     Contains the private key for authentication.  These files contain\n\t     sensitive data and should be readable by the user but not\n\t     accessible by others (read/write/execute).  ssh will simply\n\t     ignore a private key file if it is accessible by others.  It is\n\t     possible to specify a passphrase when generating the key which\n\t     will be used to encrypt the sensitive part of this file using\n\t     AES-128.\n\n     ~/.ssh/id_ecdsa.pub\n     ~/.ssh/id_ecdsa_sk.pub\n     ~/.ssh/id_ed25519.pub\n     ~/.ssh/id_ed25519_sk.pub\n     ~/.ssh/id_rsa.pub\n\t     Contains the public key for authentication.  These files are not\n\t     sensitive and can (but need not) be readable by anyone.\n\n     ~/.ssh/known_hosts\n\t     Contains a list of host keys for all hosts the user has logged\n\t     into that are not already in the systemwide list of known host\n\t     keys.  See sshd(8) for further details of the format of this\n\t     file.\n\n     ~/.ssh/rc\n\t     Commands in this file are executed by ssh when the user logs in,\n\t     just before the user's shell (or command) is started.  See the\n\t     sshd(8) manual page for more information.\n\n     /etc/hosts.equiv\n\t     This file is for host-based authentication (see above).  It\n\t     should only be writable by root.\n\n     /etc/shosts.equiv\n\t     This file is used in exactly the same way as hosts.equiv, but\n\t     allows host-based authentication without permitting login with\n\t     rlogin/rsh.\n\n     /etc/ssh/ssh_config\n\t     Systemwide configuration file.  The file format and configuration\n\t     options are described in ssh_config(5).\n\n     /etc/ssh/ssh_host_ecdsa_key\n     /etc/ssh/ssh_host_ed25519_key\n     /etc/ssh/ssh_host_rsa_key\n\t     These files contain the private parts of the host keys and are\n\t     used for host-based authentication.\n\n     /etc/ssh/ssh_known_hosts\n\t     Systemwide list of known host keys.  This file should be prepared\n\t     by the system administrator to contain the public host keys of\n\t     all machines in the organization.\tIt should be world-readable.\n\t     See sshd(8) for further details of the format of this file.\n\n     /etc/ssh/sshrc\n\t     Commands in this file are executed by ssh when the user logs in,\n\t     just before the user's shell (or command) is started.  See the\n\t     sshd(8) manual page for more information.\n",
        "     ssh exits with the exit status of the remote command or with 255 if an\n     error occurred.\n",
        "     scp(1), sftp(1), ssh-add(1), ssh-agent(1), ssh-keygen(1), ssh-keyscan(1),\n     tun(4), ssh_config(5), ssh-keysign(8), sshd(8)\n",
        "     S. Lehtinen and C. Lonvick, The Secure Shell (SSH) Protocol Assigned\n     Numbers, RFC 4250, January 2006.\n\n     T. Ylonen and C. Lonvick, The Secure Shell (SSH) Protocol Architecture,\n     RFC 4251, January 2006.\n\n     T. Ylonen and C. Lonvick, The Secure Shell (SSH) Authentication Protocol,\n     RFC 4252, January 2006.\n\n     T. Ylonen and C. Lonvick, The Secure Shell (SSH) Transport Layer\n     Protocol, RFC 4253, January 2006.\n\n     T. Ylonen and C. Lonvick, The Secure Shell (SSH) Connection Protocol, RFC\n     4254, January 2006.\n\n     J. Schlyter and W. Griffin, Using DNS to Securely Publish Secure Shell\n     (SSH) Key Fingerprints, RFC 4255, January 2006.\n\n     F. Cusack and M. Forssen, Generic Message Exchange Authentication for the\n     Secure Shell Protocol (SSH), RFC 4256, January 2006.\n\n     J. Galbraith and P. Remaker, The Secure Shell (SSH) Session Channel Break\n     Extension, RFC 4335, January 2006.\n\n     M. Bellare, T. Kohno, and C. Namprempre, The Secure Shell (SSH) Transport\n     Layer Encryption Modes, RFC 4344, January 2006.\n\n     B. Harris, Improved Arcfour Modes for the Secure Shell (SSH) Transport\n     Layer Protocol, RFC 4345, January 2006.\n\n     M. Friedl, N. Provos, and W. Simpson, Diffie-Hellman Group Exchange for\n     the Secure Shell (SSH) Transport Layer Protocol, RFC 4419, March 2006.\n\n     J. Galbraith and R. Thayer, The Secure Shell (SSH) Public Key File\n     Format, RFC 4716, November 2006.\n\n     D. Stebila and J. Green, Elliptic Curve Algorithm Integration in the\n     Secure Shell Transport Layer, RFC 5656, December 2009.\n\n     A. Perrig and D. Song, Hash Visualization: a New Technique to improve\n     Real-World Security, 1999, International Workshop on Cryptographic\n     Techniques and E-Commerce (CrypTEC '99).\n",
        "     OpenSSH is a derivative of the original and free ssh 1.2.12 release by\n     Tatu Ylonen.  Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos, Theo\n     de Raadt and Dug Song removed many bugs, re-added newer features and\n     created OpenSSH.  Markus Friedl contributed the support for SSH protocol\n     versions 1.5 and 2.0.\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "-4",
      "description": "Forces ssh to use IPv4 addresses only."
    },
    {
      "flag": "-6",
      "description": "Forces ssh to use IPv6 addresses only."
    },
    {
      "flag": "-A",
      "description": "Enables forwarding of connections from an authentication agent such as ssh-agent(1).  This can also be specified on a per-host basis in a configuration file. Agent forwarding should be enabled with caution.  Users with the ability to bypass file permissions on the remote host (for the agent's UNIX-domain socket) can access the local agent through the forwarded connection.\tAn attacker cannot obtain key material from the agent, however they can perform operations on the keys that enable them to authenticate using the identities loaded into the agent.  A safer alternative may be to use a jump host (see"
    },
    {
      "flag": "-J",
      "description": " Connect to the target host by first making an ssh connection to the jump host described by destination and then establishing a TCP forwarding to the ultimate destination from there.  Multiple jump hops may be specified separated by comma characters.\tIPv6 addresses can be specified by enclosing the address in square brackets.\tThis is a shortcut to specify a ProxyJump configuration directive.  Note that configuration directives supplied on the command-line generally apply to the destination host and not any specified jump hosts.  Use ~/.ssh/config to specify configuration for jump hosts.",
      "optional": true
    },
    {
      "flag": "-a",
      "description": "Disables forwarding of the authentication agent connection."
    },
    {
      "flag": "-B",
      "description": " Bind to the address of bind_interface before attempting to connect to the destination host.  This is only useful on systems with more than one address.",
      "optional": true
    },
    {
      "flag": "-b",
      "description": " Use bind_address on the local machine as the source address of the connection.  Only useful on systems with more than one address.",
      "optional": true
    },
    {
      "flag": "-C",
      "description": "Requests compression of all data (including stdin, stdout, stderr, and data for forwarded X11, TCP and UNIX-domain connections).  The compression algorithm is the same used by gzip(1).  Compression is desirable on modem lines and other slow connections, but will only slow down things on fast networks. The default value can be set on a host-by-host basis in the configuration files; see the Compression option in ssh_config(5)."
    },
    {
      "flag": "-c",
      "description": " Selects the cipher specification for encrypting the session. cipher_spec is a comma-separated list of ciphers listed in order of preference.  See the Ciphers keyword in ssh_config(5) for more information.",
      "optional": true
    },
    {
      "flag": "-D",
      "description": " Specifies a local “dynamic” application-level port forwarding. This works by allocating a socket to listen to port on the local side, optionally bound to the specified bind_address.  Whenever a connection is made to this port, the connection is forwarded over the secure channel, and the application protocol is then used to determine where to connect to from the remote machine.  Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server.  Only root can forward privileged ports. Dynamic port forwardings can also be specified in the configuration file. IPv6 addresses can be specified by enclosing the address in square brackets.  Only the superuser can forward privileged ports.  By default, the local port is bound in accordance with the GatewayPorts setting.\tHowever, an explicit bind_address may be used to bind the connection to a specific address.  The bind_address of “localhost” indicates that the listening port be bound for local use only, while an empty address or ‘*’ indicates that the port should be available from all interfaces.",
      "argument": "bind_address:",
      "optional": true
    },
    {
      "flag": "-E",
      "description": " Append debug logs to log_file instead of standard error.",
      "optional": true
    },
    {
      "flag": "-e",
      "description": " Sets the escape character for sessions with a pty (default: ‘~’). The escape character is only recognized at the beginning of a line.  The escape character followed by a dot (‘.’) closes the connection; followed by control-Z suspends the connection; and followed by itself sends the escape character once.  Setting the character to “none” disables any escapes and makes the session fully transparent.",
      "optional": true
    },
    {
      "flag": "-F",
      "description": " Specifies an alternative per-user configuration file.  If a configuration file is given on the command line, the system-wide configuration file (/etc/ssh/ssh_config) will be ignored.\tThe default for the per-user configuration file is ~/.ssh/config.  If set to “none”, no configuration files will be read.",
      "optional": true
    },
    {
      "flag": "-f",
      "description": "Requests ssh to go to background just before command execution. This is useful if ssh is going to ask for passwords or passphrases, but the user wants it in the background.  This implies -n.  The recommended way to start X11 programs at a remote site is with something like ssh -f host xterm. If the ExitOnForwardFailure configuration option is set to “yes”, then a client started with -f will wait for all remote port forwards to be successfully established before placing itself in the background.  Refer to the description of ForkAfterAuthentication in ssh_config(5) for details."
    },
    {
      "flag": "-G",
      "description": "Causes ssh to print its configuration after evaluating Host and Match blocks and exit."
    },
    {
      "flag": "-g",
      "description": "Allows remote hosts to connect to local forwarded ports.  If used on a multiplexed connection, then this option must be specified on the master process."
    },
    {
      "flag": "-I",
      "description": " Specify the PKCS#11 shared library ssh should use to communicate with a PKCS#11 token providing keys for user authentication.  Use of this option will disable UseKeychain.",
      "optional": true
    },
    {
      "flag": "-i",
      "description": " Selects a file from which the identity (private key) for public key authentication is read.  You can also specify a public key file to use the corresponding private key that is loaded in ssh-agent(1) when the private key file is not present locally. The default is ~/.ssh/id_rsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ecdsa_sk, ~/.ssh/id_ed25519 and ~/.ssh/id_ed25519_sk. Identity files may also be specified on a per-host basis in the configuration file.  It is possible to have multiple -i options (and multiple identities specified in configuration files).  If no certificates have been explicitly specified by the CertificateFile directive, ssh will also try to load certificate information from the filename obtained by appending -cert.pub to identity filenames.",
      "optional": true
    },
    {
      "flag": "-J",
      "description": " Connect to the target host by first making an ssh connection to the jump host described by destination and then establishing a TCP forwarding to the ultimate destination from there.  Multiple jump hops may be specified separated by comma characters.\tIPv6 addresses can be specified by enclosing the address in square brackets.\tThis is a shortcut to specify a ProxyJump configuration directive.  Note that configuration directives supplied on the command-line generally apply to the destination host and not any specified jump hosts.  Use ~/.ssh/config to specify configuration for jump hosts.",
      "optional": true
    },
    {
      "flag": "-K",
      "description": "Enables GSSAPI-based authentication and forwarding (delegation) of GSSAPI credentials to the server."
    },
    {
      "flag": "-k",
      "description": "Disables forwarding (delegation) of GSSAPI credentials to the server."
    },
    {
      "flag": "-L",
      "description": " Specifies that connections to the given TCP port or Unix socket on the local (client) host are to be forwarded to the given host and port, or Unix socket, on the remote side.  This works by allocating a socket to listen to either a TCP port on the local side, optionally bound to the specified bind_address, or to a Unix socket.  Whenever a connection is made to the local port or socket, the connection is forwarded over the secure channel, and a connection is made to either host port hostport, or the Unix socket remote_socket, from the remote machine. Port forwardings can also be specified in the configuration file. Only the superuser can forward privileged ports.  IPv6 addresses can be specified by enclosing the address in square brackets. By default, the local port is bound in accordance with the GatewayPorts setting.  However, an explicit bind_address may be used to bind the connection to a specific address.  The bind_address of “localhost” indicates that the listening port be bound for local use only, while an empty address or ‘*’ indicates that the port should be available from all interfaces.",
      "optional": true
    },
    {
      "flag": "-L",
      "description": " Specifies that connections to the given TCP port or Unix socket on the local (client) host are to be forwarded to the given host and port, or Unix socket, on the remote side.  This works by allocating a socket to listen to either a TCP port on the local side, optionally bound to the specified bind_address, or to a Unix socket.  Whenever a connection is made to the local port or socket, the connection is forwarded over the secure channel, and a connection is made to either host port hostport, or the Unix socket remote_socket, from the remote machine. Port forwardings can also be specified in the configuration file. Only the superuser can forward privileged ports.  IPv6 addresses can be specified by enclosing the address in square brackets. By default, the local port is bound in accordance with the GatewayPorts setting.  However, an explicit bind_address may be used to bind the connection to a specific address.  The bind_address of “localhost” indicates that the listening port be bound for local use only, while an empty address or ‘*’ indicates that the port should be available from all interfaces.",
      "optional": true
    },
    {
      "flag": "-L",
      "description": " Specifies that connections to the given TCP port or Unix socket on the local (client) host are to be forwarded to the given host and port, or Unix socket, on the remote side.  This works by allocating a socket to listen to either a TCP port on the local side, optionally bound to the specified bind_address, or to a Unix socket.  Whenever a connection is made to the local port or socket, the connection is forwarded over the secure channel, and a connection is made to either host port hostport, or the Unix socket remote_socket, from the remote machine. Port forwardings can also be specified in the configuration file. Only the superuser can forward privileged ports.  IPv6 addresses can be specified by enclosing the address in square brackets. By default, the local port is bound in accordance with the GatewayPorts setting.  However, an explicit bind_address may be used to bind the connection to a specific address.  The bind_address of “localhost” indicates that the listening port be bound for local use only, while an empty address or ‘*’ indicates that the port should be available from all interfaces.",
      "optional": true
    },
    {
      "flag": "-L",
      "description": " Specifies that connections to the given TCP port or Unix socket on the local (client) host are to be forwarded to the given host and port, or Unix socket, on the remote side.  This works by allocating a socket to listen to either a TCP port on the local side, optionally bound to the specified bind_address, or to a Unix socket.  Whenever a connection is made to the local port or socket, the connection is forwarded over the secure channel, and a connection is made to either host port hostport, or the Unix socket remote_socket, from the remote machine. Port forwardings can also be specified in the configuration file. Only the superuser can forward privileged ports.  IPv6 addresses can be specified by enclosing the address in square brackets. By default, the local port is bound in accordance with the GatewayPorts setting.  However, an explicit bind_address may be used to bind the connection to a specific address.  The bind_address of “localhost” indicates that the listening port be bound for local use only, while an empty address or ‘*’ indicates that the port should be available from all interfaces.",
      "optional": true
    },
    {
      "flag": "-l",
      "description": " Specifies the user to log in as on the remote machine.  This also may be specified on a per-host basis in the configuration file.",
      "optional": true
    },
    {
      "flag": "-M",
      "description": "Places the ssh client into “master” mode for connection sharing. Multiple -M options places ssh into “master” mode but with confirmation required using ssh-askpass(1) before each operation that changes the multiplexing state (e.g. opening a new session). Refer to the description of ControlMaster in ssh_config(5) for details."
    },
    {
      "flag": "-m",
      "description": " A comma-separated list of MAC (message authentication code) algorithms, specified in order of preference.  See the MACs keyword in ssh_config(5) for more information.",
      "optional": true
    },
    {
      "flag": "-N",
      "description": "Do not execute a remote command.  This is useful for just forwarding ports.\tRefer to the description of SessionType in ssh_config(5) for details."
    },
    {
      "flag": "-n",
      "description": "Redirects stdin from /dev/null (actually, prevents reading from stdin).  This must be used when ssh is run in the background.  A common trick is to use this to run X11 programs on a remote machine.  For example, ssh -n shadows.cs.hut.fi emacs & will start an emacs on shadows.cs.hut.fi, and the X11 connection will be automatically forwarded over an encrypted channel.  The ssh program will be put in the background.  (This does not work if ssh needs to ask for a password or passphrase; see also the -f option.)  Refer to the description of StdinNull in ssh_config(5) for details."
    },
    {
      "flag": "-O",
      "description": " Control an active connection multiplexing master process.\tWhen the -O option is specified, the ctl_cmd argument is interpreted and passed to the master process.\tValid commands are: “check” (check that the master process is running), “forward” (request forwardings without command execution), “cancel” (cancel forwardings), “proxy” (connect to a running multiplexing master in proxy mode), “exit” (request the master to exit), and “stop” (request the master to stop accepting further multiplexing requests).",
      "optional": true
    },
    {
      "flag": "-o",
      "description": " Can be used to give options in the format used in the configuration file.  This is useful for specifying options for which there is no separate command-line flag.  For full details of the options listed below, and their possible values, see ssh_config(5). AddKeysToAgent AddressFamily BatchMode BindAddress CanonicalDomains CanonicalizeFallbackLocal CanonicalizeHostname CanonicalizeMaxDots CanonicalizePermittedCNAMEs CASignatureAlgorithms CertificateFile CheckHostIP Ciphers ClearAllForwardings Compression ConnectionAttempts ConnectTimeout ControlMaster ControlPath ControlPersist DynamicForward EnableEscapeCommandline EscapeChar ExitOnForwardFailure FingerprintHash ForkAfterAuthentication ForwardAgent ForwardX11 ForwardX11Timeout ForwardX11Trusted GatewayPorts GlobalKnownHostsFile GSSAPIAuthentication GSSAPIDelegateCredentials HashKnownHosts Host HostbasedAcceptedAlgorithms HostbasedAuthentication HostKeyAlgorithms HostKeyAlias Hostname IdentitiesOnly IdentityAgent IdentityFile IPQoS KbdInteractiveAuthentication KbdInteractiveDevices KexAlgorithms KnownHostsCommand LocalCommand LocalForward LogLevel MACs Match NoHostAuthenticationForLocalhost NumberOfPasswordPrompts PasswordAuthentication PermitLocalCommand PermitRemoteOpen PKCS11Provider Port PreferredAuthentications ProxyCommand ProxyJump ProxyUseFdpass PubkeyAcceptedAlgorithms PubkeyAuthentication RekeyLimit RemoteCommand RemoteForward RequestTTY RequiredRSASize SendEnv ServerAliveInterval ServerAliveCountMax SessionType SetEnv StdinNull StreamLocalBindMask StreamLocalBindUnlink StrictHostKeyChecking TCPKeepAlive Tunnel TunnelDevice UpdateHostKeys UseKeychain User UserKnownHostsFile VerifyHostKeyDNS VisualHostKey XAuthLocation",
      "optional": true
    },
    {
      "flag": "-P",
      "description": " ssh_config(5).  Refer to the Tag and Match keywords in ssh_config(5) for more information.",
      "optional": true
    },
    {
      "flag": "-p",
      "description": " Port to connect to on the remote host.  This can be specified on a per-host basis in the configuration file.",
      "optional": true
    },
    {
      "flag": "-Q",
      "description": " Queries for the algorithms supported by one of the following features: cipher (supported symmetric ciphers), cipher-auth (supported symmetric ciphers that support authenticated encryption), help (supported query terms for use with the -Q flag), mac (supported message integrity codes), kex (key exchange algorithms), key (key types), key-ca-sign (valid CA signature algorithms for certificates), key-cert (certificate key types), key-plain (non-certificate key types), key-sig (all key types and signature algorithms), protocol-version (supported SSH protocol versions), and sig (supported signature algorithms). Alternatively, any keyword from ssh_config(5) or sshd_config(5) that takes an algorithm list may be used as an alias for the corresponding query_option.",
      "optional": true
    },
    {
      "flag": "-q",
      "description": "Quiet mode.  Causes most warning and diagnostic messages to be suppressed."
    },
    {
      "flag": "-R",
      "description": " Specifies that connections to the given TCP port or Unix socket on the remote (server) host are to be forwarded to the local side. This works by allocating a socket to listen to either a TCP port or to a Unix socket on the remote side.  Whenever a connection is made to this port or Unix socket, the connection is forwarded over the secure channel, and a connection is made from the local machine to either an explicit destination specified by host port hostport, or local_socket, or, if no explicit destination was specified, ssh will act as a SOCKS 4/5 proxy and forward connections to the destinations requested by the remote SOCKS client. Port forwardings can also be specified in the configuration file. Privileged ports can be forwarded only when logging in as root on the remote machine.  IPv6 addresses can be specified by enclosing the address in square brackets. By default, TCP listening sockets on the server will be bound to the loopback interface only.  This may be overridden by specifying a bind_address.  An empty bind_address, or the address ‘*’, indicates that the remote socket should listen on all interfaces.  Specifying a remote bind_address will only succeed if the server's GatewayPorts option is enabled (see sshd_config(5)). If the port argument is ‘0’, the listen port will be dynamically allocated on the server and reported to the client at run time. When used together with -O forward, the allocated port will be printed to the standard output.",
      "optional": true
    },
    {
      "flag": "-R",
      "description": " Specifies that connections to the given TCP port or Unix socket on the remote (server) host are to be forwarded to the local side. This works by allocating a socket to listen to either a TCP port or to a Unix socket on the remote side.  Whenever a connection is made to this port or Unix socket, the connection is forwarded over the secure channel, and a connection is made from the local machine to either an explicit destination specified by host port hostport, or local_socket, or, if no explicit destination was specified, ssh will act as a SOCKS 4/5 proxy and forward connections to the destinations requested by the remote SOCKS client. Port forwardings can also be specified in the configuration file. Privileged ports can be forwarded only when logging in as root on the remote machine.  IPv6 addresses can be specified by enclosing the address in square brackets. By default, TCP listening sockets on the server will be bound to the loopback interface only.  This may be overridden by specifying a bind_address.  An empty bind_address, or the address ‘*’, indicates that the remote socket should listen on all interfaces.  Specifying a remote bind_address will only succeed if the server's GatewayPorts option is enabled (see sshd_config(5)). If the port argument is ‘0’, the listen port will be dynamically allocated on the server and reported to the client at run time. When used together with -O forward, the allocated port will be printed to the standard output.",
      "optional": true
    },
    {
      "flag": "-R",
      "description": " Specifies that connections to the given TCP port or Unix socket on the remote (server) host are to be forwarded to the local side. This works by allocating a socket to listen to either a TCP port or to a Unix socket on the remote side.  Whenever a connection is made to this port or Unix socket, the connection is forwarded over the secure channel, and a connection is made from the local machine to either an explicit destination specified by host port hostport, or local_socket, or, if no explicit destination was specified, ssh will act as a SOCKS 4/5 proxy and forward connections to the destinations requested by the remote SOCKS client. Port forwardings can also be specified in the configuration file. Privileged ports can be forwarded only when logging in as root on the remote machine.  IPv6 addresses can be specified by enclosing the address in square brackets. By default, TCP listening sockets on the server will be bound to the loopback interface only.  This may be overridden by specifying a bind_address.  An empty bind_address, or the address ‘*’, indicates that the remote socket should listen on all interfaces.  Specifying a remote bind_address will only succeed if the server's GatewayPorts option is enabled (see sshd_config(5)). If the port argument is ‘0’, the listen port will be dynamically allocated on the server and reported to the client at run time. When used together with -O forward, the allocated port will be printed to the standard output.",
      "optional": true
    },
    {
      "flag": "-R",
      "description": " Specifies that connections to the given TCP port or Unix socket on the remote (server) host are to be forwarded to the local side. This works by allocating a socket to listen to either a TCP port or to a Unix socket on the remote side.  Whenever a connection is made to this port or Unix socket, the connection is forwarded over the secure channel, and a connection is made from the local machine to either an explicit destination specified by host port hostport, or local_socket, or, if no explicit destination was specified, ssh will act as a SOCKS 4/5 proxy and forward connections to the destinations requested by the remote SOCKS client. Port forwardings can also be specified in the configuration file. Privileged ports can be forwarded only when logging in as root on the remote machine.  IPv6 addresses can be specified by enclosing the address in square brackets. By default, TCP listening sockets on the server will be bound to the loopback interface only.  This may be overridden by specifying a bind_address.  An empty bind_address, or the address ‘*’, indicates that the remote socket should listen on all interfaces.  Specifying a remote bind_address will only succeed if the server's GatewayPorts option is enabled (see sshd_config(5)). If the port argument is ‘0’, the listen port will be dynamically allocated on the server and reported to the client at run time. When used together with -O forward, the allocated port will be printed to the standard output.",
      "optional": true
    },
    {
      "flag": "-R",
      "description": " Specifies that connections to the given TCP port or Unix socket on the remote (server) host are to be forwarded to the local side. This works by allocating a socket to listen to either a TCP port or to a Unix socket on the remote side.  Whenever a connection is made to this port or Unix socket, the connection is forwarded over the secure channel, and a connection is made from the local machine to either an explicit destination specified by host port hostport, or local_socket, or, if no explicit destination was specified, ssh will act as a SOCKS 4/5 proxy and forward connections to the destinations requested by the remote SOCKS client. Port forwardings can also be specified in the configuration file. Privileged ports can be forwarded only when logging in as root on the remote machine.  IPv6 addresses can be specified by enclosing the address in square brackets. By default, TCP listening sockets on the server will be bound to the loopback interface only.  This may be overridden by specifying a bind_address.  An empty bind_address, or the address ‘*’, indicates that the remote socket should listen on all interfaces.  Specifying a remote bind_address will only succeed if the server's GatewayPorts option is enabled (see sshd_config(5)). If the port argument is ‘0’, the listen port will be dynamically allocated on the server and reported to the client at run time. When used together with -O forward, the allocated port will be printed to the standard output.",
      "optional": true
    },
    {
      "flag": "-S",
      "description": " Specifies the location of a control socket for connection sharing, or the string “none” to disable connection sharing. Refer to the description of ControlPath and ControlMaster in ssh_config(5) for details.",
      "optional": true
    },
    {
      "flag": "-s",
      "description": "May be used to request invocation of a subsystem on the remote system.  Subsystems facilitate the use of SSH as a secure transport for other applications (e.g. sftp(1)).  The subsystem is specified as the remote command.  Refer to the description of SessionType in ssh_config(5) for details."
    },
    {
      "flag": "-T",
      "description": "Disable pseudo-terminal allocation."
    },
    {
      "flag": "-t",
      "description": "Force pseudo-terminal allocation.\tThis can be used to execute arbitrary screen-based programs on a remote machine, which can be very useful, e.g. when implementing menu services.  Multiple -t options force tty allocation, even if ssh has no local tty."
    },
    {
      "flag": "-V",
      "description": "Display the version number and exit."
    },
    {
      "flag": "-v",
      "description": "Verbose mode.  Causes ssh to print debugging messages about its progress.\tThis is helpful in debugging connection, authentication, and configuration problems.  Multiple -v options increase the verbosity.  The maximum is 3."
    },
    {
      "flag": "-W",
      "description": " Requests that standard input and output on the client be forwarded to host on port over the secure channel.  Implies -N,",
      "optional": true
    },
    {
      "flag": "-T",
      "description": ", ExitOnForwardFailure and ClearAllForwardings, though these can be overridden in the configuration file or using -o command line options."
    },
    {
      "flag": "-w",
      "description": " Requests tunnel device forwarding with the specified tun(4) devices between the client (local_tun) and the server (remote_tun). The devices may be specified by numerical ID or the keyword “any”, which uses the next available tunnel device.  If remote_tun is not specified, it defaults to “any”.  See also the Tunnel and TunnelDevice directives in ssh_config(5). If the Tunnel directive is unset, it will be set to the default tunnel mode, which is “point-to-point”.  If a different Tunnel forwarding mode it desired, then it should be specified before",
      "optional": true
    },
    {
      "flag": "-w",
      "description": " Requests tunnel device forwarding with the specified tun(4) devices between the client (local_tun) and the server (remote_tun). The devices may be specified by numerical ID or the keyword “any”, which uses the next available tunnel device.  If remote_tun is not specified, it defaults to “any”.  See also the Tunnel and TunnelDevice directives in ssh_config(5). If the Tunnel directive is unset, it will be set to the default tunnel mode, which is “point-to-point”.  If a different Tunnel forwarding mode it desired, then it should be specified before",
      "optional": true
    },
    {
      "flag": "-X",
      "description": "Enables X11 forwarding.  This can also be specified on a per-host basis in a configuration file. X11 forwarding should be enabled with caution.  Users with the ability to bypass file permissions on the remote host (for the user's X authorization database) can access the local X11 display through the forwarded connection.\tAn attacker may then be able to perform activities such as keystroke monitoring. For this reason, X11 forwarding is subjected to X11 SECURITY extension restrictions by default.  Refer to the ssh -Y option and the ForwardX11Trusted directive in ssh_config(5) for more information."
    },
    {
      "flag": "-x",
      "description": "Disables X11 forwarding."
    },
    {
      "flag": "-Y",
      "description": "Enables trusted X11 forwarding.  Trusted X11 forwardings are not subjected to the X11 SECURITY extension controls."
    },
    {
      "flag": "-y",
      "description": "Send log information using the syslog(3) system module.  By default this information is sent to stderr. ssh may additionally obtain configuration data from a per-user configuration file and a system-wide configuration file.  The file format and configuration options are described in ssh_config(5)."
    }
  ],
  "examples": [
    {
      "command": "ssh -f -L 6667:localhost:6667 server.example.com sleep 10",
      "description": "",
      "tags": []
    },
    {
      "command": "irc -c '#users' pinky IRC/127.0.0.1",
      "description": "",
      "tags": [],
      "output": "     The -f option backgrounds ssh and the remote command “sleep 10” is\n     specified to allow an amount of time (10 seconds, in the example) to\n     start the program which is going to use the tunnel.  If no connections\n     are made within the time specified, ssh will exit.\nX11 FORWARDING\n     If the ForwardX11 variable is set to “yes” (or see the description of the\n     -X, -x, and -Y options above) and the user is using X11 (the DISPLAY\n     environment variable is set), the connection to the X11 display is\n     automatically forwarded to the remote side in such a way that any X11\n     programs started from the shell (or command) will go through the\n     encrypted channel, and the connection to the real X server will be made\n     from the local machine.  The user should not manually set DISPLAY.\n     Forwarding of X11 connections can be configured on the command line or in\n     configuration files.\n     The DISPLAY value set by ssh will point to the server machine, but with a\n     display number greater than zero.\tThis is normal, and happens because\n     ssh creates a “proxy” X server on the server machine for forwarding the\n     connections over the encrypted channel.\n     ssh will also automatically set up Xauthority data on the server machine.\n     For this purpose, it will generate a random authorization cookie, store\n     it in Xauthority on the server, and verify that any forwarded connections\n     carry this cookie and replace it by the real cookie when the connection\n     is opened.  The real authentication cookie is never sent to the server\n     machine (and no cookies are sent in the plain).\n     If the ForwardAgent variable is set to “yes” (or see the description of\n     the -A and -a options above) and the user is using an authentication\n     agent, the connection to the agent is automatically forwarded to the\n     remote side.\nVERIFYING HOST KEYS\n     When connecting to a server for the first time, a fingerprint of the\n     server's public key is presented to the user (unless the option\n     StrictHostKeyChecking has been disabled).\tFingerprints can be determined\n     using ssh-keygen(1):\n"
    },
    {
      "command": "ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key",
      "description": "",
      "tags": [],
      "output": "     If the fingerprint is already known, it can be matched and the key can be\n     accepted or rejected.  If only legacy (MD5) fingerprints for the server\n     are available, the ssh-keygen(1) -E option may be used to downgrade the\n     fingerprint algorithm to match.\n     Because of the difficulty of comparing host keys just by looking at\n     fingerprint strings, there is also support to compare host keys visually,\n     using random art.\tBy setting the VisualHostKey option to “yes”, a small\n     ASCII graphic gets displayed on every login to a server, no matter if the\n     session itself is interactive or not.  By learning the pattern a known\n     server produces, a user can easily find out that the host key has changed\n     when a completely different pattern is displayed.\tBecause these patterns\n     are not unambiguous however, a pattern that looks similar to the pattern\n     remembered only gives a good probability that the host key is the same,\n     not guaranteed proof.\n     To get a listing of the fingerprints along with their random art for all\n     known hosts, the following command line can be used:\n"
    },
    {
      "command": "ssh-keygen -lv -f ~/.ssh/known_hosts",
      "description": "",
      "tags": [],
      "output": "     If the fingerprint is unknown, an alternative method of verification is\n     available: SSH fingerprints verified by DNS.  An additional resource\n     record (RR), SSHFP, is added to a zonefile and the connecting client is\n     able to match the fingerprint with that of the key presented.\n     In this example, we are connecting a client to a server,\n     “host.example.com”.  The SSHFP resource records should first be added to\n     the zonefile for host.example.com:\n"
    },
    {
      "command": "ssh-keygen -r host.example.com.",
      "description": "",
      "tags": [],
      "output": "     The output lines will have to be added to the zonefile.  To check that\n     the zone is answering fingerprint queries:\n"
    },
    {
      "command": "dig -t SSHFP host.example.com",
      "description": "",
      "tags": [],
      "output": "     Finally the client connects:\n"
    },
    {
      "command": "ssh -o \"VerifyHostKeyDNS ask\" host.example.com",
      "description": "[...]",
      "tags": [],
      "output": "\t   [...]\n\t   Matching host key fingerprint found in DNS.\n\t   Are you sure you want to continue connecting (yes/no)?\n     See the VerifyHostKeyDNS option in ssh_config(5) for more information.\nSSH-BASED VIRTUAL PRIVATE NETWORKS\n     ssh contains support for Virtual Private Network (VPN) tunnelling using\n     the tun(4) network pseudo-device, allowing two networks to be joined\n     securely.\tThe sshd_config(5) configuration option PermitTunnel controls\n     whether the server supports this, and at what level (layer 2 or 3\n     traffic).\n     The following example would connect client network 10.0.50.0/24 with\n     remote network 10.0.99.0/24 using a point-to-point connection from\n     10.1.1.1 to 10.1.1.2, provided that the SSH server running on the gateway\n     to the remote network, at 192.168.1.15, allows it.\n     On the client:\n\t   # ssh -f -w 0:1 192.168.1.15 true\n\t   # ifconfig tun0 10.1.1.1 10.1.1.2 netmask 255.255.255.252\n\t   # route add 10.0.99.0/24 10.1.1.2\n     On the server:\n\t   # ifconfig tun1 10.1.1.2 10.1.1.1 netmask 255.255.255.252\n\t   # route add 10.0.50.0/24 10.1.1.1\n     Client access may be more finely tuned via the /root/.ssh/authorized_keys\n     file (see below) and the PermitRootLogin server option.  The following\n     entry would permit connections on tun(4) device 1 from user “jane” and on\n     tun device 2 from user “john”, if PermitRootLogin is set to\n     “forced-commands-only”:\n       tunnel=\"1\",command=\"sh /etc/netstart tun1\" ssh-rsa ... jane\n       tunnel=\"2\",command=\"sh /etc/netstart tun2\" ssh-rsa ... john\n     Since an SSH-based setup entails a fair amount of overhead, it may be\n     more suited to temporary setups, such as for wireless VPNs.  More\n     permanent VPNs are better provided by tools such as ipsecctl(8) and\n     isakmpd(8).\n"
    }
  ],
  "relatedCommands": [
    "ssh_config",
    "sshd_config",
    "sftp",
    "tun",
    "syslog",
    "ssh",
    "remote",
    "login",
    "client",
    "bind_interface",
    "bind_address",
    "cipher_spec",
    "port",
    "log_file",
    "escape_char"
  ],
  "seeAlso": [
    {
      "name": "ssh_config",
      "section": 5
    },
    {
      "name": "ssh_config",
      "section": 5
    },
    {
      "name": "ssh_config",
      "section": 5
    },
    {
      "name": "ssh_config",
      "section": 5
    },
    {
      "name": "ssh_config",
      "section": 5
    },
    {
      "name": "sshd_config",
      "section": 5
    },
    {
      "name": "sshd_config",
      "section": 5
    },
    {
      "name": "ssh_config",
      "section": 5
    },
    {
      "name": "sftp",
      "section": 1
    },
    {
      "name": "ssh_config",
      "section": 5
    },
    {
      "name": "tun",
      "section": 4
    },
    {
      "name": "ssh_config",
      "section": 5
    },
    {
      "name": "ssh_config",
      "section": 5
    },
    {
      "name": "syslog",
      "section": 3
    },
    {
      "name": "ssh_config",
      "section": 5
    }
  ],
  "metadata": {
    "author": "ization database) can access the local X11 display"
  },
  "searchContent": "ssh ssh manual page ssh ssh client is a program for logging into a remote machine and for executing commands on a remote machine ssh -46aacfggkkmnnqsttvvxxyy -b bind interface -b bind address -c cipher spec -d bind address port -e log file -e escape char -f configfile -i pkcs11 -i identity file -j destination -l address -l login name -m mac spec -o ctl cmd -o option -p tag -p port -r address -s ctl path -w host port -w local tun remote tun destination command argument ssh -q query option ssh manual page ssh client program logging into remote machine executing commands machine -4 forces ssh to use ipv4 addresses only -6 forces ssh to use ipv6 addresses only -a enables forwarding of connections from an authentication agent such as ssh-agent 1 this can also be specified on a per-host basis in a configuration file agent forwarding should be enabled with caution users with the ability to bypass file permissions on the remote host for the agent s unix-domain socket can access the local agent through the forwarded connection an attacker cannot obtain key material from the agent however they can perform operations on the keys that enable them to authenticate using the identities loaded into the agent a safer alternative may be to use a jump host see -j connect to the target host by first making an ssh connection to the jump host described by destination and then establishing a tcp forwarding to the ultimate destination from there multiple jump hops may be specified separated by comma characters ipv6 addresses can be specified by enclosing the address in square brackets this is a shortcut to specify a proxyjump configuration directive note that configuration directives supplied on the command-line generally apply to the destination host and not any specified jump hosts use ssh config to specify configuration for jump hosts -a disables forwarding of the authentication agent connection -b bind to the address of bind interface before attempting to connect to the destination host this is only useful on systems with more than one address -b use bind address on the local machine as the source address of the connection only useful on systems with more than one address -c requests compression of all data including stdin stdout stderr and data for forwarded x11 tcp and unix-domain connections the compression algorithm is the same used by gzip 1 compression is desirable on modem lines and other slow connections but will only slow down things on fast networks the default value can be set on a host-by-host basis in the configuration files see the compression option in ssh config 5 -c selects the cipher specification for encrypting the session cipher spec is a comma-separated list of ciphers listed in order of preference see the ciphers keyword in ssh config 5 for more information -d specifies a local dynamic application-level port forwarding this works by allocating a socket to listen to port on the local side optionally bound to the specified bind address whenever a connection is made to this port the connection is forwarded over the secure channel and the application protocol is then used to determine where to connect to from the remote machine currently the socks4 and socks5 protocols are supported and ssh will act as a socks server only root can forward privileged ports dynamic port forwardings can also be specified in the configuration file ipv6 addresses can be specified by enclosing the address in square brackets only the superuser can forward privileged ports by default the local port is bound in accordance with the gatewayports setting however an explicit bind address may be used to bind the connection to a specific address the bind address of localhost indicates that the listening port be bound for local use only while an empty address or indicates that the port should be available from all interfaces -e append debug logs to log file instead of standard error -e sets the escape character for sessions with a pty default the escape character is only recognized at the beginning of a line the escape character followed by a dot closes the connection followed by control-z suspends the connection and followed by itself sends the escape character once setting the character to none disables any escapes and makes the session fully transparent -f specifies an alternative per-user configuration file if a configuration file is given on the command line the system-wide configuration file etc ssh ssh config will be ignored the default for the per-user configuration file is ssh config if set to none no configuration files will be read -f requests ssh to go to background just before command execution this is useful if ssh is going to ask for passwords or passphrases but the user wants it in the background this implies -n the recommended way to start x11 programs at a remote site is with something like ssh -f host xterm if the exitonforwardfailure configuration option is set to yes then a client started with -f will wait for all remote port forwards to be successfully established before placing itself in the background refer to the description of forkafterauthentication in ssh config 5 for details -g causes ssh to print its configuration after evaluating host and match blocks and exit -g allows remote hosts to connect to local forwarded ports if used on a multiplexed connection then this option must be specified on the master process -i specify the pkcs 11 shared library ssh should use to communicate with a pkcs 11 token providing keys for user authentication use of this option will disable usekeychain -i selects a file from which the identity private key for public key authentication is read you can also specify a public key file to use the corresponding private key that is loaded in ssh-agent 1 when the private key file is not present locally the default is ssh id rsa ssh id ecdsa ssh id ecdsa sk ssh id ed25519 and ssh id ed25519 sk identity files may also be specified on a per-host basis in the configuration file it is possible to have multiple -i options and multiple identities specified in configuration files if no certificates have been explicitly specified by the certificatefile directive ssh will also try to load certificate information from the filename obtained by appending -cert pub to identity filenames -j connect to the target host by first making an ssh connection to the jump host described by destination and then establishing a tcp forwarding to the ultimate destination from there multiple jump hops may be specified separated by comma characters ipv6 addresses can be specified by enclosing the address in square brackets this is a shortcut to specify a proxyjump configuration directive note that configuration directives supplied on the command-line generally apply to the destination host and not any specified jump hosts use ssh config to specify configuration for jump hosts -k enables gssapi-based authentication and forwarding delegation of gssapi credentials to the server -k disables forwarding delegation of gssapi credentials to the server -l specifies that connections to the given tcp port or unix socket on the local client host are to be forwarded to the given host and port or unix socket on the remote side this works by allocating a socket to listen to either a tcp port on the local side optionally bound to the specified bind address or to a unix socket whenever a connection is made to the local port or socket the connection is forwarded over the secure channel and a connection is made to either host port hostport or the unix socket remote socket from the remote machine port forwardings can also be specified in the configuration file only the superuser can forward privileged ports ipv6 addresses can be specified by enclosing the address in square brackets by default the local port is bound in accordance with the gatewayports setting however an explicit bind address may be used to bind the connection to a specific address the bind address of localhost indicates that the listening port be bound for local use only while an empty address or indicates that the port should be available from all interfaces -l specifies that connections to the given tcp port or unix socket on the local client host are to be forwarded to the given host and port or unix socket on the remote side this works by allocating a socket to listen to either a tcp port on the local side optionally bound to the specified bind address or to a unix socket whenever a connection is made to the local port or socket the connection is forwarded over the secure channel and a connection is made to either host port hostport or the unix socket remote socket from the remote machine port forwardings can also be specified in the configuration file only the superuser can forward privileged ports ipv6 addresses can be specified by enclosing the address in square brackets by default the local port is bound in accordance with the gatewayports setting however an explicit bind address may be used to bind the connection to a specific address the bind address of localhost indicates that the listening port be bound for local use only while an empty address or indicates that the port should be available from all interfaces -l specifies that connections to the given tcp port or unix socket on the local client host are to be forwarded to the given host and port or unix socket on the remote side this works by allocating a socket to listen to either a tcp port on the local side optionally bound to the specified bind address or to a unix socket whenever a connection is made to the local port or socket the connection is forwarded over the secure channel and a connection is made to either host port hostport or the unix socket remote socket from the remote machine port forwardings can also be specified in the configuration file only the superuser can forward privileged ports ipv6 addresses can be specified by enclosing the address in square brackets by default the local port is bound in accordance with the gatewayports setting however an explicit bind address may be used to bind the connection to a specific address the bind address of localhost indicates that the listening port be bound for local use only while an empty address or indicates that the port should be available from all interfaces -l specifies that connections to the given tcp port or unix socket on the local client host are to be forwarded to the given host and port or unix socket on the remote side this works by allocating a socket to listen to either a tcp port on the local side optionally bound to the specified bind address or to a unix socket whenever a connection is made to the local port or socket the connection is forwarded over the secure channel and a connection is made to either host port hostport or the unix socket remote socket from the remote machine port forwardings can also be specified in the configuration file only the superuser can forward privileged ports ipv6 addresses can be specified by enclosing the address in square brackets by default the local port is bound in accordance with the gatewayports setting however an explicit bind address may be used to bind the connection to a specific address the bind address of localhost indicates that the listening port be bound for local use only while an empty address or indicates that the port should be available from all interfaces -l specifies the user to log in as on the remote machine this also may be specified on a per-host basis in the configuration file -m places the ssh client into master mode for connection sharing multiple -m options places ssh into master mode but with confirmation required using ssh-askpass 1 before each operation that changes the multiplexing state e g opening a new session refer to the description of controlmaster in ssh config 5 for details -m a comma-separated list of mac message authentication code algorithms specified in order of preference see the macs keyword in ssh config 5 for more information -n do not execute a remote command this is useful for just forwarding ports refer to the description of sessiontype in ssh config 5 for details -n redirects stdin from dev null actually prevents reading from stdin this must be used when ssh is run in the background a common trick is to use this to run x11 programs on a remote machine for example ssh -n shadows cs hut fi emacs will start an emacs on shadows cs hut fi and the x11 connection will be automatically forwarded over an encrypted channel the ssh program will be put in the background this does not work if ssh needs to ask for a password or passphrase see also the -f option refer to the description of stdinnull in ssh config 5 for details -o control an active connection multiplexing master process when the -o option is specified the ctl cmd argument is interpreted and passed to the master process valid commands are check check that the master process is running forward request forwardings without command execution cancel cancel forwardings proxy connect to a running multiplexing master in proxy mode exit request the master to exit and stop request the master to stop accepting further multiplexing requests -o can be used to give options in the format used in the configuration file this is useful for specifying options for which there is no separate command-line flag for full details of the options listed below and their possible values see ssh config 5 addkeystoagent addressfamily batchmode bindaddress canonicaldomains canonicalizefallbacklocal canonicalizehostname canonicalizemaxdots canonicalizepermittedcnames casignaturealgorithms certificatefile checkhostip ciphers clearallforwardings compression connectionattempts connecttimeout controlmaster controlpath controlpersist dynamicforward enableescapecommandline escapechar exitonforwardfailure fingerprinthash forkafterauthentication forwardagent forwardx11 forwardx11timeout forwardx11trusted gatewayports globalknownhostsfile gssapiauthentication gssapidelegatecredentials hashknownhosts host hostbasedacceptedalgorithms hostbasedauthentication hostkeyalgorithms hostkeyalias hostname identitiesonly identityagent identityfile ipqos kbdinteractiveauthentication kbdinteractivedevices kexalgorithms knownhostscommand localcommand localforward loglevel macs match nohostauthenticationforlocalhost numberofpasswordprompts passwordauthentication permitlocalcommand permitremoteopen pkcs11provider port preferredauthentications proxycommand proxyjump proxyusefdpass pubkeyacceptedalgorithms pubkeyauthentication rekeylimit remotecommand remoteforward requesttty requiredrsasize sendenv serveraliveinterval serveralivecountmax sessiontype setenv stdinnull streamlocalbindmask streamlocalbindunlink stricthostkeychecking tcpkeepalive tunnel tunneldevice updatehostkeys usekeychain user userknownhostsfile verifyhostkeydns visualhostkey xauthlocation -p ssh config 5 refer to the tag and match keywords in ssh config 5 for more information -p port to connect to on the remote host this can be specified on a per-host basis in the configuration file -q queries for the algorithms supported by one of the following features cipher supported symmetric ciphers cipher-auth supported symmetric ciphers that support authenticated encryption help supported query terms for use with the -q flag mac supported message integrity codes kex key exchange algorithms key key types key-ca-sign valid ca signature algorithms for certificates key-cert certificate key types key-plain non-certificate key types key-sig all key types and signature algorithms protocol-version supported ssh protocol versions and sig supported signature algorithms alternatively any keyword from ssh config 5 or sshd config 5 that takes an algorithm list may be used as an alias for the corresponding query option -q quiet mode causes most warning and diagnostic messages to be suppressed -r specifies that connections to the given tcp port or unix socket on the remote server host are to be forwarded to the local side this works by allocating a socket to listen to either a tcp port or to a unix socket on the remote side whenever a connection is made to this port or unix socket the connection is forwarded over the secure channel and a connection is made from the local machine to either an explicit destination specified by host port hostport or local socket or if no explicit destination was specified ssh will act as a socks 4 5 proxy and forward connections to the destinations requested by the remote socks client port forwardings can also be specified in the configuration file privileged ports can be forwarded only when logging in as root on the remote machine ipv6 addresses can be specified by enclosing the address in square brackets by default tcp listening sockets on the server will be bound to the loopback interface only this may be overridden by specifying a bind address an empty bind address or the address indicates that the remote socket should listen on all interfaces specifying a remote bind address will only succeed if the server s gatewayports option is enabled see sshd config 5 if the port argument is 0 the listen port will be dynamically allocated on the server and reported to the client at run time when used together with -o forward the allocated port will be printed to the standard output -r specifies that connections to the given tcp port or unix socket on the remote server host are to be forwarded to the local side this works by allocating a socket to listen to either a tcp port or to a unix socket on the remote side whenever a connection is made to this port or unix socket the connection is forwarded over the secure channel and a connection is made from the local machine to either an explicit destination specified by host port hostport or local socket or if no explicit destination was specified ssh will act as a socks 4 5 proxy and forward connections to the destinations requested by the remote socks client port forwardings can also be specified in the configuration file privileged ports can be forwarded only when logging in as root on the remote machine ipv6 addresses can be specified by enclosing the address in square brackets by default tcp listening sockets on the server will be bound to the loopback interface only this may be overridden by specifying a bind address an empty bind address or the address indicates that the remote socket should listen on all interfaces specifying a remote bind address will only succeed if the server s gatewayports option is enabled see sshd config 5 if the port argument is 0 the listen port will be dynamically allocated on the server and reported to the client at run time when used together with -o forward the allocated port will be printed to the standard output -r specifies that connections to the given tcp port or unix socket on the remote server host are to be forwarded to the local side this works by allocating a socket to listen to either a tcp port or to a unix socket on the remote side whenever a connection is made to this port or unix socket the connection is forwarded over the secure channel and a connection is made from the local machine to either an explicit destination specified by host port hostport or local socket or if no explicit destination was specified ssh will act as a socks 4 5 proxy and forward connections to the destinations requested by the remote socks client port forwardings can also be specified in the configuration file privileged ports can be forwarded only when logging in as root on the remote machine ipv6 addresses can be specified by enclosing the address in square brackets by default tcp listening sockets on the server will be bound to the loopback interface only this may be overridden by specifying a bind address an empty bind address or the address indicates that the remote socket should listen on all interfaces specifying a remote bind address will only succeed if the server s gatewayports option is enabled see sshd config 5 if the port argument is 0 the listen port will be dynamically allocated on the server and reported to the client at run time when used together with -o forward the allocated port will be printed to the standard output -r specifies that connections to the given tcp port or unix socket on the remote server host are to be forwarded to the local side this works by allocating a socket to listen to either a tcp port or to a unix socket on the remote side whenever a connection is made to this port or unix socket the connection is forwarded over the secure channel and a connection is made from the local machine to either an explicit destination specified by host port hostport or local socket or if no explicit destination was specified ssh will act as a socks 4 5 proxy and forward connections to the destinations requested by the remote socks client port forwardings can also be specified in the configuration file privileged ports can be forwarded only when logging in as root on the remote machine ipv6 addresses can be specified by enclosing the address in square brackets by default tcp listening sockets on the server will be bound to the loopback interface only this may be overridden by specifying a bind address an empty bind address or the address indicates that the remote socket should listen on all interfaces specifying a remote bind address will only succeed if the server s gatewayports option is enabled see sshd config 5 if the port argument is 0 the listen port will be dynamically allocated on the server and reported to the client at run time when used together with -o forward the allocated port will be printed to the standard output -r specifies that connections to the given tcp port or unix socket on the remote server host are to be forwarded to the local side this works by allocating a socket to listen to either a tcp port or to a unix socket on the remote side whenever a connection is made to this port or unix socket the connection is forwarded over the secure channel and a connection is made from the local machine to either an explicit destination specified by host port hostport or local socket or if no explicit destination was specified ssh will act as a socks 4 5 proxy and forward connections to the destinations requested by the remote socks client port forwardings can also be specified in the configuration file privileged ports can be forwarded only when logging in as root on the remote machine ipv6 addresses can be specified by enclosing the address in square brackets by default tcp listening sockets on the server will be bound to the loopback interface only this may be overridden by specifying a bind address an empty bind address or the address indicates that the remote socket should listen on all interfaces specifying a remote bind address will only succeed if the server s gatewayports option is enabled see sshd config 5 if the port argument is 0 the listen port will be dynamically allocated on the server and reported to the client at run time when used together with -o forward the allocated port will be printed to the standard output -s specifies the location of a control socket for connection sharing or the string none to disable connection sharing refer to the description of controlpath and controlmaster in ssh config 5 for details -s may be used to request invocation of a subsystem on the remote system subsystems facilitate the use of ssh as a secure transport for other applications e g sftp 1 the subsystem is specified as the remote command refer to the description of sessiontype in ssh config 5 for details -t disable pseudo-terminal allocation -t force pseudo-terminal allocation this can be used to execute arbitrary screen-based programs on a remote machine which can be very useful e g when implementing menu services multiple -t options force tty allocation even if ssh has no local tty -v display the version number and exit -v verbose mode causes ssh to print debugging messages about its progress this is helpful in debugging connection authentication and configuration problems multiple -v options increase the verbosity the maximum is 3 -w requests that standard input and output on the client be forwarded to host on port over the secure channel implies -n -t exitonforwardfailure and clearallforwardings though these can be overridden in the configuration file or using -o command line options -w requests tunnel device forwarding with the specified tun 4 devices between the client local tun and the server remote tun the devices may be specified by numerical id or the keyword any which uses the next available tunnel device if remote tun is not specified it defaults to any see also the tunnel and tunneldevice directives in ssh config 5 if the tunnel directive is unset it will be set to the default tunnel mode which is point-to-point if a different tunnel forwarding mode it desired then it should be specified before -w requests tunnel device forwarding with the specified tun 4 devices between the client local tun and the server remote tun the devices may be specified by numerical id or the keyword any which uses the next available tunnel device if remote tun is not specified it defaults to any see also the tunnel and tunneldevice directives in ssh config 5 if the tunnel directive is unset it will be set to the default tunnel mode which is point-to-point if a different tunnel forwarding mode it desired then it should be specified before -x enables x11 forwarding this can also be specified on a per-host basis in a configuration file x11 forwarding should be enabled with caution users with the ability to bypass file permissions on the remote host for the user s x authorization database can access the local x11 display through the forwarded connection an attacker may then be able to perform activities such as keystroke monitoring for this reason x11 forwarding is subjected to x11 security extension restrictions by default refer to the ssh -y option and the forwardx11trusted directive in ssh config 5 for more information -x disables x11 forwarding -y enables trusted x11 forwarding trusted x11 forwardings are not subjected to the x11 security extension controls -y send log information using the syslog 3 system module by default this information is sent to stderr ssh may additionally obtain configuration data from a per-user configuration file and a system-wide configuration file the file format and configuration options are described in ssh config 5 ssh -f -l 6667 localhost 6667 server example com sleep 10 irc -c users pinky irc 127 0 0 1 ssh-keygen -l -f etc ssh ssh host rsa key ssh-keygen -lv -f ssh known hosts ssh-keygen -r host example com dig -t sshfp host example com ssh -o verifyhostkeydns ask host example com name macos 15 5 july 18 2024 macos 15 5",
  "keywords": [
    "ssh",
    "manual",
    "page",
    "(ssh",
    "client)",
    "program",
    "logging",
    "into",
    "remote",
    "machine",
    "executing",
    "commands",
    "machine."
  ],
  "complexity": "intermediate",
  "hash": "2782371745211430",
  "parsedAt": "2025-06-17T19:32:06.486Z",
  "parseVersion": "2.0.0",
  "isCommon": true,
  "hasInteractiveExamples": true,
  "hasDiagrams": false
}