{
  "name": "tr",
  "section": 1,
  "title": "tr manual page",
  "description": "The tr utility copies the standard input to the standard output with substitution or deletion of selected characters.",
  "synopsis": "tr [-Ccsu] string1 string2 tr [-Ccu] -d string1 tr [-Ccu] -s string1 tr [-Ccu] -ds string1 string2",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "by #.  This expression is only valid when it occurs in\n\t\tstring2.  If n is omitted or is zero, it is be interpreted as\n\t\tlarge enough to extend string2 sequence to the length of\n\t\tstring1.  If n has a leading zero, it is interpreted as an\n\t\toctal value, otherwise, it is interpreted as a decimal value.",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     tr – translate characters\n",
        "     tr [-Ccsu] string1 string2\n     tr [-Ccu] -d string1\n     tr [-Ccu] -s string1\n     tr [-Ccu] -ds string1 string2\n",
        "     The tr utility copies the standard input to the standard output with\n     substitution or deletion of selected characters.\n\n     The following options are available:\n\n     -C      Complement the set of characters in string1, that is “-C ab”\n\t     includes every character except for ‘a’ and ‘b’.\n\n     -c      Same as -C but complement the set of values in string1.\n\n     -d      Delete characters in string1 from the input.\n\n     -s      Squeeze multiple occurrences of the characters listed in the last\n\t     operand (either string1 or string2) in the input into a single\n\t     instance of the character.  This occurs after all deletion and\n\t     translation is completed.\n\n     -u      Guarantee that any output is unbuffered.\n\n     In the first synopsis form, the characters in string1 are translated into\n     the characters in string2 where the first character in string1 is\n     translated into the first character in string2 and so on.\tIf string1 is\n     longer than string2, the last character found in string2 is duplicated\n     until string1 is exhausted.\n\n     In the second synopsis form, the characters in string1 are deleted from\n     the input.\n\n     In the third synopsis form, the characters in string1 are compressed as\n     described for the -s option.\n\n     In the fourth synopsis form, the characters in string1 are deleted from\n     the input, and the characters in string2 are compressed as described for\n     the -s option.\n\n     The following conventions can be used in string1 and string2 to specify\n     sets of characters:\n\n     character\tAny character not described by one of the following",
        "     \\octal\tA backslash followed by 1, 2 or 3 octal digits represents a",
        "     \\character",
        "     c-c\tFor non-octal range endpoints represents the range of",
        "     [:class:]\tRepresents all characters belonging to the defined character",
        "     [=equiv=]\tRepresents all characters belonging to the same equivalence",
        "     [#*n]\tRepresents n repeated occurrences of the character represented"
      ]
    },
    {
      "id": "environment",
      "title": "ENVIRONMENT",
      "content": "macOS 15.5\t\t       October 13, 2006 \t\t    macOS 15.5",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     The LANG, LC_ALL, LC_CTYPE and LC_COLLATE environment variables affect\n     the execution of tr as described in environ(7).\n",
        "     The tr utility exits 0 on success, and >0 if an error occurs.\n",
        "     The following examples are shown as given to the shell:\n\n     Create a list of the words in file1, one per line, where a word is taken\n     to be a maximal string of letters.\n\n\t   tr -cs \"[:alpha:]\" \"\\n\" < file1\n\n     Translate the contents of file1 to upper-case.\n\n\t   tr \"[:lower:]\" \"[:upper:]\" < file1\n\n     (This should be preferred over the traditional UNIX idiom of “tr a-z\n     A-Z”, since it works correctly in all locales.)\n\n     Strip out non-printable characters from file1.\n\n\t   tr -cd \"[:print:]\" < file1\n\n     Remove diacritical marks from all accented variants of the letter ‘e’:\n\n\t   tr \"[=e=]\" \"e\"\n",
        "     Previous FreeBSD implementations of tr did not order characters in range\n     expressions according to the current locale's collation order, making it\n     possible to convert unaccented Latin characters (esp. as found in English\n     text) from upper to lower case using the traditional UNIX idiom of “tr\n     A-Z a-z”.\tSince tr now obeys the locale's collation order, this idiom\n     may not produce correct results when there is not a 1:1 mapping between\n     lower and upper case, or when the order of characters within the two\n     cases differs.  As noted in the EXAMPLES section above, the character\n     class expressions “[:lower:]” and “[:upper:]” should be used instead of\n     explicit character ranges like “a-z” and “A-Z”.\n\n     “[=equiv=]” expression and collation for ranges are implemented for\n     single byte locales only.\n\n     System V has historically implemented character ranges using the syntax\n     “[c-c]” instead of the “c-c” used by historic BSD implementations and\n     standardized by POSIX.  System V shell scripts should work under this\n     implementation as long as the range is intended to map in another range,\n     i.e., the command “tr [a-z] [A-Z]” will work as it will map the ‘[’\n     character in string1 to the ‘[’ character in string2.  However, if the\n     shell script is deleting or squeezing characters as in the command “tr -d\n     [a-z]”, the characters ‘[’ and ‘]’ will be included in the deletion or\n     compression list which would not have happened under a historic System V\n     implementation.  Additionally, any scripts that depended on the sequence\n     “a-z” to represent the three characters ‘a’, ‘-’ and ‘z’ will have to be\n     rewritten as “a\\-z”.\n\n     The tr utility has historically not permitted the manipulation of NUL\n     bytes in its input and, additionally, stripped NUL's from its input\n     stream.  This implementation has removed this behavior as a bug.\n\n     The tr utility has historically been extremely forgiving of syntax\n     errors, for example, the -c and -s options were ignored unless two\n     strings were specified.  This implementation will not permit illegal\n     syntax.\n",
        "     The tr utility conforms to IEEE Std 1003.1-2001 (“POSIX.1”).  The\n     “ideogram”, “phonogram”, “rune”, and “special” character classes are\n     extensions.\n\n     It should be noted that the feature wherein the last character of string2\n     is duplicated if string2 has less characters than string1 is permitted by\n     POSIX but is not required.  Shell scripts attempting to be portable to\n     other POSIX systems should use the “[#*]” convention instead of relying\n     on this behavior.\tThe -u option is an extension to the IEEE Std\n     1003.1-2001 (“POSIX.1”) standard.\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "-C",
      "description": "Complement the set of characters in string1, that is “-C ab” includes every character except for ‘a’ and ‘b’."
    },
    {
      "flag": "-c",
      "description": "Same as -C but complement the set of values in string1."
    },
    {
      "flag": "-d",
      "description": "",
      "optional": false
    },
    {
      "flag": "-s",
      "description": " operand (either string1 or string2) in the input into a single instance of the character.  This occurs after all deletion and translation is completed.",
      "optional": false
    },
    {
      "flag": "-u",
      "description": "Guarantee that any output is unbuffered. In the first synopsis form, the characters in string1 are translated into the characters in string2 where the first character in string1 is translated into the first character in string2 and so on.\tIf string1 is longer than string2, the last character found in string2 is duplicated until string1 is exhausted. In the second synopsis form, the characters in string1 are deleted from the input. In the third synopsis form, the characters in string1 are compressed as described for the -s option. In the fourth synopsis form, the characters in string1 are deleted from the input, and the characters in string2 are compressed as described for the -s option. The following conventions can be used in string1 and string2 to specify sets of characters: character\tAny character not described by one of the following conventions represents itself. \\octal\tA backslash followed by 1, 2 or 3 octal digits represents a character with that encoded value.  To follow an octal sequence with a digit as a character, left zero-pad the octal sequence to the full 3 octal digits. \\character A backslash followed by certain special characters maps to special values. \\a    <alert character> \\b    <backspace> \\f    <form-feed> \\n    <newline> \\r    <carriage return> \\t    <tab> \\v    <vertical tab> A backslash followed by any other character maps to that character. c-c\tFor non-octal range endpoints represents the range of characters between the range endpoints, inclusive, in ascending order, as defined by the collation sequence.\tIf either or both of the range endpoints are octal sequences, it represents the range of specific coded values between the range endpoints, inclusive. See the COMPATIBILITY section below for an important note regarding differences in the way the current implementation interprets range expressions differently from previous implementations. [:class:]\tRepresents all characters belonging to the defined character class.\tClass names are: alnum\t     <alphanumeric characters> alpha\t     <alphabetic characters> blank\t     <whitespace characters> cntrl\t     <control characters> digit\t     <numeric characters> graph\t     <graphic characters> ideogram     <ideographic characters> lower\t     <lower-case alphabetic characters> phonogram    <phonographic characters> print\t     <printable characters> punct\t     <punctuation characters> rune\t     <valid characters> space\t     <space characters> special      <special characters> upper\t     <upper-case characters> xdigit\t     <hexadecimal characters> When “[:lower:]” appears in string1 and “[:upper:]” appears in the same relative position in string2, it represents the characters pairs from the toupper mapping in the LC_CTYPE category of the current locale.  When “[:upper:]” appears in string1 and “[:lower:]” appears in the same relative position in string2, it represents the characters pairs from the tolower mapping in the LC_CTYPE category of the current locale. With the exception of case conversion, characters in the classes are in unspecified order. For specific information as to which ASCII characters are included in these classes, see ctype(3) and related manual pages. [=equiv=]\tRepresents all characters belonging to the same equivalence class as equiv, ordered by their encoded values. [#*n]\tRepresents n repeated occurrences of the character represented by #.  This expression is only valid when it occurs in string2.  If n is omitted or is zero, it is be interpreted as large enough to extend string2 sequence to the length of string1.  If n has a leading zero, it is interpreted as an octal value, otherwise, it is interpreted as a decimal value."
    }
  ],
  "examples": [],
  "relatedCommands": [
    "translate",
    "characters",
    "string1",
    "string2",
    "utility",
    "copies",
    "standard",
    "input",
    "output",
    "substitution",
    "deletion",
    "selected",
    "following",
    "options",
    "available"
  ],
  "seeAlso": [],
  "metadata": {},
  "searchContent": "tr tr manual page the tr utility copies the standard input to the standard output with substitution or deletion of selected characters tr -ccsu string1 string2 tr -ccu -d string1 tr -ccu -s string1 tr -ccu -ds string1 string2 tr manual page utility copies standard input output substitution deletion selected characters -c complement the set of characters in string1 that is -c ab includes every character except for a and b -c same as -c but complement the set of values in string1 -d -s operand either string1 or string2 in the input into a single instance of the character this occurs after all deletion and translation is completed -u guarantee that any output is unbuffered in the first synopsis form the characters in string1 are translated into the characters in string2 where the first character in string1 is translated into the first character in string2 and so on if string1 is longer than string2 the last character found in string2 is duplicated until string1 is exhausted in the second synopsis form the characters in string1 are deleted from the input in the third synopsis form the characters in string1 are compressed as described for the -s option in the fourth synopsis form the characters in string1 are deleted from the input and the characters in string2 are compressed as described for the -s option the following conventions can be used in string1 and string2 to specify sets of characters character any character not described by one of the following conventions represents itself octal a backslash followed by 1 2 or 3 octal digits represents a character with that encoded value to follow an octal sequence with a digit as a character left zero-pad the octal sequence to the full 3 octal digits character a backslash followed by certain special characters maps to special values a alert character b backspace f form-feed n newline r carriage return t tab v vertical tab a backslash followed by any other character maps to that character c-c for non-octal range endpoints represents the range of characters between the range endpoints inclusive in ascending order as defined by the collation sequence if either or both of the range endpoints are octal sequences it represents the range of specific coded values between the range endpoints inclusive see the compatibility section below for an important note regarding differences in the way the current implementation interprets range expressions differently from previous implementations class represents all characters belonging to the defined character class class names are alnum alphanumeric characters alpha alphabetic characters blank whitespace characters cntrl control characters digit numeric characters graph graphic characters ideogram ideographic characters lower lower-case alphabetic characters phonogram phonographic characters print printable characters punct punctuation characters rune valid characters space space characters special special characters upper upper-case characters xdigit hexadecimal characters when lower appears in string1 and upper appears in the same relative position in string2 it represents the characters pairs from the toupper mapping in the lc ctype category of the current locale when upper appears in string1 and lower appears in the same relative position in string2 it represents the characters pairs from the tolower mapping in the lc ctype category of the current locale with the exception of case conversion characters in the classes are in unspecified order for specific information as to which ascii characters are included in these classes see ctype 3 and related manual pages equiv represents all characters belonging to the same equivalence class as equiv ordered by their encoded values n represents n repeated occurrences of the character represented by this expression is only valid when it occurs in string2 if n is omitted or is zero it is be interpreted as large enough to extend string2 sequence to the length of string1 if n has a leading zero it is interpreted as an octal value otherwise it is interpreted as a decimal value name by this expression is only valid when it occurs in string2 if n is omitted or is zero it is be interpreted as large enough to extend string2 sequence to the length of string1 if n has a environment macos 15 5 october 13 2006 macos 15 5",
  "keywords": [
    "tr",
    "manual",
    "page",
    "utility",
    "copies",
    "standard",
    "input",
    "output",
    "substitution",
    "deletion",
    "selected",
    "characters."
  ],
  "complexity": "intermediate",
  "hash": "27747fb97bcfb7ea",
  "parsedAt": "2025-06-17T19:32:25.592Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": false,
  "hasDiagrams": false
}