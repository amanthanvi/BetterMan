{
  "name": "git",
  "section": 1,
  "title": "the stupid content tracker",
  "description": "Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals.",
  "synopsis": "git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>] [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path] [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare] [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>] [--super-prefix=<path>] [--config-env=<name>=<envvar>] <command> [<args>]",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "Git 2.39.0\t\t\t  12/12/2022\t\t\t\tGIT(1)",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "       git - the stupid content tracker\n",
        "       git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]\n\t   [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n\t   [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]\n\t   [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n\t   [--super-prefix=<path>] [--config-env=<name>=<envvar>]\n\t   <command> [<args>]\n\n",
        "       Git is a fast, scalable, distributed revision control system with an\n       unusually rich command set that provides both high-level operations and\n       full access to internals.\n\n       See gittutorial(7) to get started, then see giteveryday(7) for a useful\n       minimum set of commands. The Git User’s Manual[1] has a more in-depth\n       introduction.\n\n       After you mastered the basic concepts, you can come back to this page\n       to learn what commands Git offers. You can learn more about individual\n       Git commands with \"git help command\". gitcli(7) manual page gives you\n       an overview of the command-line command syntax.\n\n       A formatted and hyperlinked copy of the latest Git documentation can be\n       viewed at https://git.github.io/htmldocs/git.html or\n       https://git-scm.com/docs.\n",
        "       -v, --version\n\t   Prints the Git suite version that the git program came from.\n\n\t   This option is internally converted to git version ... and accepts\n\t   the same options as the git-version(1) command. If --help is also\n\t   given, it takes precedence over --version.\n\n       -h, --help\n\t   Prints the synopsis and a list of the most commonly used commands.\n\t   If the option --all or -a is given then all available commands are\n\t   printed. If a Git command is named this option will bring up the\n\t   manual page for that command.\n\n\t   Other options are available to control how the manual page is\n\t   displayed. See git-help(1) for more information, because git --help\n\t   ... is converted internally into git help ....\n\n       -C <path>\n\t   Run as if git was started in <path> instead of the current working\n\t   directory. When multiple -C options are given, each subsequent\n\t   non-absolute -C <path> is interpreted relative to the preceding -C\n\t   <path>. If <path> is present but empty, e.g.  -C \"\", then the\n\t   current working directory is left unchanged.\n\n\t   This option affects options that expect path name like --git-dir\n\t   and --work-tree in that their interpretations of the path names\n\t   would be made relative to the working directory caused by the -C\n\t   option. For example the following invocations are equivalent:\n\n\t       git --git-dir=a.git --work-tree=b -C c status\n\t       git --git-dir=c/a.git --work-tree=c/b status\n\n       -c <name>=<value>\n\t   Pass a configuration parameter to the command. The value given will\n\t   override values from configuration files. The <name> is expected in\n\t   the same format as listed by git config (subkeys separated by\n\t   dots).\n\n\t   Note that omitting the = in git -c foo.bar ... is allowed and sets\n\t   foo.bar to the boolean true value (just like [foo]bar would in a\n\t   config file). Including the equals but with an empty value (like\n\t   git -c foo.bar= ...) sets foo.bar to the empty string which git\n\t   config --type=bool will convert to false.\n\n       --config-env=<name>=<envvar>\n\t   Like -c <name>=<value>, give configuration variable <name> a value,\n\t   where <envvar> is the name of an environment variable from which to\n\t   retrieve the value. Unlike -c there is no shortcut for directly\n\t   setting the value to an empty string, instead the environment\n\t   variable itself must be set to the empty string. It is an error if\n\t   the <envvar> does not exist in the environment.  <envvar> may not\n\t   contain an equals sign to avoid ambiguity with <name> containing\n\t   one.\n\n\t   This is useful for cases where you want to pass transitory\n\t   configuration options to git, but are doing so on OS’s where other\n\t   processes might be able to read your cmdline (e.g.\n\t   /proc/self/cmdline), but not your environ (e.g.\n\t   /proc/self/environ). That behavior is the default on Linux, but may\n\t   not be on your system.\n\n\t   Note that this might add security for variables such as\n\t   http.extraHeader where the sensitive information is part of the\n\t   value, but not e.g.\turl.<base>.insteadOf where the sensitive\n\t   information can be part of the key.\n\n       --exec-path[=<path>]\n\t   Path to wherever your core Git programs are installed. This can\n\t   also be controlled by setting the GIT_EXEC_PATH environment\n\t   variable. If no path is given, git will print the current setting\n\t   and then exit.\n\n       --html-path\n\t   Print the path, without trailing slash, where Git’s HTML\n\t   documentation is installed and exit.\n\n       --man-path\n\t   Print the manpath (see man(1)) for the man pages for this version\n\t   of Git and exit.\n\n       --info-path\n\t   Print the path where the Info files documenting this version of Git\n\t   are installed and exit.\n\n       -p, --paginate\n\t   Pipe all output into less (or if set, $PAGER) if standard output is\n\t   a terminal. This overrides the pager.<cmd> configuration options\n\t   (see the \"Configuration Mechanism\" section below).\n\n       -P, --no-pager\n\t   Do not pipe Git output into a pager.\n\n       --git-dir=<path>\n\t   Set the path to the repository (\".git\" directory). This can also be\n\t   controlled by setting the GIT_DIR environment variable. It can be\n\t   an absolute path or relative path to current working directory.\n\n\t   Specifying the location of the \".git\" directory using this option\n\t   (or GIT_DIR environment variable) turns off the repository\n\t   discovery that tries to find a directory with \".git\" subdirectory\n\t   (which is how the repository and the top-level of the working tree\n\t   are discovered), and tells Git that you are at the top level of the\n\t   working tree. If you are not at the top-level directory of the\n\t   working tree, you should tell Git where the top-level of the\n\t   working tree is, with the --work-tree=<path> option (or\n\t   GIT_WORK_TREE environment variable)\n\n\t   If you just want to run git as if it was started in <path> then use\n\t   git -C <path>.\n\n       --work-tree=<path>\n\t   Set the path to the working tree. It can be an absolute path or a\n\t   path relative to the current working directory. This can also be\n\t   controlled by setting the GIT_WORK_TREE environment variable and\n\t   the core.worktree configuration variable (see core.worktree in git-\n\t   config(1) for a more detailed discussion).\n\n       --namespace=<path>\n\t   Set the Git namespace. See gitnamespaces(7) for more details.\n\t   Equivalent to setting the GIT_NAMESPACE environment variable.\n\n       --super-prefix=<path>\n\t   Currently for internal use only. Set a prefix which gives a path\n\t   from above a repository down to its root. One use is to give\n\t   submodules context about the superproject that invoked it.\n\n       --bare\n\t   Treat the repository as a bare repository. If GIT_DIR environment\n\t   is not set, it is set to the current working directory.\n\n       --no-replace-objects\n\t   Do not use replacement refs to replace Git objects. See git-\n\t   replace(1) for more information.\n\n       --literal-pathspecs\n\t   Treat pathspecs literally (i.e. no globbing, no pathspec magic).\n\t   This is equivalent to setting the GIT_LITERAL_PATHSPECS environment\n\t   variable to 1.\n\n       --glob-pathspecs\n\t   Add \"glob\" magic to all pathspec. This is equivalent to setting the\n\t   GIT_GLOB_PATHSPECS environment variable to 1. Disabling globbing on\n\t   individual pathspecs can be done using pathspec magic \":(literal)\"\n\n       --noglob-pathspecs\n\t   Add \"literal\" magic to all pathspec. This is equivalent to setting\n\t   the GIT_NOGLOB_PATHSPECS environment variable to 1. Enabling\n\t   globbing on individual pathspecs can be done using pathspec magic\n\t   \":(glob)\"\n\n       --icase-pathspecs\n\t   Add \"icase\" magic to all pathspec. This is equivalent to setting\n\t   the GIT_ICASE_PATHSPECS environment variable to 1.\n\n       --no-optional-locks\n\t   Do not perform optional operations that require locks. This is\n\t   equivalent to setting the GIT_OPTIONAL_LOCKS to 0.\n\n       --list-cmds=group[,group...]\n\t   List commands by group. This is an internal/experimental option and\n\t   may change or be removed in the future. Supported groups are:\n\t   builtins, parseopt (builtin commands that use parse-options), main\n\t   (all commands in libexec directory), others (all other commands in\n\t   $PATH that have git- prefix), list-<category> (see categories in\n\t   command-list.txt), nohelpers (exclude helper commands), alias and\n\t   config (retrieve command list from config variable\n\t   completion.commands)\n",
        "       We divide Git into high level (\"porcelain\") commands and low level\n       (\"plumbing\") commands.\n",
        "       We separate the porcelain commands into the main commands and some\n       ancillary user utilities.\n",
        "       git-add(1)\n\t   Add file contents to the index.\n\n       git-am(1)\n\t   Apply a series of patches from a mailbox.\n\n       git-archive(1)\n\t   Create an archive of files from a named tree.\n\n       git-bisect(1)\n\t   Use binary search to find the commit that introduced a bug.\n\n       git-branch(1)\n\t   List, create, or delete branches.\n\n       git-bundle(1)\n\t   Move objects and refs by archive.\n\n       git-checkout(1)\n\t   Switch branches or restore working tree files.\n\n       git-cherry-pick(1)\n\t   Apply the changes introduced by some existing commits.\n\n       git-citool(1)\n\t   Graphical alternative to git-commit.\n\n       git-clean(1)\n\t   Remove untracked files from the working tree.\n\n       git-clone(1)\n\t   Clone a repository into a new directory.\n\n       git-commit(1)\n\t   Record changes to the repository.\n\n       git-describe(1)\n\t   Give an object a human readable name based on an available ref.\n\n       git-diff(1)\n\t   Show changes between commits, commit and working tree, etc.\n\n       git-fetch(1)\n\t   Download objects and refs from another repository.\n\n       git-format-patch(1)\n\t   Prepare patches for e-mail submission.\n\n       git-gc(1)\n\t   Cleanup unnecessary files and optimize the local repository.\n\n       git-grep(1)\n\t   Print lines matching a pattern.\n\n       git-gui(1)\n\t   A portable graphical interface to Git.\n\n       git-init(1)\n\t   Create an empty Git repository or reinitialize an existing one.\n\n       git-log(1)\n\t   Show commit logs.\n\n       git-maintenance(1)\n\t   Run tasks to optimize Git repository data.\n\n       git-merge(1)\n\t   Join two or more development histories together.\n\n       git-mv(1)\n\t   Move or rename a file, a directory, or a symlink.\n\n       git-notes(1)\n\t   Add or inspect object notes.\n\n       git-pull(1)\n\t   Fetch from and integrate with another repository or a local branch.\n\n       git-push(1)\n\t   Update remote refs along with associated objects.\n\n       git-range-diff(1)\n\t   Compare two commit ranges (e.g. two versions of a branch).\n\n       git-rebase(1)\n\t   Reapply commits on top of another base tip.\n\n       git-reset(1)\n\t   Reset current HEAD to the specified state.\n\n       git-restore(1)\n\t   Restore working tree files.\n\n       git-revert(1)\n\t   Revert some existing commits.\n\n       git-rm(1)\n\t   Remove files from the working tree and from the index.\n\n       git-shortlog(1)\n\t   Summarize git log output.\n\n       git-show(1)\n\t   Show various types of objects.\n\n       git-sparse-checkout(1)\n\t   Reduce your working tree to a subset of tracked files.\n\n       git-stash(1)\n\t   Stash the changes in a dirty working directory away.\n\n       git-status(1)\n\t   Show the working tree status.\n\n       git-submodule(1)\n\t   Initialize, update or inspect submodules.\n\n       git-switch(1)\n\t   Switch branches.\n\n       git-tag(1)\n\t   Create, list, delete or verify a tag object signed with GPG.\n\n       git-worktree(1)\n\t   Manage multiple working trees.\n\n       gitk(1)\n\t   The Git repository browser.\n\n       scalar(1)\n\t   A tool for managing large Git repositories.\n",
        "       Manipulators:\n\n       git-config(1)\n\t   Get and set repository or global options.\n\n       git-fast-export(1)\n\t   Git data exporter.\n\n       git-fast-import(1)\n\t   Backend for fast Git data importers.\n\n       git-filter-branch(1)\n\t   Rewrite branches.\n\n       git-mergetool(1)\n\t   Run merge conflict resolution tools to resolve merge conflicts.\n\n       git-pack-refs(1)\n\t   Pack heads and tags for efficient repository access.\n\n       git-prune(1)\n\t   Prune all unreachable objects from the object database.\n\n       git-reflog(1)\n\t   Manage reflog information.\n\n       git-remote(1)\n\t   Manage set of tracked repositories.\n\n       git-repack(1)\n\t   Pack unpacked objects in a repository.\n\n       git-replace(1)\n\t   Create, list, delete refs to replace objects.\n\n       Interrogators:\n\n       git-annotate(1)\n\t   Annotate file lines with commit information.\n\n       git-blame(1)\n\t   Show what revision and author last modified each line of a file.\n\n       git-bugreport(1)\n\t   Collect information for user to file a bug report.\n\n       git-count-objects(1)\n\t   Count unpacked number of objects and their disk consumption.\n\n       git-diagnose(1)\n\t   Generate a zip archive of diagnostic information.\n\n       git-difftool(1)\n\t   Show changes using common diff tools.\n\n       git-fsck(1)\n\t   Verifies the connectivity and validity of the objects in the\n\t   database.\n\n       git-help(1)\n\t   Display help information about Git.\n\n       git-instaweb(1)\n\t   Instantly browse your working repository in gitweb.\n\n       git-merge-tree(1)\n\t   Perform merge without touching index or working tree.\n\n       git-rerere(1)\n\t   Reuse recorded resolution of conflicted merges.\n\n       git-show-branch(1)\n\t   Show branches and their commits.\n\n       git-verify-commit(1)\n\t   Check the GPG signature of commits.\n\n       git-verify-tag(1)\n\t   Check the GPG signature of tags.\n\n       git-version(1)\n\t   Display version information about Git.\n\n       git-whatchanged(1)\n\t   Show logs with difference each commit introduces.\n\n       gitweb(1)\n\t   Git web interface (web frontend to Git repositories).\n",
        "       These commands are to interact with foreign SCM and with other people\n       via patch over e-mail.\n\n       git-archimport(1)\n\t   Import a GNU Arch repository into Git.\n\n       git-cvsexportcommit(1)\n\t   Export a single commit to a CVS checkout.\n\n       git-cvsimport(1)\n\t   Salvage your data out of another SCM people love to hate.\n\n       git-cvsserver(1)\n\t   A CVS server emulator for Git.\n\n       git-imap-send(1)\n\t   Send a collection of patches from stdin to an IMAP folder.\n\n       git-p4(1)\n\t   Import from and submit to Perforce repositories.\n\n       git-quiltimport(1)\n\t   Applies a quilt patchset onto the current branch.\n\n       git-request-pull(1)\n\t   Generates a summary of pending changes.\n\n       git-send-email(1)\n\t   Send a collection of patches as emails.\n\n       git-svn(1)\n\t   Bidirectional operation between a Subversion repository and Git.\n",
        "       There are three commands with similar names: git reset, git restore and\n       git revert.\n\n       •   git-revert(1) is about making a new commit that reverts the changes\n\t   made by other commits.\n\n       •   git-restore(1) is about restoring files in the working tree from\n\t   either the index or another commit. This command does not update\n\t   your branch. The command can also be used to restore files in the\n\t   index from another commit.\n\n       •   git-reset(1) is about updating your branch, moving the tip in order\n\t   to add or remove commits from the branch. This operation changes\n\t   the commit history.\n\n\t   git reset can also be used to restore the index, overlapping with\n\t   git restore.\n",
        "       Although Git includes its own porcelain layer, its low-level commands\n       are sufficient to support development of alternative porcelains.\n       Developers of such porcelains might start by reading about git-update-\n       index(1) and git-read-tree(1).\n\n       The interface (input, output, set of options and the semantics) to\n       these low-level commands are meant to be a lot more stable than\n       Porcelain level commands, because these commands are primarily for\n       scripted use. The interface to Porcelain commands on the other hand are\n       subject to change in order to improve the end user experience.\n\n       The following description divides the low-level commands into commands\n       that manipulate objects (in the repository, index, and working tree),\n       commands that interrogate and compare objects, and commands that move\n       objects and references between repositories.\n",
        "       git-apply(1)\n\t   Apply a patch to files and/or to the index.\n\n       git-checkout-index(1)\n\t   Copy files from the index to the working tree.\n\n       git-commit-graph(1)\n\t   Write and verify Git commit-graph files.\n\n       git-commit-tree(1)\n\t   Create a new commit object.\n\n       git-hash-object(1)\n\t   Compute object ID and optionally creates a blob from a file.\n\n       git-index-pack(1)\n\t   Build pack index file for an existing packed archive.\n\n       git-merge-file(1)\n\t   Run a three-way file merge.\n\n       git-merge-index(1)\n\t   Run a merge for files needing merging.\n\n       git-mktag(1)\n\t   Creates a tag object with extra validation.\n\n       git-mktree(1)\n\t   Build a tree-object from ls-tree formatted text.\n\n       git-multi-pack-index(1)\n\t   Write and verify multi-pack-indexes.\n\n       git-pack-objects(1)\n\t   Create a packed archive of objects.\n\n       git-prune-packed(1)\n\t   Remove extra objects that are already in pack files.\n\n       git-read-tree(1)\n\t   Reads tree information into the index.\n\n       git-symbolic-ref(1)\n\t   Read, modify and delete symbolic refs.\n\n       git-unpack-objects(1)\n\t   Unpack objects from a packed archive.\n\n       git-update-index(1)\n\t   Register file contents in the working tree to the index.\n\n       git-update-ref(1)\n\t   Update the object name stored in a ref safely.\n\n       git-write-tree(1)\n\t   Create a tree object from the current index.\n",
        "       git-cat-file(1)\n\t   Provide content or type and size information for repository\n\t   objects.\n\n       git-cherry(1)\n\t   Find commits yet to be applied to upstream.\n\n       git-diff-files(1)\n\t   Compares files in the working tree and the index.\n\n       git-diff-index(1)\n\t   Compare a tree to the working tree or index.\n\n       git-diff-tree(1)\n\t   Compares the content and mode of blobs found via two tree objects.\n\n       git-for-each-ref(1)\n\t   Output information on each ref.\n\n       git-for-each-repo(1)\n\t   Run a Git command on a list of repositories.\n\n       git-get-tar-commit-id(1)\n\t   Extract commit ID from an archive created using git-archive.\n\n       git-ls-files(1)\n\t   Show information about files in the index and the working tree.\n\n       git-ls-remote(1)\n\t   List references in a remote repository.\n\n       git-ls-tree(1)\n\t   List the contents of a tree object.\n\n       git-merge-base(1)\n\t   Find as good common ancestors as possible for a merge.\n\n       git-name-rev(1)\n\t   Find symbolic names for given revs.\n\n       git-pack-redundant(1)\n\t   Find redundant pack files.\n\n       git-rev-list(1)\n\t   Lists commit objects in reverse chronological order.\n\n       git-rev-parse(1)\n\t   Pick out and massage parameters.\n\n       git-show-index(1)\n\t   Show packed archive index.\n\n       git-show-ref(1)\n\t   List references in a local repository.\n\n       git-unpack-file(1)\n\t   Creates a temporary file with a blob’s contents.\n\n       git-var(1)\n\t   Show a Git logical variable.\n\n       git-verify-pack(1)\n\t   Validate packed Git archive files.\n\n       In general, the interrogate commands do not touch the files in the\n       working tree.\n",
        "       git-daemon(1)\n\t   A really simple server for Git repositories.\n\n       git-fetch-pack(1)\n\t   Receive missing objects from another repository.\n\n       git-http-backend(1)\n\t   Server side implementation of Git over HTTP.\n\n       git-send-pack(1)\n\t   Push objects over Git protocol to another repository.\n\n       git-update-server-info(1)\n\t   Update auxiliary info file to help dumb servers.\n\n       The following are helper commands used by the above; end users\n       typically do not use them directly.\n\n       git-http-fetch(1)\n\t   Download from a remote Git repository via HTTP.\n\n       git-http-push(1)\n\t   Push objects over HTTP/DAV to another repository.\n\n       git-receive-pack(1)\n\t   Receive what is pushed into the repository.\n\n       git-shell(1)\n\t   Restricted login shell for Git-only SSH access.\n\n       git-upload-archive(1)\n\t   Send archive back to git-archive.\n\n       git-upload-pack(1)\n\t   Send objects packed back to git-fetch-pack.\n",
        "       These are internal helper commands used by other commands; end users\n       typically do not use them directly.\n\n       git-check-attr(1)\n\t   Display gitattributes information.\n\n       git-check-ignore(1)\n\t   Debug gitignore / exclude files.\n\n       git-check-mailmap(1)\n\t   Show canonical names and email addresses of contacts.\n\n       git-check-ref-format(1)\n\t   Ensures that a reference name is well formed.\n\n       git-column(1)\n\t   Display data in columns.\n\n       git-credential(1)\n\t   Retrieve and store user credentials.\n\n       git-credential-cache(1)\n\t   Helper to temporarily store passwords in memory.\n\n       git-credential-store(1)\n\t   Helper to store credentials on disk.\n\n       git-fmt-merge-msg(1)\n\t   Produce a merge commit message.\n\n       git-hook(1)\n\t   Run git hooks.\n\n       git-interpret-trailers(1)\n\t   Add or parse structured information in commit messages.\n\n       git-mailinfo(1)\n\t   Extracts patch and authorship from a single e-mail message.\n\n       git-mailsplit(1)\n\t   Simple UNIX mbox splitter program.\n\n       git-merge-one-file(1)\n\t   The standard helper program to use with git-merge-index.\n\n       git-patch-id(1)\n\t   Compute unique ID for a patch.\n\n       git-sh-i18n(1)\n\t   Git’s i18n setup code for shell scripts.\n\n       git-sh-setup(1)\n\t   Common Git shell script setup code.\n\n       git-stripspace(1)\n\t   Remove unnecessary whitespace.\n",
        "       The following documentation pages are guides about Git concepts.\n\n       gitcore-tutorial(7)\n\t   A Git core tutorial for developers.\n\n       gitcredentials(7)\n\t   Providing usernames and passwords to Git.\n\n       gitcvs-migration(7)\n\t   Git for CVS users.\n\n       gitdiffcore(7)\n\t   Tweaking diff output.\n\n       giteveryday(7)\n\t   A useful minimum set of commands for Everyday Git.\n\n       gitfaq(7)\n\t   Frequently asked questions about using Git.\n\n       gitglossary(7)\n\t   A Git Glossary.\n\n       gitnamespaces(7)\n\t   Git namespaces.\n\n       gitremote-helpers(7)\n\t   Helper programs to interact with remote repositories.\n\n       gitsubmodules(7)\n\t   Mounting one repository inside another.\n\n       gittutorial(7)\n\t   A tutorial introduction to Git.\n\n       gittutorial-2(7)\n\t   A tutorial introduction to Git: part two.\n\n       gitworkflows(7)\n\t   An overview of recommended workflows with Git.\n",
        "       This documentation discusses repository and command interfaces which\n       users are expected to interact with directly. See --user-formats in\n       git-help(1) for more details on the criteria.\n\n       gitattributes(5)\n\t   Defining attributes per path.\n\n       gitcli(7)\n\t   Git command-line interface and conventions.\n\n       githooks(5)\n\t   Hooks used by Git.\n\n       gitignore(5)\n\t   Specifies intentionally untracked files to ignore.\n\n       gitmailmap(5)\n\t   Map author/committer names and/or E-Mail addresses.\n\n       gitmodules(5)\n\t   Defining submodule properties.\n\n       gitrepository-layout(5)\n\t   Git Repository Layout.\n\n       gitrevisions(7)\n\t   Specifying revisions and ranges for Git.\n",
        "       This documentation discusses file formats, over-the-wire protocols and\n       other git developer interfaces. See --developer-interfaces in git-\n       help(1).\n\n       gitformat-bundle(5)\n\t   The bundle file format.\n\n       gitformat-chunk(5)\n\t   Chunk-based file formats.\n\n       gitformat-commit-graph(5)\n\t   Git commit-graph format.\n\n       gitformat-index(5)\n\t   Git index format.\n\n       gitformat-pack(5)\n\t   Git pack format.\n\n       gitformat-signature(5)\n\t   Git cryptographic signature formats.\n\n       gitprotocol-capabilities(5)\n\t   Protocol v0 and v1 capabilities.\n\n       gitprotocol-common(5)\n\t   Things common to various protocols.\n\n       gitprotocol-http(5)\n\t   Git HTTP-based protocols.\n\n       gitprotocol-pack(5)\n\t   How packs are transferred over-the-wire.\n\n       gitprotocol-v2(5)\n\t   Git Wire Protocol, Version 2.\n",
        "       Git uses a simple text format to store customizations that are per\n       repository and are per user. Such a configuration file may look like\n       this:\n\n\t   #\n\t   # A '#' or ';' character indicates a comment.\n\t   #\n\n\t   ; core variables\n\t   [core]\n\t\t   ; Don't trust file modes\n\t\t   filemode = false\n\n\t   ; user identity\n\t   [user]\n\t\t   name = \"Junio C Hamano\"\n\t\t   email = \"gitster@pobox.com\"\n\n\n       Various commands read from the configuration file and adjust their\n       operation accordingly. See git-config(1) for a list and more details\n       about the configuration mechanism.\n",
        "       <object>\n\t   Indicates the object name for any type of object.\n\n       <blob>\n\t   Indicates a blob object name.\n\n       <tree>\n\t   Indicates a tree object name.\n\n       <commit>\n\t   Indicates a commit object name.\n\n       <tree-ish>\n\t   Indicates a tree, commit or tag object name. A command that takes a\n\t   <tree-ish> argument ultimately wants to operate on a <tree> object\n\t   but automatically dereferences <commit> and <tag> objects that\n\t   point at a <tree>.\n\n       <commit-ish>\n\t   Indicates a commit or tag object name. A command that takes a\n\t   <commit-ish> argument ultimately wants to operate on a <commit>\n\t   object but automatically dereferences <tag> objects that point at a\n\t   <commit>.\n\n       <type>\n\t   Indicates that an object type is required. Currently one of: blob,\n\t   tree, commit, or tag.\n\n       <file>\n\t   Indicates a filename - almost always relative to the root of the\n\t   tree structure GIT_INDEX_FILE describes.\n",
        "       Any Git command accepting any <object> can also use the following\n       symbolic notation:\n\n       HEAD\n\t   indicates the head of the current branch.\n\n       <tag>\n\t   a valid tag name (i.e. a refs/tags/<tag> reference).\n\n       <head>\n\t   a valid head name (i.e. a refs/heads/<head> reference).\n\n       For a more complete list of ways to spell object names, see \"SPECIFYING\n       REVISIONS\" section in gitrevisions(7).\n",
        "       Please see the gitrepository-layout(5) document.\n\n       Read githooks(5) for more details about each hook.\n\n       Higher level SCMs may provide and manage additional information in the\n       $GIT_DIR.\n",
        "       Please see gitglossary(7).\n",
        "       Various Git commands pay attention to environment variables and change\n       their behavior. The environment variables marked as \"Boolean\" take\n       their values the same way as Boolean valued configuration variables,\n       e.g. \"true\", \"yes\", \"on\" and positive numbers are taken as \"yes\".\n\n       Here are the variables:\n",
        "       These environment variables apply to all core Git commands. Nb: it is\n       worth noting that they may be used/overridden by SCMS sitting above Git\n       so take care if using a foreign front-end.\n\n       GIT_INDEX_FILE\n\t   This environment variable specifies an alternate index file. If not\n\t   specified, the default of $GIT_DIR/index is used.\n\n       GIT_INDEX_VERSION\n\t   This environment variable specifies what index version is used when\n\t   writing the index file out. It won’t affect existing index files.\n\t   By default index file version 2 or 3 is used. See git-update-\n\t   index(1) for more information.\n\n       GIT_OBJECT_DIRECTORY\n\t   If the object storage directory is specified via this environment\n\t   variable then the sha1 directories are created underneath -\n\t   otherwise the default $GIT_DIR/objects directory is used.\n\n       GIT_ALTERNATE_OBJECT_DIRECTORIES\n\t   Due to the immutable nature of Git objects, old objects can be\n\t   archived into shared, read-only directories. This variable\n\t   specifies a \":\" separated (on Windows \";\" separated) list of Git\n\t   object directories which can be used to search for Git objects. New\n\t   objects will not be written to these directories.\n\n\t   Entries that begin with \" (double-quote) will be interpreted as\n\t   C-style quoted paths, removing leading and trailing double-quotes\n\t   and respecting backslash escapes. E.g., the value\n\t   \"path-with-\\\"-and-:-in-it\":vanilla-path has two paths:\n\t   path-with-\"-and-:-in-it and vanilla-path.\n\n       GIT_DIR\n\t   If the GIT_DIR environment variable is set then it specifies a path\n\t   to use instead of the default .git for the base of the repository.\n\t   The --git-dir command-line option also sets this value.\n\n       GIT_WORK_TREE\n\t   Set the path to the root of the working tree. This can also be\n\t   controlled by the --work-tree command-line option and the\n\t   core.worktree configuration variable.\n\n       GIT_NAMESPACE\n\t   Set the Git namespace; see gitnamespaces(7) for details. The\n\t   --namespace command-line option also sets this value.\n\n       GIT_CEILING_DIRECTORIES\n\t   This should be a colon-separated list of absolute paths. If set, it\n\t   is a list of directories that Git should not chdir up into while\n\t   looking for a repository directory (useful for excluding\n\t   slow-loading network directories). It will not exclude the current\n\t   working directory or a GIT_DIR set on the command line or in the\n\t   environment. Normally, Git has to read the entries in this list and\n\t   resolve any symlink that might be present in order to compare them\n\t   with the current directory. However, if even this access is slow,\n\t   you can add an empty entry to the list to tell Git that the\n\t   subsequent entries are not symlinks and needn’t be resolved; e.g.,\n\t   GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink.\n\n       GIT_DISCOVERY_ACROSS_FILESYSTEM\n\t   When run in a directory that does not have \".git\" repository\n\t   directory, Git tries to find such a directory in the parent\n\t   directories to find the top of the working tree, but by default it\n\t   does not cross filesystem boundaries. This Boolean environment\n\t   variable can be set to true to tell Git not to stop at filesystem\n\t   boundaries. Like GIT_CEILING_DIRECTORIES, this will not affect an\n\t   explicit repository directory set via GIT_DIR or on the command\n\t   line.\n\n       GIT_COMMON_DIR\n\t   If this variable is set to a path, non-worktree files that are\n\t   normally in $GIT_DIR will be taken from this path instead.\n\t   Worktree-specific files such as HEAD or index are taken from\n\t   $GIT_DIR. See gitrepository-layout(5) and git-worktree(1) for\n\t   details. This variable has lower precedence than other path\n\t   variables such as GIT_INDEX_FILE, GIT_OBJECT_DIRECTORY...\n\n       GIT_DEFAULT_HASH\n\t   If this variable is set, the default hash algorithm for new\n\t   repositories will be set to this value. This value is currently\n\t   ignored when cloning; the setting of the remote repository is used\n\t   instead. The default is \"sha1\". THIS VARIABLE IS EXPERIMENTAL! See\n\t   --object-format in git-init(1).\n",
        "       GIT_AUTHOR_NAME\n\t   The human-readable name used in the author identity when creating\n\t   commit or tag objects, or when writing reflogs. Overrides the\n\t   user.name and author.name configuration settings.\n\n       GIT_AUTHOR_EMAIL\n\t   The email address used in the author identity when creating commit\n\t   or tag objects, or when writing reflogs. Overrides the user.email\n\t   and author.email configuration settings.\n\n       GIT_AUTHOR_DATE\n\t   The date used for the author identity when creating commit or tag\n\t   objects, or when writing reflogs. See git-commit(1) for valid\n\t   formats.\n\n       GIT_COMMITTER_NAME\n\t   The human-readable name used in the committer identity when\n\t   creating commit or tag objects, or when writing reflogs. Overrides\n\t   the user.name and committer.name configuration settings.\n\n       GIT_COMMITTER_EMAIL\n\t   The email address used in the author identity when creating commit\n\t   or tag objects, or when writing reflogs. Overrides the user.email\n\t   and committer.email configuration settings.\n\n       GIT_COMMITTER_DATE\n\t   The date used for the committer identity when creating commit or\n\t   tag objects, or when writing reflogs. See git-commit(1) for valid\n\t   formats.\n\n       EMAIL\n\t   The email address used in the author and committer identities if no\n\t   other relevant environment variable or configuration setting has\n\t   been set.\n",
        "       GIT_DIFF_OPTS\n\t   Only valid setting is \"--unified=??\" or \"-u??\" to set the number of\n\t   context lines shown when a unified diff is created. This takes\n\t   precedence over any \"-U\" or \"--unified\" option value passed on the\n\t   Git diff command line.\n\n       GIT_EXTERNAL_DIFF\n\t   When the environment variable GIT_EXTERNAL_DIFF is set, the program\n\t   named by it is called to generate diffs, and Git does not use its\n\t   builtin diff machinery. For a path that is added, removed, or\n\t   modified, GIT_EXTERNAL_DIFF is called with 7 parameters:\n\n\t       path old-file old-hex old-mode new-file new-hex new-mode\n\n\t   where:\n\n       <old|new>-file\n\t   are files GIT_EXTERNAL_DIFF can use to read the contents of\n\t   <old|new>,\n\n       <old|new>-hex\n\t   are the 40-hexdigit SHA-1 hashes,\n\n       <old|new>-mode\n\t   are the octal representation of the file modes.\n\n\t   The file parameters can point at the user’s working file (e.g.\n\t   new-file in \"git-diff-files\"), /dev/null (e.g.  old-file when a new\n\t   file is added), or a temporary file (e.g.  old-file in the index).\n\t   GIT_EXTERNAL_DIFF should not worry about unlinking the temporary\n\t   file --- it is removed when GIT_EXTERNAL_DIFF exits.\n\n\t   For a path that is unmerged, GIT_EXTERNAL_DIFF is called with 1\n\t   parameter, <path>.\n\n\t   For each path GIT_EXTERNAL_DIFF is called, two environment\n\t   variables, GIT_DIFF_PATH_COUNTER and GIT_DIFF_PATH_TOTAL are set.\n\n       GIT_DIFF_PATH_COUNTER\n\t   A 1-based counter incremented by one for every path.\n\n       GIT_DIFF_PATH_TOTAL\n\t   The total number of paths.\n",
        "       GIT_MERGE_VERBOSITY\n\t   A number controlling the amount of output shown by the recursive\n\t   merge strategy. Overrides merge.verbosity. See git-merge(1)\n\n       GIT_PAGER\n\t   This environment variable overrides $PAGER. If it is set to an\n\t   empty string or to the value \"cat\", Git will not launch a pager.\n\t   See also the core.pager option in git-config(1).\n\n       GIT_PROGRESS_DELAY\n\t   A number controlling how many seconds to delay before showing\n\t   optional progress indicators. Defaults to 2.\n\n       GIT_EDITOR\n\t   This environment variable overrides $EDITOR and $VISUAL. It is used\n\t   by several Git commands when, on interactive mode, an editor is to\n\t   be launched. See also git-var(1) and the core.editor option in git-\n\t   config(1).\n\n       GIT_SEQUENCE_EDITOR\n\t   This environment variable overrides the configured Git editor when\n\t   editing the todo list of an interactive rebase. See also git-\n\t   rebase(1) and the sequence.editor option in git-config(1).\n\n       GIT_SSH, GIT_SSH_COMMAND\n\t   If either of these environment variables is set then git fetch and\n\t   git push will use the specified command instead of ssh when they\n\t   need to connect to a remote system. The command-line parameters\n\t   passed to the configured command are determined by the ssh variant.\n\t   See ssh.variant option in git-config(1) for details.\n\n\t   $GIT_SSH_COMMAND takes precedence over $GIT_SSH, and is interpreted\n\t   by the shell, which allows additional arguments to be included.\n\t   $GIT_SSH on the other hand must be just the path to a program\n\t   (which can be a wrapper shell script, if additional arguments are\n\t   needed).\n\n\t   Usually it is easier to configure any desired options through your\n\t   personal .ssh/config file. Please consult your ssh documentation\n\t   for further details.\n\n       GIT_SSH_VARIANT\n\t   If this environment variable is set, it overrides Git’s\n\t   autodetection whether GIT_SSH/GIT_SSH_COMMAND/core.sshCommand refer\n\t   to OpenSSH, plink or tortoiseplink. This variable overrides the\n\t   config setting ssh.variant that serves the same purpose.\n\n       GIT_SSL_NO_VERIFY\n\t   Setting and exporting this environment variable to any value tells\n\t   Git not to verify the SSL certificate when fetching or pushing over\n\t   HTTPS.\n\n       GIT_ASKPASS\n\t   If this environment variable is set, then Git commands which need\n\t   to acquire passwords or passphrases (e.g. for HTTP or IMAP\n\t   authentication) will call this program with a suitable prompt as\n\t   command-line argument and read the password from its STDOUT. See\n\t   also the core.askPass option in git-config(1).\n\n       GIT_TERMINAL_PROMPT\n\t   If this Boolean environment variable is set to false, git will not\n\t   prompt on the terminal (e.g., when asking for HTTP authentication).\n\n       GIT_CONFIG_GLOBAL, GIT_CONFIG_SYSTEM\n\t   Take the configuration from the given files instead from global or\n\t   system-level configuration files. If GIT_CONFIG_SYSTEM is set, the\n\t   system config file defined at build time (usually /etc/gitconfig)\n\t   will not be read. Likewise, if GIT_CONFIG_GLOBAL is set, neither\n\t   $HOME/.gitconfig nor $XDG_CONFIG_HOME/git/config will be read. Can\n\t   be set to /dev/null to skip reading configuration files of the\n\t   respective level.\n\n       GIT_CONFIG_NOSYSTEM\n\t   Whether to skip reading settings from the system-wide\n\t   $(prefix)/etc/gitconfig file. This Boolean environment variable can\n\t   be used along with $HOME and $XDG_CONFIG_HOME to create a\n\t   predictable environment for a picky script, or you can set it to\n\t   true to temporarily avoid using a buggy /etc/gitconfig file while\n\t   waiting for someone with sufficient permissions to fix it.\n\n       GIT_FLUSH\n\t   If this environment variable is set to \"1\", then commands such as\n\t   git blame (in incremental mode), git rev-list, git log, git\n\t   check-attr and git check-ignore will force a flush of the output\n\t   stream after each record have been flushed. If this variable is set\n\t   to \"0\", the output of these commands will be done using completely\n\t   buffered I/O. If this environment variable is not set, Git will\n\t   choose buffered or record-oriented flushing based on whether stdout\n\t   appears to be redirected to a file or not.\n\n       GIT_TRACE\n\t   Enables general trace messages, e.g. alias expansion, built-in\n\t   command execution and external command execution.\n\n\t   If this variable is set to \"1\", \"2\" or \"true\" (comparison is case\n\t   insensitive), trace messages will be printed to stderr.\n\n\t   If the variable is set to an integer value greater than 2 and lower\n\t   than 10 (strictly) then Git will interpret this value as an open\n\t   file descriptor and will try to write the trace messages into this\n\t   file descriptor.\n\n\t   Alternatively, if the variable is set to an absolute path (starting\n\t   with a / character), Git will interpret this as a file path and\n\t   will try to append the trace messages to it.\n\n\t   Unsetting the variable, or setting it to empty, \"0\" or \"false\"\n\t   (case insensitive) disables trace messages.\n\n       GIT_TRACE_FSMONITOR\n\t   Enables trace messages for the filesystem monitor extension. See\n\t   GIT_TRACE for available trace output options.\n\n       GIT_TRACE_PACK_ACCESS\n\t   Enables trace messages for all accesses to any packs. For each\n\t   access, the pack file name and an offset in the pack is recorded.\n\t   This may be helpful for troubleshooting some pack-related\n\t   performance problems. See GIT_TRACE for available trace output\n\t   options.\n\n       GIT_TRACE_PACKET\n\t   Enables trace messages for all packets coming in or out of a given\n\t   program. This can help with debugging object negotiation or other\n\t   protocol issues. Tracing is turned off at a packet starting with\n\t   \"PACK\" (but see GIT_TRACE_PACKFILE below). See GIT_TRACE for\n\t   available trace output options.\n\n       GIT_TRACE_PACKFILE\n\t   Enables tracing of packfiles sent or received by a given program.\n\t   Unlike other trace output, this trace is verbatim: no headers, and\n\t   no quoting of binary data. You almost certainly want to direct into\n\t   a file (e.g., GIT_TRACE_PACKFILE=/tmp/my.pack) rather than\n\t   displaying it on the terminal or mixing it with other trace output.\n\n\t   Note that this is currently only implemented for the client side of\n\t   clones and fetches.\n\n       GIT_TRACE_PERFORMANCE\n\t   Enables performance related trace messages, e.g. total execution\n\t   time of each Git command. See GIT_TRACE for available trace output\n\t   options.\n\n       GIT_TRACE_REFS\n\t   Enables trace messages for operations on the ref database. See\n\t   GIT_TRACE for available trace output options.\n\n       GIT_TRACE_SETUP\n\t   Enables trace messages printing the .git, working tree and current\n\t   working directory after Git has completed its setup phase. See\n\t   GIT_TRACE for available trace output options.\n\n       GIT_TRACE_SHALLOW\n\t   Enables trace messages that can help debugging fetching / cloning\n\t   of shallow repositories. See GIT_TRACE for available trace output\n\t   options.\n\n       GIT_TRACE_CURL\n\t   Enables a curl full trace dump of all incoming and outgoing data,\n\t   including descriptive information, of the git transport protocol.\n\t   This is similar to doing curl --trace-ascii on the command line.\n\t   See GIT_TRACE for available trace output options.\n\n       GIT_TRACE_CURL_NO_DATA\n\t   When a curl trace is enabled (see GIT_TRACE_CURL above), do not\n\t   dump data (that is, only dump info lines and headers).\n\n       GIT_TRACE2\n\t   Enables more detailed trace messages from the \"trace2\" library.\n\t   Output from GIT_TRACE2 is a simple text-based format for human\n\t   readability.\n\n\t   If this variable is set to \"1\", \"2\" or \"true\" (comparison is case\n\t   insensitive), trace messages will be printed to stderr.\n\n\t   If the variable is set to an integer value greater than 2 and lower\n\t   than 10 (strictly) then Git will interpret this value as an open\n\t   file descriptor and will try to write the trace messages into this\n\t   file descriptor.\n\n\t   Alternatively, if the variable is set to an absolute path (starting\n\t   with a / character), Git will interpret this as a file path and\n\t   will try to append the trace messages to it. If the path already\n\t   exists and is a directory, the trace messages will be written to\n\t   files (one per process) in that directory, named according to the\n\t   last component of the SID and an optional counter (to avoid\n\t   filename collisions).\n\n\t   In addition, if the variable is set to\n\t   af_unix:[<socket_type>:]<absolute-pathname>, Git will try to open\n\t   the path as a Unix Domain Socket. The socket type can be either\n\t   stream or dgram.\n\n\t   Unsetting the variable, or setting it to empty, \"0\" or \"false\"\n\t   (case insensitive) disables trace messages.\n\n\t   See Trace2 documentation[2] for full details.\n\n       GIT_TRACE2_EVENT\n\t   This setting writes a JSON-based format that is suited for machine\n\t   interpretation. See GIT_TRACE2 for available trace output options\n\t   and Trace2 documentation[2] for full details.\n\n       GIT_TRACE2_PERF\n\t   In addition to the text-based messages available in GIT_TRACE2,\n\t   this setting writes a column-based format for understanding nesting\n\t   regions. See GIT_TRACE2 for available trace output options and\n\t   Trace2 documentation[2] for full details.\n\n       GIT_TRACE_REDACT\n\t   By default, when tracing is activated, Git redacts the values of\n\t   cookies, the \"Authorization:\" header, the \"Proxy-Authorization:\"\n\t   header and packfile URIs. Set this Boolean environment variable to\n\t   false to prevent this redaction.\n\n       GIT_LITERAL_PATHSPECS\n\t   Setting this Boolean environment variable to true will cause Git to\n\t   treat all pathspecs literally, rather than as glob patterns. For\n\t   example, running GIT_LITERAL_PATHSPECS=1 git log -- '*.c' will\n\t   search for commits that touch the path *.c, not any paths that the\n\t   glob *.c matches. You might want this if you are feeding literal\n\t   paths to Git (e.g., paths previously given to you by git ls-tree,\n\t   --raw diff output, etc).\n\n       GIT_GLOB_PATHSPECS\n\t   Setting this Boolean environment variable to true will cause Git to\n\t   treat all pathspecs as glob patterns (aka \"glob\" magic).\n\n       GIT_NOGLOB_PATHSPECS\n\t   Setting this Boolean environment variable to true will cause Git to\n\t   treat all pathspecs as literal (aka \"literal\" magic).\n\n       GIT_ICASE_PATHSPECS\n\t   Setting this Boolean environment variable to true will cause Git to\n\t   treat all pathspecs as case-insensitive.\n\n       GIT_REFLOG_ACTION\n\t   When a ref is updated, reflog entries are created to keep track of\n\t   the reason why the ref was updated (which is typically the name of\n\t   the high-level command that updated the ref), in addition to the\n\t   old and new values of the ref. A scripted Porcelain command can use\n\t   set_reflog_action helper function in git-sh-setup to set its name\n\t   to this variable when it is invoked as the top level command by the\n\t   end user, to be recorded in the body of the reflog.\n\n       GIT_REF_PARANOIA\n\t   If this Boolean environment variable is set to false, ignore broken\n\t   or badly named refs when iterating over lists of refs. Normally Git\n\t   will try to include any such refs, which may cause some operations\n\t   to fail. This is usually preferable, as potentially destructive\n\t   operations (e.g., git-prune(1)) are better off aborting rather than\n\t   ignoring broken refs (and thus considering the history they point\n\t   to as not worth saving). The default value is 1 (i.e., be paranoid\n\t   about detecting and aborting all operations). You should not\n\t   normally need to set this to 0, but it may be useful when trying to\n\t   salvage data from a corrupted repository.\n\n       GIT_ALLOW_PROTOCOL\n\t   If set to a colon-separated list of protocols, behave as if\n\t   protocol.allow is set to never, and each of the listed protocols\n\t   has protocol.<name>.allow set to always (overriding any existing\n\t   configuration). See the description of protocol.allow in git-\n\t   config(1) for more details.\n\n       GIT_PROTOCOL_FROM_USER\n\t   Set this Boolean environment variable to false to prevent protocols\n\t   used by fetch/push/clone which are configured to the user state.\n\t   This is useful to restrict recursive submodule initialization from\n\t   an untrusted repository or for programs which feed\n\t   potentially-untrusted URLS to git commands. See git-config(1) for\n\t   more details.\n\n       GIT_PROTOCOL\n\t   For internal use only. Used in handshaking the wire protocol.\n\t   Contains a colon : separated list of keys with optional values\n\t   key[=value]. Presence of unknown keys and values must be ignored.\n\n\t   Note that servers may need to be configured to allow this variable\n\t   to pass over some transports. It will be propagated automatically\n\t   when accessing local repositories (i.e., file:// or a filesystem\n\t   path), as well as over the git:// protocol. For git-over-http, it\n\t   should work automatically in most configurations, but see the\n\t   discussion in git-http-backend(1). For git-over-ssh, the ssh server\n\t   may need to be configured to allow clients to pass this variable\n\t   (e.g., by using AcceptEnv GIT_PROTOCOL with OpenSSH).\n\n\t   This configuration is optional. If the variable is not propagated,\n\t   then clients will fall back to the original \"v0\" protocol (but may\n\t   miss out on some performance improvements or features). This\n\t   variable currently only affects clones and fetches; it is not yet\n\t   used for pushes (but may be in the future).\n\n       GIT_OPTIONAL_LOCKS\n\t   If this Boolean environment variable is set to false, Git will\n\t   complete any requested operation without performing any optional\n\t   sub-operations that require taking a lock. For example, this will\n\t   prevent git status from refreshing the index as a side effect. This\n\t   is useful for processes running in the background which do not want\n\t   to cause lock contention with other operations on the repository.\n\t   Defaults to 1.\n\n       GIT_REDIRECT_STDIN, GIT_REDIRECT_STDOUT, GIT_REDIRECT_STDERR\n\t   Windows-only: allow redirecting the standard input/output/error\n\t   handles to paths specified by the environment variables. This is\n\t   particularly useful in multi-threaded applications where the\n\t   canonical way to pass standard handles via CreateProcess() is not\n\t   an option because it would require the handles to be marked\n\t   inheritable (and consequently every spawned process would inherit\n\t   them, possibly blocking regular Git operations). The primary\n\t   intended use case is to use named pipes for communication (e.g.\n\t   \\\\.\\pipe\\my-git-stdin-123).\n\n\t   Two special values are supported: off will simply close the\n\t   corresponding standard handle, and if GIT_REDIRECT_STDERR is 2>&1,\n\t   standard error will be redirected to the same handle as standard\n\t   output.\n\n       GIT_PRINT_SHA1_ELLIPSIS (deprecated)\n\t   If set to yes, print an ellipsis following an (abbreviated) SHA-1\n\t   value. This affects indications of detached HEADs (git-checkout(1))\n\t   and the raw diff output (git-diff(1)). Printing an ellipsis in the\n\t   cases mentioned is no longer considered adequate and support for it\n\t   is likely to be removed in the foreseeable future (along with the\n\t   variable).\n",
        "       More detail on the following is available from the Git concepts chapter\n       of the user-manual[3] and gitcore-tutorial(7).\n\n       A Git project normally consists of a working directory with a \".git\"\n       subdirectory at the top level. The .git directory contains, among other\n       things, a compressed object database representing the complete history\n       of the project, an \"index\" file which links that history to the current\n       contents of the working tree, and named pointers into that history such\n       as tags and branch heads.\n\n       The object database contains objects of three main types: blobs, which\n       hold file data; trees, which point to blobs and other trees to build up\n       directory hierarchies; and commits, which each reference a single tree\n       and some number of parent commits.\n\n       The commit, equivalent to what other systems call a \"changeset\" or\n       \"version\", represents a step in the project’s history, and each parent\n       represents an immediately preceding step. Commits with more than one\n       parent represent merges of independent lines of development.\n\n       All objects are named by the SHA-1 hash of their contents, normally\n       written as a string of 40 hex digits. Such names are globally unique.\n       The entire history leading up to a commit can be vouched for by signing\n       just that commit. A fourth object type, the tag, is provided for this\n       purpose.\n\n       When first created, objects are stored in individual files, but for\n       efficiency may later be compressed together into \"pack files\".\n\n       Named pointers called refs mark interesting points in history. A ref\n       may contain the SHA-1 name of an object or the name of another ref.\n       Refs with names beginning ref/head/ contain the SHA-1 name of the most\n       recent commit (or \"head\") of a branch under development. SHA-1 names of\n       tags of interest are stored under ref/tags/. A special ref named HEAD\n       contains the name of the currently checked-out branch.\n\n       The index file is initialized with a list of all paths and, for each\n       path, a blob object and a set of attributes. The blob object represents\n       the contents of the file as of the head of the current branch. The\n       attributes (last modified time, size, etc.) are taken from the\n       corresponding file in the working tree. Subsequent changes to the\n       working tree can be found by comparing these attributes. The index may\n       be updated with new content, and new commits may be created from the\n       content stored in the index.\n\n       The index is also capable of storing multiple entries (called \"stages\")\n       for a given pathname. These stages are used to hold the various\n       unmerged version of a file when a merge is in progress.\n",
        "       See the references in the \"description\" section to get started using\n       Git. The following is probably more detail than necessary for a\n       first-time user.\n\n       The Git concepts chapter of the user-manual[3] and gitcore-tutorial(7)\n       both provide introductions to the underlying Git architecture.\n\n       See gitworkflows(7) for an overview of recommended workflows.\n\n       See also the howto[4] documents for some useful examples.\n\n       The internals are documented in the Git API documentation[5].\n\n       Users migrating from CVS may also want to read gitcvs-migration(7).\n",
        "       Git was started by Linus Torvalds, and is currently maintained by Junio\n       C Hamano. Numerous contributions have come from the Git mailing list\n       <git@vger.kernel.org[6]>.\n       http://www.openhub.net/p/git/contributors/summary gives you a more\n       complete list of contributors.\n\n       If you have a clone of git.git itself, the output of git-shortlog(1)\n       and git-blame(1) can show you the authors for specific parts of the\n       project.\n",
        "       Report bugs to the Git mailing list <git@vger.kernel.org[6]> where the\n       development and maintenance is primarily done. You do not have to be\n       subscribed to the list to send a message there. See the list archive at\n       https://lore.kernel.org/git for previous bug reports and other\n       discussions.\n\n       Issues which are security relevant should be disclosed privately to the\n       Git Security mailing list <git-security@googlegroups.com[7]>.\n",
        "       gittutorial(7), gittutorial-2(7), giteveryday(7), gitcvs-migration(7),\n       gitglossary(7), gitcore-tutorial(7), gitcli(7), The Git User’s\n       Manual[1], gitworkflows(7)\n",
        "       Part of the git(1) suite\n",
        "\t   git-htmldocs/user-manual.html\n",
        "\t   git-htmldocs/technical/api-trace2.html\n",
        "\t   git-htmldocs/user-manual.html#git-concepts\n",
        "\t   git-htmldocs/howto-index.html\n",
        "\t   git-htmldocs/technical/api-index.html\n",
        "\t   mailto:git@vger.kernel.org\n",
        "\t   mailto:git-security@googlegroups.com\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "-v",
      "description": " Prints the Git suite version that the git program came from. This option is internally converted to git version ... and accepts the same options as the git-version(1) command. If --help is also given, it takes precedence over --version.",
      "optional": true
    },
    {
      "flag": "-h",
      "description": " Prints the synopsis and a list of the most commonly used commands. If the option --all or -a is given then all available commands are printed. If a Git command is named this option will bring up the manual page for that command. Other options are available to control how the manual page is displayed. See git-help(1) for more information, because git --help ... is converted internally into git help ....",
      "optional": true
    },
    {
      "flag": "-C",
      "description": " Run as if git was started in <path> instead of the current working directory. When multiple -C options are given, each subsequent non-absolute -C <path> is interpreted relative to the preceding -C <path>. If <path> is present but empty, e.g.  -C \"\", then the current working directory is left unchanged. This option affects options that expect path name like --git-dir and --work-tree in that their interpretations of the path names would be made relative to the working directory caused by the -C option. For example the following invocations are equivalent: git --git-dir=a.git --work-tree=b -C c status git --git-dir=c/a.git --work-tree=c/b status",
      "optional": true
    },
    {
      "flag": "--config-env",
      "description": " Like -c <name>=<value>, give configuration variable <name> a value, where <envvar> is the name of an environment variable from which to retrieve the value. Unlike -c there is no shortcut for directly setting the value to an empty string, instead the environment variable itself must be set to the empty string. It is an error if the <envvar> does not exist in the environment.  <envvar> may not contain an equals sign to avoid ambiguity with <name> containing one. This is useful for cases where you want to pass transitory configuration options to git, but are doing so on OS’s where other processes might be able to read your cmdline (e.g. /proc/self/cmdline), but not your environ (e.g. /proc/self/environ). That behavior is the default on Linux, but may not be on your system. Note that this might add security for variables such as http.extraHeader where the sensitive information is part of the value, but not e.g.\turl.<base>.insteadOf where the sensitive information can be part of the key.",
      "optional": true,
      "shortFlag": "-c"
    },
    {
      "flag": "--exec-path",
      "description": " Path to wherever your core Git programs are installed. This can also be controlled by setting the GIT_EXEC_PATH environment variable. If no path is given, git will print the current setting and then exit.",
      "argument": "=<path>",
      "optional": true
    },
    {
      "flag": "--html-path",
      "description": " Print the path, without trailing slash, where Git’s HTML documentation is installed and exit.",
      "optional": true
    },
    {
      "flag": "--man-path",
      "description": " Print the manpath (see man(1)) for the man pages for this version of Git and exit.",
      "optional": true
    },
    {
      "flag": "--info-path",
      "description": " Print the path where the Info files documenting this version of Git are installed and exit.",
      "optional": true
    },
    {
      "flag": "-p",
      "description": " Pipe all output into less (or if set, $PAGER) if standard output is a terminal. This overrides the pager.<cmd> configuration options (see the \"Configuration Mechanism\" section below).",
      "optional": true
    },
    {
      "flag": "--git-dir",
      "description": " Set the path to the repository (\".git\" directory). This can also be controlled by setting the GIT_DIR environment variable. It can be an absolute path or relative path to current working directory. Specifying the location of the \".git\" directory using this option (or GIT_DIR environment variable) turns off the repository discovery that tries to find a directory with \".git\" subdirectory (which is how the repository and the top-level of the working tree are discovered), and tells Git that you are at the top level of the working tree. If you are not at the top-level directory of the working tree, you should tell Git where the top-level of the working tree is, with the --work-tree=<path> option (or GIT_WORK_TREE environment variable) If you just want to run git as if it was started in <path> then use git -C <path>.",
      "optional": true,
      "shortFlag": "-P"
    },
    {
      "flag": "--work-tree",
      "description": " Set the path to the working tree. It can be an absolute path or a path relative to the current working directory. This can also be controlled by setting the GIT_WORK_TREE environment variable and the core.worktree configuration variable (see core.worktree in git- config(1) for a more detailed discussion).",
      "optional": true
    },
    {
      "flag": "--namespace",
      "description": " Set the Git namespace. See gitnamespaces(7) for more details. Equivalent to setting the GIT_NAMESPACE environment variable.",
      "optional": true
    },
    {
      "flag": "--super-prefix",
      "description": " Currently for internal use only. Set a prefix which gives a path from above a repository down to its root. One use is to give submodules context about the superproject that invoked it.",
      "optional": true
    },
    {
      "flag": "--bare",
      "description": " Treat the repository as a bare repository. If GIT_DIR environment is not set, it is set to the current working directory.",
      "optional": true
    },
    {
      "flag": "--no-replace-objects",
      "description": " Do not use replacement refs to replace Git objects. See git- replace(1) for more information.",
      "optional": true
    },
    {
      "flag": "--literal-pathspecs",
      "description": " Treat pathspecs literally (i.e. no globbing, no pathspec magic). This is equivalent to setting the GIT_LITERAL_PATHSPECS environment variable to 1."
    },
    {
      "flag": "--glob-pathspecs",
      "description": " Add \"glob\" magic to all pathspec. This is equivalent to setting the GIT_GLOB_PATHSPECS environment variable to 1. Disabling globbing on individual pathspecs can be done using pathspec magic \":(literal)\""
    },
    {
      "flag": "--noglob-pathspecs",
      "description": " Add \"literal\" magic to all pathspec. This is equivalent to setting the GIT_NOGLOB_PATHSPECS environment variable to 1. Enabling globbing on individual pathspecs can be done using pathspec magic \":(glob)\""
    },
    {
      "flag": "--icase-pathspecs",
      "description": " Add \"icase\" magic to all pathspec. This is equivalent to setting the GIT_ICASE_PATHSPECS environment variable to 1."
    },
    {
      "flag": "--no-optional-locks",
      "description": " Do not perform optional operations that require locks. This is equivalent to setting the GIT_OPTIONAL_LOCKS to 0."
    },
    {
      "flag": "--list-cmds",
      "description": "=group[,group...] List commands by group. This is an internal/experimental option and may change or be removed in the future. Supported groups are: builtins, parseopt (builtin commands that use parse-options), main (all commands in libexec directory), others (all other commands in $PATH that have git- prefix), list-<category> (see categories in command-list.txt), nohelpers (exclude helper commands), alias and config (retrieve command list from config variable completion.commands) GIT COMMANDS We divide Git into high level (\"porcelain\") commands and low level (\"plumbing\") commands. HIGH-LEVEL COMMANDS (PORCELAIN) We separate the porcelain commands into the main commands and some ancillary user utilities. Main porcelain commands git-add(1) Add file contents to the index. git-am(1) Apply a series of patches from a mailbox. git-archive(1) Create an archive of files from a named tree. git-bisect(1) Use binary search to find the commit that introduced a bug. git-branch(1) List, create, or delete branches. git-bundle(1) Move objects and refs by archive. git-checkout(1) Switch branches or restore working tree files. git-cherry-pick(1) Apply the changes introduced by some existing commits. git-citool(1) Graphical alternative to git-commit. git-clean(1) Remove untracked files from the working tree. git-clone(1) Clone a repository into a new directory. git-commit(1) Record changes to the repository. git-describe(1) Give an object a human readable name based on an available ref. git-diff(1) Show changes between commits, commit and working tree, etc. git-fetch(1) Download objects and refs from another repository. git-format-patch(1) Prepare patches for e-mail submission. git-gc(1) Cleanup unnecessary files and optimize the local repository. git-grep(1) Print lines matching a pattern. git-gui(1) A portable graphical interface to Git. git-init(1) Create an empty Git repository or reinitialize an existing one. git-log(1) Show commit logs. git-maintenance(1) Run tasks to optimize Git repository data. git-merge(1) Join two or more development histories together. git-mv(1) Move or rename a file, a directory, or a symlink. git-notes(1) Add or inspect object notes. git-pull(1) Fetch from and integrate with another repository or a local branch. git-push(1) Update remote refs along with associated objects. git-range-diff(1) Compare two commit ranges (e.g. two versions of a branch). git-rebase(1) Reapply commits on top of another base tip. git-reset(1) Reset current HEAD to the specified state. git-restore(1) Restore working tree files. git-revert(1) Revert some existing commits. git-rm(1) Remove files from the working tree and from the index. git-shortlog(1) Summarize git log output. git-show(1) Show various types of objects. git-sparse-checkout(1) Reduce your working tree to a subset of tracked files. git-stash(1) Stash the changes in a dirty working directory away. git-status(1) Show the working tree status. git-submodule(1) Initialize, update or inspect submodules. git-switch(1) Switch branches. git-tag(1) Create, list, delete or verify a tag object signed with GPG. git-worktree(1) Manage multiple working trees. gitk(1) The Git repository browser. scalar(1) A tool for managing large Git repositories. Ancillary Commands Manipulators: git-config(1) Get and set repository or global options. git-fast-export(1) Git data exporter. git-fast-import(1) Backend for fast Git data importers. git-filter-branch(1) Rewrite branches. git-mergetool(1) Run merge conflict resolution tools to resolve merge conflicts. git-pack-refs(1) Pack heads and tags for efficient repository access. git-prune(1) Prune all unreachable objects from the object database. git-reflog(1) Manage reflog information. git-remote(1) Manage set of tracked repositories. git-repack(1) Pack unpacked objects in a repository. git-replace(1) Create, list, delete refs to replace objects. Interrogators: git-annotate(1) Annotate file lines with commit information. git-blame(1) Show what revision and author last modified each line of a file. git-bugreport(1) Collect information for user to file a bug report. git-count-objects(1) Count unpacked number of objects and their disk consumption. git-diagnose(1) Generate a zip archive of diagnostic information. git-difftool(1) Show changes using common diff tools. git-fsck(1) Verifies the connectivity and validity of the objects in the database. git-help(1) Display help information about Git. git-instaweb(1) Instantly browse your working repository in gitweb. git-merge-tree(1) Perform merge without touching index or working tree. git-rerere(1) Reuse recorded resolution of conflicted merges. git-show-branch(1) Show branches and their commits. git-verify-commit(1) Check the GPG signature of commits. git-verify-tag(1) Check the GPG signature of tags. git-version(1) Display version information about Git. git-whatchanged(1) Show logs with difference each commit introduces. gitweb(1) Git web interface (web frontend to Git repositories). Interacting with Others These commands are to interact with foreign SCM and with other people via patch over e-mail. git-archimport(1) Import a GNU Arch repository into Git. git-cvsexportcommit(1) Export a single commit to a CVS checkout. git-cvsimport(1) Salvage your data out of another SCM people love to hate. git-cvsserver(1) A CVS server emulator for Git. git-imap-send(1) Send a collection of patches from stdin to an IMAP folder. git-p4(1) Import from and submit to Perforce repositories. git-quiltimport(1) Applies a quilt patchset onto the current branch. git-request-pull(1) Generates a summary of pending changes. git-send-email(1) Send a collection of patches as emails. git-svn(1) Bidirectional operation between a Subversion repository and Git. Reset, restore and revert There are three commands with similar names: git reset, git restore and git revert. •   git-revert(1) is about making a new commit that reverts the changes made by other commits. •   git-restore(1) is about restoring files in the working tree from either the index or another commit. This command does not update your branch. The command can also be used to restore files in the index from another commit. •   git-reset(1) is about updating your branch, moving the tip in order to add or remove commits from the branch. This operation changes the commit history. git reset can also be used to restore the index, overlapping with git restore. LOW-LEVEL COMMANDS (PLUMBING) Although Git includes its own porcelain layer, its low-level commands are sufficient to support development of alternative porcelains. Developers of such porcelains might start by reading about git-update- index(1) and git-read-tree(1). The interface (input, output, set of options and the semantics) to these low-level commands are meant to be a lot more stable than Porcelain level commands, because these commands are primarily for scripted use. The interface to Porcelain commands on the other hand are subject to change in order to improve the end user experience. The following description divides the low-level commands into commands that manipulate objects (in the repository, index, and working tree), commands that interrogate and compare objects, and commands that move objects and references between repositories. Manipulation commands git-apply(1) Apply a patch to files and/or to the index. git-checkout-index(1) Copy files from the index to the working tree. git-commit-graph(1) Write and verify Git commit-graph files. git-commit-tree(1) Create a new commit object. git-hash-object(1) Compute object ID and optionally creates a blob from a file. git-index-pack(1) Build pack index file for an existing packed archive. git-merge-file(1) Run a three-way file merge. git-merge-index(1) Run a merge for files needing merging. git-mktag(1) Creates a tag object with extra validation. git-mktree(1) Build a tree-object from ls-tree formatted text. git-multi-pack-index(1) Write and verify multi-pack-indexes. git-pack-objects(1) Create a packed archive of objects. git-prune-packed(1) Remove extra objects that are already in pack files. git-read-tree(1) Reads tree information into the index. git-symbolic-ref(1) Read, modify and delete symbolic refs. git-unpack-objects(1) Unpack objects from a packed archive. git-update-index(1) Register file contents in the working tree to the index. git-update-ref(1) Update the object name stored in a ref safely. git-write-tree(1) Create a tree object from the current index. Interrogation commands git-cat-file(1) Provide content or type and size information for repository objects. git-cherry(1) Find commits yet to be applied to upstream. git-diff-files(1) Compares files in the working tree and the index. git-diff-index(1) Compare a tree to the working tree or index. git-diff-tree(1) Compares the content and mode of blobs found via two tree objects. git-for-each-ref(1) Output information on each ref. git-for-each-repo(1) Run a Git command on a list of repositories. git-get-tar-commit-id(1) Extract commit ID from an archive created using git-archive. git-ls-files(1) Show information about files in the index and the working tree. git-ls-remote(1) List references in a remote repository. git-ls-tree(1) List the contents of a tree object. git-merge-base(1) Find as good common ancestors as possible for a merge. git-name-rev(1) Find symbolic names for given revs. git-pack-redundant(1) Find redundant pack files. git-rev-list(1) Lists commit objects in reverse chronological order. git-rev-parse(1) Pick out and massage parameters. git-show-index(1) Show packed archive index. git-show-ref(1) List references in a local repository. git-unpack-file(1) Creates a temporary file with a blob’s contents. git-var(1) Show a Git logical variable. git-verify-pack(1) Validate packed Git archive files. In general, the interrogate commands do not touch the files in the working tree. Syncing repositories git-daemon(1) A really simple server for Git repositories. git-fetch-pack(1) Receive missing objects from another repository. git-http-backend(1) Server side implementation of Git over HTTP. git-send-pack(1) Push objects over Git protocol to another repository. git-update-server-info(1) Update auxiliary info file to help dumb servers. The following are helper commands used by the above; end users typically do not use them directly. git-http-fetch(1) Download from a remote Git repository via HTTP. git-http-push(1) Push objects over HTTP/DAV to another repository. git-receive-pack(1) Receive what is pushed into the repository. git-shell(1) Restricted login shell for Git-only SSH access. git-upload-archive(1) Send archive back to git-archive. git-upload-pack(1) Send objects packed back to git-fetch-pack. Internal helper commands These are internal helper commands used by other commands; end users typically do not use them directly. git-check-attr(1) Display gitattributes information. git-check-ignore(1) Debug gitignore / exclude files. git-check-mailmap(1) Show canonical names and email addresses of contacts. git-check-ref-format(1) Ensures that a reference name is well formed. git-column(1) Display data in columns. git-credential(1) Retrieve and store user credentials. git-credential-cache(1) Helper to temporarily store passwords in memory. git-credential-store(1) Helper to store credentials on disk. git-fmt-merge-msg(1) Produce a merge commit message. git-hook(1) Run git hooks. git-interpret-trailers(1) Add or parse structured information in commit messages. git-mailinfo(1) Extracts patch and authorship from a single e-mail message. git-mailsplit(1) Simple UNIX mbox splitter program. git-merge-one-file(1) The standard helper program to use with git-merge-index. git-patch-id(1) Compute unique ID for a patch. git-sh-i18n(1) Git’s i18n setup code for shell scripts. git-sh-setup(1) Common Git shell script setup code. git-stripspace(1) Remove unnecessary whitespace."
    }
  ],
  "examples": [
    {
      "command": "PATH that have git- prefix), list-<category> (see categories in",
      "description": "command-list.txt), nohelpers (exclude helper commands), alias and",
      "tags": [
        "redirect"
      ],
      "output": "\t   command-list.txt), nohelpers (exclude helper commands), alias and\n\t   config (retrieve command list from config variable\n\t   completion.commands)\nGIT COMMANDS\n       We divide Git into high level (\"porcelain\") commands and low level\n       (\"plumbing\") commands.\nHIGH-LEVEL COMMANDS (PORCELAIN)\n       We separate the porcelain commands into the main commands and some\n       ancillary user utilities.\n   Main porcelain commands\n       git-add(1)\n\t   Add file contents to the index.\n       git-am(1)\n\t   Apply a series of patches from a mailbox.\n       git-archive(1)\n\t   Create an archive of files from a named tree.\n       git-bisect(1)\n\t   Use binary search to find the commit that introduced a bug.\n       git-branch(1)\n\t   List, create, or delete branches.\n       git-bundle(1)\n\t   Move objects and refs by archive.\n       git-checkout(1)\n\t   Switch branches or restore working tree files.\n       git-cherry-pick(1)\n\t   Apply the changes introduced by some existing commits.\n       git-citool(1)\n\t   Graphical alternative to git-commit.\n       git-clean(1)\n\t   Remove untracked files from the working tree.\n       git-clone(1)\n\t   Clone a repository into a new directory.\n       git-commit(1)\n\t   Record changes to the repository.\n       git-describe(1)\n\t   Give an object a human readable name based on an available ref.\n       git-diff(1)\n\t   Show changes between commits, commit and working tree, etc.\n       git-fetch(1)\n\t   Download objects and refs from another repository.\n       git-format-patch(1)\n\t   Prepare patches for e-mail submission.\n       git-gc(1)\n\t   Cleanup unnecessary files and optimize the local repository.\n       git-grep(1)\n\t   Print lines matching a pattern.\n       git-gui(1)\n\t   A portable graphical interface to Git.\n       git-init(1)\n\t   Create an empty Git repository or reinitialize an existing one.\n       git-log(1)\n\t   Show commit logs.\n       git-maintenance(1)\n\t   Run tasks to optimize Git repository data.\n       git-merge(1)\n\t   Join two or more development histories together.\n       git-mv(1)\n\t   Move or rename a file, a directory, or a symlink.\n       git-notes(1)\n\t   Add or inspect object notes.\n       git-pull(1)\n\t   Fetch from and integrate with another repository or a local branch.\n       git-push(1)\n\t   Update remote refs along with associated objects.\n       git-range-diff(1)\n\t   Compare two commit ranges (e.g. two versions of a branch).\n       git-rebase(1)\n\t   Reapply commits on top of another base tip.\n       git-reset(1)\n\t   Reset current HEAD to the specified state.\n       git-restore(1)\n\t   Restore working tree files.\n       git-revert(1)\n\t   Revert some existing commits.\n       git-rm(1)\n\t   Remove files from the working tree and from the index.\n       git-shortlog(1)\n\t   Summarize git log output.\n       git-show(1)\n\t   Show various types of objects.\n       git-sparse-checkout(1)\n\t   Reduce your working tree to a subset of tracked files.\n       git-stash(1)\n\t   Stash the changes in a dirty working directory away.\n       git-status(1)\n\t   Show the working tree status.\n       git-submodule(1)\n\t   Initialize, update or inspect submodules.\n       git-switch(1)\n\t   Switch branches.\n       git-tag(1)\n\t   Create, list, delete or verify a tag object signed with GPG.\n       git-worktree(1)\n\t   Manage multiple working trees.\n       gitk(1)\n\t   The Git repository browser.\n       scalar(1)\n\t   A tool for managing large Git repositories.\n   Ancillary Commands\n       Manipulators:\n       git-config(1)\n\t   Get and set repository or global options.\n       git-fast-export(1)\n\t   Git data exporter.\n       git-fast-import(1)\n\t   Backend for fast Git data importers.\n       git-filter-branch(1)\n\t   Rewrite branches.\n       git-mergetool(1)\n\t   Run merge conflict resolution tools to resolve merge conflicts.\n       git-pack-refs(1)\n\t   Pack heads and tags for efficient repository access.\n       git-prune(1)\n\t   Prune all unreachable objects from the object database.\n       git-reflog(1)\n\t   Manage reflog information.\n       git-remote(1)\n\t   Manage set of tracked repositories.\n       git-repack(1)\n\t   Pack unpacked objects in a repository.\n       git-replace(1)\n\t   Create, list, delete refs to replace objects.\n       Interrogators:\n       git-annotate(1)\n\t   Annotate file lines with commit information.\n       git-blame(1)\n\t   Show what revision and author last modified each line of a file.\n       git-bugreport(1)\n\t   Collect information for user to file a bug report.\n       git-count-objects(1)\n\t   Count unpacked number of objects and their disk consumption.\n       git-diagnose(1)\n\t   Generate a zip archive of diagnostic information.\n       git-difftool(1)\n\t   Show changes using common diff tools.\n       git-fsck(1)\n\t   Verifies the connectivity and validity of the objects in the\n\t   database.\n       git-help(1)\n\t   Display help information about Git.\n       git-instaweb(1)\n\t   Instantly browse your working repository in gitweb.\n       git-merge-tree(1)\n\t   Perform merge without touching index or working tree.\n       git-rerere(1)\n\t   Reuse recorded resolution of conflicted merges.\n       git-show-branch(1)\n\t   Show branches and their commits.\n       git-verify-commit(1)\n\t   Check the GPG signature of commits.\n       git-verify-tag(1)\n\t   Check the GPG signature of tags.\n       git-version(1)\n\t   Display version information about Git.\n       git-whatchanged(1)\n\t   Show logs with difference each commit introduces.\n       gitweb(1)\n\t   Git web interface (web frontend to Git repositories).\n   Interacting with Others\n       These commands are to interact with foreign SCM and with other people\n       via patch over e-mail.\n       git-archimport(1)\n\t   Import a GNU Arch repository into Git.\n       git-cvsexportcommit(1)\n\t   Export a single commit to a CVS checkout.\n       git-cvsimport(1)\n\t   Salvage your data out of another SCM people love to hate.\n       git-cvsserver(1)\n\t   A CVS server emulator for Git.\n       git-imap-send(1)\n\t   Send a collection of patches from stdin to an IMAP folder.\n       git-p4(1)\n\t   Import from and submit to Perforce repositories.\n       git-quiltimport(1)\n\t   Applies a quilt patchset onto the current branch.\n       git-request-pull(1)\n\t   Generates a summary of pending changes.\n       git-send-email(1)\n\t   Send a collection of patches as emails.\n       git-svn(1)\n\t   Bidirectional operation between a Subversion repository and Git.\n   Reset, restore and revert\n       There are three commands with similar names: git reset, git restore and\n       git revert.\n       •   git-revert(1) is about making a new commit that reverts the changes\n\t   made by other commits.\n       •   git-restore(1) is about restoring files in the working tree from\n\t   either the index or another commit. This command does not update\n\t   your branch. The command can also be used to restore files in the\n\t   index from another commit.\n       •   git-reset(1) is about updating your branch, moving the tip in order\n\t   to add or remove commits from the branch. This operation changes\n\t   the commit history.\n\t   git reset can also be used to restore the index, overlapping with\n\t   git restore.\nLOW-LEVEL COMMANDS (PLUMBING)\n       Although Git includes its own porcelain layer, its low-level commands\n       are sufficient to support development of alternative porcelains.\n       Developers of such porcelains might start by reading about git-update-\n       index(1) and git-read-tree(1).\n       The interface (input, output, set of options and the semantics) to\n       these low-level commands are meant to be a lot more stable than\n       Porcelain level commands, because these commands are primarily for\n       scripted use. The interface to Porcelain commands on the other hand are\n       subject to change in order to improve the end user experience.\n       The following description divides the low-level commands into commands\n       that manipulate objects (in the repository, index, and working tree),\n       commands that interrogate and compare objects, and commands that move\n       objects and references between repositories.\n   Manipulation commands\n       git-apply(1)\n\t   Apply a patch to files and/or to the index.\n       git-checkout-index(1)\n\t   Copy files from the index to the working tree.\n       git-commit-graph(1)\n\t   Write and verify Git commit-graph files.\n       git-commit-tree(1)\n\t   Create a new commit object.\n       git-hash-object(1)\n\t   Compute object ID and optionally creates a blob from a file.\n       git-index-pack(1)\n\t   Build pack index file for an existing packed archive.\n       git-merge-file(1)\n\t   Run a three-way file merge.\n       git-merge-index(1)\n\t   Run a merge for files needing merging.\n       git-mktag(1)\n\t   Creates a tag object with extra validation.\n       git-mktree(1)\n\t   Build a tree-object from ls-tree formatted text.\n       git-multi-pack-index(1)\n\t   Write and verify multi-pack-indexes.\n       git-pack-objects(1)\n\t   Create a packed archive of objects.\n       git-prune-packed(1)\n\t   Remove extra objects that are already in pack files.\n       git-read-tree(1)\n\t   Reads tree information into the index.\n       git-symbolic-ref(1)\n\t   Read, modify and delete symbolic refs.\n       git-unpack-objects(1)\n\t   Unpack objects from a packed archive.\n       git-update-index(1)\n\t   Register file contents in the working tree to the index.\n       git-update-ref(1)\n\t   Update the object name stored in a ref safely.\n       git-write-tree(1)\n\t   Create a tree object from the current index.\n   Interrogation commands\n       git-cat-file(1)\n\t   Provide content or type and size information for repository\n\t   objects.\n       git-cherry(1)\n\t   Find commits yet to be applied to upstream.\n       git-diff-files(1)\n\t   Compares files in the working tree and the index.\n       git-diff-index(1)\n\t   Compare a tree to the working tree or index.\n       git-diff-tree(1)\n\t   Compares the content and mode of blobs found via two tree objects.\n       git-for-each-ref(1)\n\t   Output information on each ref.\n       git-for-each-repo(1)\n\t   Run a Git command on a list of repositories.\n       git-get-tar-commit-id(1)\n\t   Extract commit ID from an archive created using git-archive.\n       git-ls-files(1)\n\t   Show information about files in the index and the working tree.\n       git-ls-remote(1)\n\t   List references in a remote repository.\n       git-ls-tree(1)\n\t   List the contents of a tree object.\n       git-merge-base(1)\n\t   Find as good common ancestors as possible for a merge.\n       git-name-rev(1)\n\t   Find symbolic names for given revs.\n       git-pack-redundant(1)\n\t   Find redundant pack files.\n       git-rev-list(1)\n\t   Lists commit objects in reverse chronological order.\n       git-rev-parse(1)\n\t   Pick out and massage parameters.\n       git-show-index(1)\n\t   Show packed archive index.\n       git-show-ref(1)\n\t   List references in a local repository.\n       git-unpack-file(1)\n\t   Creates a temporary file with a blob’s contents.\n       git-var(1)\n\t   Show a Git logical variable.\n       git-verify-pack(1)\n\t   Validate packed Git archive files.\n       In general, the interrogate commands do not touch the files in the\n       working tree.\n   Syncing repositories\n       git-daemon(1)\n\t   A really simple server for Git repositories.\n       git-fetch-pack(1)\n\t   Receive missing objects from another repository.\n       git-http-backend(1)\n\t   Server side implementation of Git over HTTP.\n       git-send-pack(1)\n\t   Push objects over Git protocol to another repository.\n       git-update-server-info(1)\n\t   Update auxiliary info file to help dumb servers.\n       The following are helper commands used by the above; end users\n       typically do not use them directly.\n       git-http-fetch(1)\n\t   Download from a remote Git repository via HTTP.\n       git-http-push(1)\n\t   Push objects over HTTP/DAV to another repository.\n       git-receive-pack(1)\n\t   Receive what is pushed into the repository.\n       git-shell(1)\n\t   Restricted login shell for Git-only SSH access.\n       git-upload-archive(1)\n\t   Send archive back to git-archive.\n       git-upload-pack(1)\n\t   Send objects packed back to git-fetch-pack.\n   Internal helper commands\n       These are internal helper commands used by other commands; end users\n       typically do not use them directly.\n       git-check-attr(1)\n\t   Display gitattributes information.\n       git-check-ignore(1)\n\t   Debug gitignore / exclude files.\n       git-check-mailmap(1)\n\t   Show canonical names and email addresses of contacts.\n       git-check-ref-format(1)\n\t   Ensures that a reference name is well formed.\n       git-column(1)\n\t   Display data in columns.\n       git-credential(1)\n\t   Retrieve and store user credentials.\n       git-credential-cache(1)\n\t   Helper to temporarily store passwords in memory.\n       git-credential-store(1)\n\t   Helper to store credentials on disk.\n       git-fmt-merge-msg(1)\n\t   Produce a merge commit message.\n       git-hook(1)\n\t   Run git hooks.\n       git-interpret-trailers(1)\n\t   Add or parse structured information in commit messages.\n       git-mailinfo(1)\n\t   Extracts patch and authorship from a single e-mail message.\n       git-mailsplit(1)\n\t   Simple UNIX mbox splitter program.\n       git-merge-one-file(1)\n\t   The standard helper program to use with git-merge-index.\n       git-patch-id(1)\n\t   Compute unique ID for a patch.\n       git-sh-i18n(1)\n\t   Git’s i18n setup code for shell scripts.\n       git-sh-setup(1)\n\t   Common Git shell script setup code.\n       git-stripspace(1)\n\t   Remove unnecessary whitespace.\n"
    }
  ],
  "relatedCommands": [
    "git-config",
    "git-var",
    "config",
    "rebase",
    "git-prune",
    "git-http-backend",
    "git-checkout",
    "git-diff",
    "git",
    "stupid",
    "content",
    "tracker",
    "version",
    "help",
    "path"
  ],
  "seeAlso": [
    {
      "name": "git-config",
      "section": 1
    },
    {
      "name": "git-var",
      "section": 1
    },
    {
      "name": "config",
      "section": 1
    },
    {
      "name": "rebase",
      "section": 1
    },
    {
      "name": "git-config",
      "section": 1
    },
    {
      "name": "git-config",
      "section": 1
    },
    {
      "name": "git-config",
      "section": 1
    },
    {
      "name": "git-prune",
      "section": 1
    },
    {
      "name": "config",
      "section": 1
    },
    {
      "name": "git-config",
      "section": 1
    },
    {
      "name": "git-http-backend",
      "section": 1
    },
    {
      "name": "git-checkout",
      "section": 1
    },
    {
      "name": "git-diff",
      "section": 1
    }
  ],
  "metadata": {
    "author": "last modified each line of a file."
  },
  "searchContent": "git the stupid content tracker git is a fast scalable distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals git -v --version -h --help -c path -c name value --exec-path path --html-path --man-path --info-path -p --paginate -p --no-pager --no-replace-objects --bare --git-dir path --work-tree path --namespace name --super-prefix path --config-env name envvar command args git stupid content tracker fast scalable distributed revision control unusually rich command provides both high-level operations full access internals -v prints the git suite version that the git program came from this option is internally converted to git version and accepts the same options as the git-version 1 command if --help is also given it takes precedence over --version -h prints the synopsis and a list of the most commonly used commands if the option --all or -a is given then all available commands are printed if a git command is named this option will bring up the manual page for that command other options are available to control how the manual page is displayed see git-help 1 for more information because git --help is converted internally into git help -c run as if git was started in path instead of the current working directory when multiple -c options are given each subsequent non-absolute -c path is interpreted relative to the preceding -c path if path is present but empty e g -c then the current working directory is left unchanged this option affects options that expect path name like --git-dir and --work-tree in that their interpretations of the path names would be made relative to the working directory caused by the -c option for example the following invocations are equivalent git --git-dir a git --work-tree b -c c status git --git-dir c a git --work-tree c b status --config-env like -c name value give configuration variable name a value where envvar is the name of an environment variable from which to retrieve the value unlike -c there is no shortcut for directly setting the value to an empty string instead the environment variable itself must be set to the empty string it is an error if the envvar does not exist in the environment envvar may not contain an equals sign to avoid ambiguity with name containing one this is useful for cases where you want to pass transitory configuration options to git but are doing so on os s where other processes might be able to read your cmdline e g proc self cmdline but not your environ e g proc self environ that behavior is the default on linux but may not be on your system note that this might add security for variables such as http extraheader where the sensitive information is part of the value but not e g url base insteadof where the sensitive information can be part of the key --exec-path path to wherever your core git programs are installed this can also be controlled by setting the git exec path environment variable if no path is given git will print the current setting and then exit --html-path print the path without trailing slash where git s html documentation is installed and exit --man-path print the manpath see man 1 for the man pages for this version of git and exit --info-path print the path where the info files documenting this version of git are installed and exit -p pipe all output into less or if set pager if standard output is a terminal this overrides the pager cmd configuration options see the configuration mechanism section below --git-dir set the path to the repository git directory this can also be controlled by setting the git dir environment variable it can be an absolute path or relative path to current working directory specifying the location of the git directory using this option or git dir environment variable turns off the repository discovery that tries to find a directory with git subdirectory which is how the repository and the top-level of the working tree are discovered and tells git that you are at the top level of the working tree if you are not at the top-level directory of the working tree you should tell git where the top-level of the working tree is with the --work-tree path option or git work tree environment variable if you just want to run git as if it was started in path then use git -c path --work-tree set the path to the working tree it can be an absolute path or a path relative to the current working directory this can also be controlled by setting the git work tree environment variable and the core worktree configuration variable see core worktree in git- config 1 for a more detailed discussion --namespace set the git namespace see gitnamespaces 7 for more details equivalent to setting the git namespace environment variable --super-prefix currently for internal use only set a prefix which gives a path from above a repository down to its root one use is to give submodules context about the superproject that invoked it --bare treat the repository as a bare repository if git dir environment is not set it is set to the current working directory --no-replace-objects do not use replacement refs to replace git objects see git- replace 1 for more information --literal-pathspecs treat pathspecs literally i e no globbing no pathspec magic this is equivalent to setting the git literal pathspecs environment variable to 1 --glob-pathspecs add glob magic to all pathspec this is equivalent to setting the git glob pathspecs environment variable to 1 disabling globbing on individual pathspecs can be done using pathspec magic literal --noglob-pathspecs add literal magic to all pathspec this is equivalent to setting the git noglob pathspecs environment variable to 1 enabling globbing on individual pathspecs can be done using pathspec magic glob --icase-pathspecs add icase magic to all pathspec this is equivalent to setting the git icase pathspecs environment variable to 1 --no-optional-locks do not perform optional operations that require locks this is equivalent to setting the git optional locks to 0 --list-cmds group group list commands by group this is an internal experimental option and may change or be removed in the future supported groups are builtins parseopt builtin commands that use parse-options main all commands in libexec directory others all other commands in path that have git- prefix list- category see categories in command-list txt nohelpers exclude helper commands alias and config retrieve command list from config variable completion commands git commands we divide git into high level porcelain commands and low level plumbing commands high-level commands porcelain we separate the porcelain commands into the main commands and some ancillary user utilities main porcelain commands git-add 1 add file contents to the index git-am 1 apply a series of patches from a mailbox git-archive 1 create an archive of files from a named tree git-bisect 1 use binary search to find the commit that introduced a bug git-branch 1 list create or delete branches git-bundle 1 move objects and refs by archive git-checkout 1 switch branches or restore working tree files git-cherry-pick 1 apply the changes introduced by some existing commits git-citool 1 graphical alternative to git-commit git-clean 1 remove untracked files from the working tree git-clone 1 clone a repository into a new directory git-commit 1 record changes to the repository git-describe 1 give an object a human readable name based on an available ref git-diff 1 show changes between commits commit and working tree etc git-fetch 1 download objects and refs from another repository git-format-patch 1 prepare patches for e-mail submission git-gc 1 cleanup unnecessary files and optimize the local repository git-grep 1 print lines matching a pattern git-gui 1 a portable graphical interface to git git-init 1 create an empty git repository or reinitialize an existing one git-log 1 show commit logs git-maintenance 1 run tasks to optimize git repository data git-merge 1 join two or more development histories together git-mv 1 move or rename a file a directory or a symlink git-notes 1 add or inspect object notes git-pull 1 fetch from and integrate with another repository or a local branch git-push 1 update remote refs along with associated objects git-range-diff 1 compare two commit ranges e g two versions of a branch git-rebase 1 reapply commits on top of another base tip git-reset 1 reset current head to the specified state git-restore 1 restore working tree files git-revert 1 revert some existing commits git-rm 1 remove files from the working tree and from the index git-shortlog 1 summarize git log output git-show 1 show various types of objects git-sparse-checkout 1 reduce your working tree to a subset of tracked files git-stash 1 stash the changes in a dirty working directory away git-status 1 show the working tree status git-submodule 1 initialize update or inspect submodules git-switch 1 switch branches git-tag 1 create list delete or verify a tag object signed with gpg git-worktree 1 manage multiple working trees gitk 1 the git repository browser scalar 1 a tool for managing large git repositories ancillary commands manipulators git-config 1 get and set repository or global options git-fast-export 1 git data exporter git-fast-import 1 backend for fast git data importers git-filter-branch 1 rewrite branches git-mergetool 1 run merge conflict resolution tools to resolve merge conflicts git-pack-refs 1 pack heads and tags for efficient repository access git-prune 1 prune all unreachable objects from the object database git-reflog 1 manage reflog information git-remote 1 manage set of tracked repositories git-repack 1 pack unpacked objects in a repository git-replace 1 create list delete refs to replace objects interrogators git-annotate 1 annotate file lines with commit information git-blame 1 show what revision and author last modified each line of a file git-bugreport 1 collect information for user to file a bug report git-count-objects 1 count unpacked number of objects and their disk consumption git-diagnose 1 generate a zip archive of diagnostic information git-difftool 1 show changes using common diff tools git-fsck 1 verifies the connectivity and validity of the objects in the database git-help 1 display help information about git git-instaweb 1 instantly browse your working repository in gitweb git-merge-tree 1 perform merge without touching index or working tree git-rerere 1 reuse recorded resolution of conflicted merges git-show-branch 1 show branches and their commits git-verify-commit 1 check the gpg signature of commits git-verify-tag 1 check the gpg signature of tags git-version 1 display version information about git git-whatchanged 1 show logs with difference each commit introduces gitweb 1 git web interface web frontend to git repositories interacting with others these commands are to interact with foreign scm and with other people via patch over e-mail git-archimport 1 import a gnu arch repository into git git-cvsexportcommit 1 export a single commit to a cvs checkout git-cvsimport 1 salvage your data out of another scm people love to hate git-cvsserver 1 a cvs server emulator for git git-imap-send 1 send a collection of patches from stdin to an imap folder git-p4 1 import from and submit to perforce repositories git-quiltimport 1 applies a quilt patchset onto the current branch git-request-pull 1 generates a summary of pending changes git-send-email 1 send a collection of patches as emails git-svn 1 bidirectional operation between a subversion repository and git reset restore and revert there are three commands with similar names git reset git restore and git revert git-revert 1 is about making a new commit that reverts the changes made by other commits git-restore 1 is about restoring files in the working tree from either the index or another commit this command does not update your branch the command can also be used to restore files in the index from another commit git-reset 1 is about updating your branch moving the tip in order to add or remove commits from the branch this operation changes the commit history git reset can also be used to restore the index overlapping with git restore low-level commands plumbing although git includes its own porcelain layer its low-level commands are sufficient to support development of alternative porcelains developers of such porcelains might start by reading about git-update- index 1 and git-read-tree 1 the interface input output set of options and the semantics to these low-level commands are meant to be a lot more stable than porcelain level commands because these commands are primarily for scripted use the interface to porcelain commands on the other hand are subject to change in order to improve the end user experience the following description divides the low-level commands into commands that manipulate objects in the repository index and working tree commands that interrogate and compare objects and commands that move objects and references between repositories manipulation commands git-apply 1 apply a patch to files and or to the index git-checkout-index 1 copy files from the index to the working tree git-commit-graph 1 write and verify git commit-graph files git-commit-tree 1 create a new commit object git-hash-object 1 compute object id and optionally creates a blob from a file git-index-pack 1 build pack index file for an existing packed archive git-merge-file 1 run a three-way file merge git-merge-index 1 run a merge for files needing merging git-mktag 1 creates a tag object with extra validation git-mktree 1 build a tree-object from ls-tree formatted text git-multi-pack-index 1 write and verify multi-pack-indexes git-pack-objects 1 create a packed archive of objects git-prune-packed 1 remove extra objects that are already in pack files git-read-tree 1 reads tree information into the index git-symbolic-ref 1 read modify and delete symbolic refs git-unpack-objects 1 unpack objects from a packed archive git-update-index 1 register file contents in the working tree to the index git-update-ref 1 update the object name stored in a ref safely git-write-tree 1 create a tree object from the current index interrogation commands git-cat-file 1 provide content or type and size information for repository objects git-cherry 1 find commits yet to be applied to upstream git-diff-files 1 compares files in the working tree and the index git-diff-index 1 compare a tree to the working tree or index git-diff-tree 1 compares the content and mode of blobs found via two tree objects git-for-each-ref 1 output information on each ref git-for-each-repo 1 run a git command on a list of repositories git-get-tar-commit-id 1 extract commit id from an archive created using git-archive git-ls-files 1 show information about files in the index and the working tree git-ls-remote 1 list references in a remote repository git-ls-tree 1 list the contents of a tree object git-merge-base 1 find as good common ancestors as possible for a merge git-name-rev 1 find symbolic names for given revs git-pack-redundant 1 find redundant pack files git-rev-list 1 lists commit objects in reverse chronological order git-rev-parse 1 pick out and massage parameters git-show-index 1 show packed archive index git-show-ref 1 list references in a local repository git-unpack-file 1 creates a temporary file with a blob s contents git-var 1 show a git logical variable git-verify-pack 1 validate packed git archive files in general the interrogate commands do not touch the files in the working tree syncing repositories git-daemon 1 a really simple server for git repositories git-fetch-pack 1 receive missing objects from another repository git-http-backend 1 server side implementation of git over http git-send-pack 1 push objects over git protocol to another repository git-update-server-info 1 update auxiliary info file to help dumb servers the following are helper commands used by the above end users typically do not use them directly git-http-fetch 1 download from a remote git repository via http git-http-push 1 push objects over http dav to another repository git-receive-pack 1 receive what is pushed into the repository git-shell 1 restricted login shell for git-only ssh access git-upload-archive 1 send archive back to git-archive git-upload-pack 1 send objects packed back to git-fetch-pack internal helper commands these are internal helper commands used by other commands end users typically do not use them directly git-check-attr 1 display gitattributes information git-check-ignore 1 debug gitignore exclude files git-check-mailmap 1 show canonical names and email addresses of contacts git-check-ref-format 1 ensures that a reference name is well formed git-column 1 display data in columns git-credential 1 retrieve and store user credentials git-credential-cache 1 helper to temporarily store passwords in memory git-credential-store 1 helper to store credentials on disk git-fmt-merge-msg 1 produce a merge commit message git-hook 1 run git hooks git-interpret-trailers 1 add or parse structured information in commit messages git-mailinfo 1 extracts patch and authorship from a single e-mail message git-mailsplit 1 simple unix mbox splitter program git-merge-one-file 1 the standard helper program to use with git-merge-index git-patch-id 1 compute unique id for a patch git-sh-i18n 1 git s i18n setup code for shell scripts git-sh-setup 1 common git shell script setup code git-stripspace 1 remove unnecessary whitespace path that have git- prefix list- category see categories in command-list txt nohelpers exclude helper commands alias and name git 2 39 0 12 12 2022 git 1",
  "keywords": [
    "git",
    "stupid",
    "content",
    "tracker",
    "fast,",
    "scalable,",
    "distributed",
    "revision",
    "control",
    "unusually",
    "rich",
    "command",
    "provides",
    "both",
    "high-level",
    "operations",
    "full",
    "access",
    "internals."
  ],
  "complexity": "advanced",
  "hash": "f874b141d47e7bc1",
  "parsedAt": "2025-06-17T19:32:16.333Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": true,
  "hasDiagrams": false
}