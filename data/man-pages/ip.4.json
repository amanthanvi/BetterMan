{
  "name": "ip",
  "section": 4,
  "title": "ip manual page",
  "description": "IP is the transport layer protocol used by the Internet protocol family.",
  "synopsis": "#include <sys/socket.h> #include <netinet/in.h> int socket(AF_INET, SOCK_RAW, proto);",
  "category": "Special Files",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "BSD 4.2 \t\t       November 30, 1993\t\t       BSD 4.2",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     ip – Internet Protocol\n",
        "     #include <sys/socket.h>\n     #include <netinet/in.h>\n\n     int\n     socket(AF_INET, SOCK_RAW, proto);\n",
        "     IP is the transport layer protocol used by the Internet protocol family.\n     Options may be set at the IP level when using higher-level protocols that\n     are based on IP (such as TCP and UDP).  It may also be accessed through a\n     “raw socket” when developing new protocols, or special-purpose\n     applications.\n\n     There are several IP-level setsockopt(2) /getsockopt(2) options.\n     IP_OPTIONS may be used to provide IP options to be transmitted in the IP\n     header of each outgoing packet or to examine the header options on\n     incoming packets.\tIP options may be used with any socket type in the\n     Internet family.  The format of IP options to be sent is that specified\n     by the IP protocol specification (RFC-791), with one exception: the list\n     of addresses for Source Route options must include the first-hop gateway\n     at the beginning of the list of gateways.\tThe first-hop gateway address\n     will be extracted from the option list and the size adjusted accordingly\n     before use.  To disable previously specified options, use a zero-length\n     buffer:\n\n     setsockopt(s, IPPROTO_IP, IP_OPTIONS, NULL, 0);\n\n     IP_TOS and IP_TTL may be used to set the type-of-service and time-to-live\n     fields in the IP header for SOCK_STREAM and SOCK_DGRAM sockets. For\n     example,\n\n     int tos = IPTOS_LOWDELAY;\t     /* see <netinet/in.h> */\n     setsockopt(s, IPPROTO_IP, IP_TOS, &tos, sizeof(tos));\n\n     int ttl = 60;\t\t     /* max = 255 */\n     setsockopt(s, IPPROTO_IP, IP_TTL, &ttl, sizeof(ttl));\n\n     If the IP_RECVDSTADDR option is enabled on a SOCK_DGRAM socket, the\n     recvmsg call will return the destination IP address for a UDP datagram.\n     The msg_control field in the msghdr structure points to a buffer that\n     contains a cmsghdr structure followed by the IP address.  The cmsghdr\n     fields have the following values:\n\n     cmsg_len = CMSG_LEN(sizeof(struct in_addr))\n     cmsg_level = IPPROTO_IP\n     cmsg_type = IP_RECVDSTADDR\n\n     If the IP_RECVTOS option is enabled on a SOCK_DGRAM or SOCK_RAW socket,\n     the recvmsg call will return the TOS (type of service) field of the IP\n     header.  The msg_control field in the msghdr structure points to a buffer\n     that contains a cmsghdr structure followed by the TOS.  The cmsghdr\n     fields have the following values:\n\n     cmsg_len = CMSG_LEN(sizeof(u_char))\n     cmsg_level = IPPROTO_IP\n     cmsg_type = IP_RECVTOS\n",
        "     IP multicasting is supported only on AF_INET sockets of type SOCK_DGRAM\n     and SOCK_RAW, and only on networks where the interface driver supports\n     multicasting.\n\n     The IP_MULTICAST_TTL option changes the time-to-live (TTL) for outgoing\n     multicast datagrams in order to control the scope of the multicasts:\n\n     u_char ttl;     /* range: 0 to 255, default = 1 */\n     setsockopt(s, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, sizeof(ttl));\n\n     Datagrams with a TTL of 1 are not forwarded beyond the local network.\n     Multicast datagrams with a TTL of 0 will not be transmitted on any\n     network, but may be delivered locally if the sending host belongs to the\n     destination group and if multicast loopback has not been disabled on the\n     sending socket (see below).  Multicast datagrams with TTL greater than 1\n     may be forwarded to other networks if a multicast router is attached to\n     the local network.\n\n     For hosts with multiple interfaces, each multicast transmission is sent\n     from the primary network interface.  The IP_MULTICAST_IF option overrides\n     the default for subsequent transmissions from a given socket:\n\n     struct in_addr addr;\n     setsockopt(s, IPPROTO_IP, IP_MULTICAST_IF, &addr, sizeof(addr));\n\n     where \"addr\" is the local IP address of the desired interface or\n     INADDR_ANY to specify the default interface.  An interface's local IP\n     address and multicast capability can be obtained via the SIOCGIFCONF and\n     SIOCGIFFLAGS ioctls.  Normal applications should not need to use this\n     option.\n\n     If a multicast datagram is sent to a group to which the sending host\n     itself belongs (on the outgoing interface), a copy of the datagram is, by\n     default, looped back by the IP layer for local delivery.  The\n     IP_MULTICAST_LOOP option gives the sender explicit control over whether\n     or not subsequent datagrams are looped back:\n\n     u_char loop;    /* 0 = disable, 1 = enable (default) */\n     setsockopt(s, IPPROTO_IP, IP_MULTICAST_LOOP, &loop, sizeof(loop));\n\n     This option improves performance for applications that may have no more\n     than one instance on a single host (such as a router demon), by\n     eliminating the overhead of receiving their own transmissions.  It should\n     generally not be used by applications for which there may be more than\n     one instance on a single host (such as a conferencing program) or for\n     which the sender does not belong to the destination group (such as a time\n     querying program).\n\n     A multicast datagram sent with an initial TTL greater than 1 may be\n     delivered to the sending host on a different interface from that on which\n     it was sent, if the host belongs to the destination group on that other\n     interface.  The loopback control option has no effect on such delivery.\n\n     A host must become a member of a multicast group before it can receive\n     datagrams sent to the group.  To join a multicast group, use the\n     IP_ADD_MEMBERSHIP option:\n\n     struct ip_mreq mreq;\n     setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, &mreq, sizeof(mreq));\n\n     where mreq is the following structure:\n\n     struct ip_mreq {",
        "     }\n\n     imr_interface should be INADDR_ANY to choose the default multicast\n     interface, or the IP address of a particular multicast-capable interface\n     if the host is multihomed.  Membership is associated with a single\n     interface; programs running on multihomed hosts may need to join the same\n     group on more than one interface.\tUp to IP_MAX_MEMBERSHIPS (currently\n     20) memberships may be added on a single socket.\n\n     To drop a membership, use:\n\n     struct ip_mreq mreq;\n     setsockopt(s, IPPROTO_IP, IP_DROP_MEMBERSHIP, &mreq, sizeof(mreq));\n\n     where mreq contains the same values as used to add the membership.\n     Memberships are dropped when the socket is closed or the process exits.\n",
        "     Raw IP sockets are connectionless, and are normally used with the sendto\n     and recvfrom calls, though the connect(2) call may also be used to fix\n     the destination for future packets (in which case the read(2) or recv(2)\n     and write(2) or send(2) system calls may be used).\n\n     If proto is 0, the default protocol IPPROTO_RAW is used for outgoing\n     packets, and only incoming packets destined for that protocol are\n     received.\tIf proto is non-zero, that protocol number will be used on\n     outgoing packets and to filter incoming packets.\n\n     Outgoing packets automatically have an IP header prepended to them (based\n     on the destination address and the protocol number the socket is created\n     with), unless the IP_HDRINCL option has been set.\tIncoming packets are\n     received with IP header and options intact.\n\n     IP_HDRINCL indicates the complete IP header is included with the data and\n     may be used only with the SOCK_RAW type.\n\n     #include <netinet/ip.h>\n\n     int hincl = 1;\t\t     /* 1 = on, 0 = off */\n     setsockopt(s, IPPROTO_IP, IP_HDRINCL, &hincl, sizeof(hincl));\n\n     Unlike previous BSD releases, the program must set all the fields of the\n     IP header, including the following:\n\n     ip->ip_v = IPVERSION;\n     ip->ip_hl = hlen >> 2;\n     ip->ip_id = 0;  /* 0 means kernel set appropriate value */\n     ip->ip_off = offset;\n     ip->ip_len = len;\n\n     Note that the ip_off and ip_len fields are in host byte order.\n\n     If the header source address is set to INADDR_ANY, the kernel will choose\n     an appropriate address.\n",
        "     A socket operation may fail with one of the following errors returned:\n\n     [EISCONN]\t      when trying to establish a connection on a socket which\n\t\t      already has one, or when trying to send a datagram with\n\t\t      the destination address specified and the socket is\n\t\t      already connected;\n\n     [ENOTCONN]       when trying to send a datagram, but no destination\n\t\t      address is specified, and the socket hasn't been\n\t\t      connected;\n\n     [ENOBUFS]\t      when the system runs out of memory for an internal data\n\t\t      structure;\n\n     [EADDRNOTAVAIL]  when an attempt is made to create a socket with a\n\t\t      network address for which no network interface exists.\n\n     [EACESS]\t      when an attempt is made to create a raw IP socket by a\n\t\t      non-privileged process.\n\n     The following errors specific to IP may occur when setting or getting IP\n     options:\n\n     [EINVAL]\t      An unknown socket option name was given.\n\n     [EINVAL]\t      The IP option field was improperly formed; an option\n\t\t      field was shorter than the minimum value or longer than\n\t\t      the option buffer provided.\n",
        "     getsockopt(2), recv(2), send(2), icmp(4), inet(4), intro(4)\n",
        "     The ip protocol appeared in 4.2BSD.\n"
      ]
    }
  ],
  "flags": [],
  "examples": [],
  "relatedCommands": [
    "getsockopt",
    "recv",
    "send",
    "icmp",
    "inet",
    "intro",
    "include",
    "sys",
    "socket",
    "netinet",
    "int",
    "proto",
    "transport",
    "layer",
    "protocol"
  ],
  "seeAlso": [
    {
      "name": "getsockopt",
      "section": 2
    },
    {
      "name": "recv",
      "section": 2
    },
    {
      "name": "send",
      "section": 2
    },
    {
      "name": "icmp",
      "section": 4
    },
    {
      "name": "inet",
      "section": 4
    },
    {
      "name": "intro",
      "section": 4
    }
  ],
  "metadata": {},
  "searchContent": "ip ip manual page ip is the transport layer protocol used by the internet protocol family include sys socket h include netinet in h int socket af inet sock raw proto ip manual page transport layer protocol used internet family name bsd 4 2 november 30 1993 bsd 4 2",
  "keywords": [
    "ip",
    "manual",
    "page",
    "transport",
    "layer",
    "protocol",
    "used",
    "internet",
    "family."
  ],
  "complexity": "basic",
  "hash": "d64bfc186c905234",
  "parsedAt": "2025-06-17T19:32:10.986Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": false,
  "hasDiagrams": false
}