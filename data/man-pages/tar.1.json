{
  "name": "tar",
  "section": 1,
  "title": "tar manual page",
  "description": "tar creates and manipulates streaming archive files.",
  "synopsis": "tar [bundled-flags ⟨args⟩] [⟨file⟩ | ⟨pattern⟩ ...] tar {-c} [options] [files | directories] tar {-r | -u} -f archive-file [options] [files | directories] tar {-t | -x} [options] [patterns]",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "macOS 15.5\t\t\tApril 23, 2024\t\t\t    macOS 15.5",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     tar – manipulate tape archives\n",
        "     tar [bundled-flags ⟨args⟩] [⟨file⟩ | ⟨pattern⟩ ...]\n     tar {-c} [options] [files | directories]\n     tar {-r | -u} -f archive-file [options] [files | directories]\n     tar {-t | -x} [options] [patterns]\n",
        "     tar creates and manipulates streaming archive files.  This implementation\n     can extract from tar, pax, cpio, zip, jar, ar, xar, rpm, 7-zip, and ISO\n     9660 cdrom images and can create tar, pax, cpio, ar, zip, 7-zip, and shar\n     archives.\n\n     The first synopsis form shows a “bundled” option word.  This usage is\n     provided for compatibility with historical implementations.  See\n     COMPATIBILITY below for details.\n\n     The other synopsis forms show the preferred usage.  The first option to\n     tar is a mode indicator from the following list:\n     -c      Create a new archive containing the specified items.  The long\n\t     option form is --create.\n     -r      Like -c, but new entries are appended to the archive.  Note that\n\t     this only works on uncompressed archives stored in regular files.\n\t     The -f option is required.  The long option form is --append.\n     -t      List archive contents to stdout.  The long option form is --list.\n     -u      Like -r, but new entries are added only if they have a\n\t     modification date newer than the corresponding entry in the\n\t     archive.  Note that this only works on uncompressed archives\n\t     stored in regular files.  The -f option is required.  The long\n\t     form is --update.\n     -x      Extract to disk from the archive.\tIf a file with the same name\n\t     appears more than once in the archive, each copy will be\n\t     extracted, with later copies overwriting (replacing) earlier\n\t     copies.  The long option form is --extract.\n\n     In -c, -r, or -u mode, each specified file or directory is added to the\n     archive in the order specified on the command line.  By default, the\n     contents of each directory are also archived.\n\n     In extract or list mode, the entire command line is read and parsed\n     before the archive is opened.  The pathnames or patterns on the command\n     line indicate which items in the archive should be processed.  Patterns\n     are shell-style globbing patterns as documented in tcsh(1).\n",
        "     Unless specifically stated otherwise, options are applicable in all\n     operating modes.\n\n     @archive\n\t     (c and r modes only) The specified archive is opened and the\n\t     entries in it will be appended to the current archive.  As a\n\t     simple example,\n\t\t   tar -c -f - newfile @original.tar\n\t     writes a new archive to standard output containing a file newfile\n\t     and all of the entries from original.tar.\tIn contrast,\n\t\t   tar -c -f - newfile original.tar\n\t     creates a new archive with only two entries.  Similarly,\n\t\t   tar -czf - --format pax @-\n\t     reads an archive from standard input (whose format will be\n\t     determined automatically) and converts it into a gzip-compressed\n\t     pax-format archive on stdout.  In this way, tar can be used to\n\t     convert archives from one format to another.\n\n     -a, --auto-compress\n\t     (c mode only) Use the archive suffix to decide a set of the\n\t     format and the compressions.  As a simple example,\n\t\t   tar -a -cf archive.tgz source.c source.h\n\t     creates a new archive with restricted pax format and gzip\n\t     compression,\n\t\t   tar -a -cf archive.tar.bz2.uu source.c source.h\n\t     creates a new archive with restricted pax format and bzip2\n\t     compression and uuencode compression,\n\t\t   tar -a -cf archive.zip source.c source.h\n\t     creates a new archive with zip format,\n\t\t   tar -a -jcf archive.tgz source.c source.h\n\t     ignores the “-j” option, and creates a new archive with\n\t     restricted pax format and gzip compression,\n\t\t   tar -a -jcf archive.xxx source.c source.h\n\t     if it is unknown suffix or no suffix, creates a new archive with\n\t     restricted pax format and bzip2 compression.\n\n     --acls  (c, r, u, x modes only) Archive or extract POSIX.1e or NFSv4\n\t     ACLs.  This is the reverse of --no-acls and the default behavior\n\t     in c, r, and u modes (except on Mac OS X) or if tar is run in x\n\t     mode as root.  On Mac OS X this option translates extended ACLs\n\t     to NFSv4 ACLs.  To store extended ACLs the --mac-metadata option\n\t     is preferred.\n\n     -B, --read-full-blocks\n\t     Ignored for compatibility with other tar(1) implementations.\n\n     -b blocksize, --block-size blocksize\n\t     Specify the block size, in 512-byte records, for tape drive I/O.\n\t     As a rule, this argument is only needed when reading from or\n\t     writing to tape drives, and usually not even then as the default\n\t     block size of 20 records (10240 bytes) is very common.\n\n     -C directory, --cd directory, --directory directory\n\t     In c and r mode, this changes the directory before adding the\n\t     following files.  In x mode, change directories after opening the\n\t     archive but before extracting entries from the archive.\n\n     --chroot\n\t     (x mode only) chroot() to the current directory after processing\n\t     any -C options and before extracting any files.\n\n     --clear-nochange-fflags\n\t     (x mode only) Before removing file system objects to replace\n\t     them, clear platform-specific file attributes or file flags that\n\t     might prevent removal.\n\n     --exclude pattern\n\t     Do not process files or directories that match the specified\n\t     pattern.  Note that exclusions take precedence over patterns or\n\t     filenames specified on the command line.\n\n     --exclude-vcs\n\t     Do not process files or directories internally used by the\n\t     version control systems ‘Arch’, ‘Bazaar’, ‘CVS’, ‘Darcs’,\n\t     ‘Mercurial’, ‘RCS’, ‘SCCS’, ‘SVN’ and ‘git’.\n\n     --fflags\n\t     (c, r, u, x modes only) Archive or extract platform-specific file\n\t     attributes or file flags.\tThis is the reverse of --no-fflags and\n\t     the default behavior in c, r, and u modes or if tar is run in x\n\t     mode as root.\n\n     --format format\n\t     (c, r, u mode only) Use the specified format for the created\n\t     archive.  Supported formats include “cpio”, “pax”, “shar”, and\n\t     “ustar”.  Other formats may also be supported; see\n\t     libarchive-formats(5) for more information about currently-\n\t     supported formats.  In r and u modes, when extending an existing\n\t     archive, the format specified here must be compatible with the\n\t     format of the existing archive on disk.\n\n     -f file, --file file\n\t     Read the archive from or write the archive to the specified file.\n\t     The filename can be - for standard input or standard output.  The\n\t     default varies by system; on FreeBSD, the default is /dev/sa0; on\n\t     Linux, the default is /dev/st0.\n\n     --gid id\n\t     Use the provided group id number.\tOn extract, this overrides the\n\t     group id in the archive; the group name in the archive will be\n\t     ignored.  On create, this overrides the group id read from disk;\n\t     if --gname is not also specified, the group name will be set to\n\t     match the group id.\n\n     --gname name\n\t     Use the provided group name.  On extract, this overrides the\n\t     group name in the archive; if the provided group name does not\n\t     exist on the system, the group id (from the archive or from the\n\t     --gid option) will be used instead.  On create, this sets the\n\t     group name that will be stored in the archive; the name will not\n\t     be verified against the system group database.\n\n     --group name[:gid]\n\t     Use the provided group, if gid is not provided, name can be\n\t     either a group name or numeric id.  See the --gname option for\n\t     details.\n\n     -H      (c and r modes only) Symbolic links named on the command line\n\t     will be followed; the target of the link will be archived, not\n\t     the link itself.\n\n     -h      (c and r modes only) Synonym for -L.\n\n     -I      Synonym for -T.\n\n     --help  Show usage.\n\n     --hfsCompression\n\t     (x mode only) Mac OS X specific (v10.6 or later). Compress\n\t     extracted regular files with HFS+ compression.\n\n     --ignore-zeros\n\t     An alias of --options read_concatenated_archives for\n\t     compatibility with GNU tar.\n\n     --include pattern\n\t     Process only files or directories that match the specified\n\t     pattern.  Note that exclusions specified with --exclude take\n\t     precedence over inclusions.  If no inclusions are explicitly\n\t     specified, all entries are processed by default.  The --include\n\t     option is especially useful when filtering archives.  For\n\t     example, the command\n\t\t   tar -c -f new.tar --include='*foo*' @old.tgz\n\t     creates a new archive new.tar containing only the entries from\n\t     old.tgz containing the string ‘foo’.\n\n     -J, --xz\n\t     (c mode only) Compress the resulting archive with xz(1).  In\n\t     extract or list modes, this option is ignored.  Note that this\n\t     tar implementation recognizes XZ compression automatically when\n\t     reading archives.\n\n     -j, --bzip, --bzip2, --bunzip2\n\t     (c mode only) Compress the resulting archive with bzip2(1).  In\n\t     extract or list modes, this option is ignored.  Note that this\n\t     tar implementation recognizes bzip2 compression automatically\n\t     when reading archives.\n\n     -k, --keep-old-files\n\t     (x mode only) Do not overwrite existing files.  In particular, if\n\t     a file appears more than once in an archive, later copies will\n\t     not overwrite earlier copies.\n\n     --keep-newer-files\n\t     (x mode only) Do not overwrite existing files that are newer than\n\t     the versions appearing in the archive being extracted.\n\n     -L, --dereference\n\t     (c and r modes only) All symbolic links will be followed.\n\t     Normally, symbolic links are archived as such.  With this option,\n\t     the target of the link will be archived instead.\n\n     -l, --check-links\n\t     (c and r modes only) Issue a warning message unless all links to\n\t     each file are archived.\n\n     --lrzip\n\t     (c mode only) Compress the resulting archive with lrzip(1).  In\n\t     extract or list modes, this option is ignored.  Note that this\n\t     tar implementation recognizes lrzip compression automatically\n\t     when reading archives.\n\n     --lz4   (c mode only) Compress the archive with lz4-compatible\n\t     compression before writing it.  In extract or list modes, this\n\t     option is ignored.  Note that this tar implementation recognizes\n\t     lz4 compression automatically when reading archives.\n\n     --zstd  (c mode only) Compress the archive with zstd-compatible\n\t     compression before writing it.  In extract or list modes, this\n\t     option is ignored.  Note that this tar implementation recognizes\n\t     zstd compression automatically when reading archives.\n\n     --lzma  (c mode only) Compress the resulting archive with the original\n\t     LZMA algorithm.  In extract or list modes, this option is\n\t     ignored.  Use of this option is discouraged and new archives\n\t     should be created with --xz instead.  Note that this tar\n\t     implementation recognizes LZMA compression automatically when\n\t     reading archives.\n\n     --lzop  (c mode only) Compress the resulting archive with lzop(1).  In\n\t     extract or list modes, this option is ignored.  Note that this\n\t     tar implementation recognizes LZO compression automatically when\n\t     reading archives.\n\n     -m, --modification-time\n\t     (x mode only) Do not extract modification time.  By default, the\n\t     modification time is set to the time stored in the archive.\n\n     --mac-metadata\n\t     (c, r, u and x mode only) Mac OS X specific.  Archive or extract\n\t     extended ACLs and extended file attributes using copyfile(3) in\n\t     AppleDouble format.  This is the reverse of --no-mac-metadata.\n\t     and the default behavior in c, r, and u modes or if tar is run in\n\t     x mode as root.  Currently supported only for pax formats\n\t     (including \"pax restricted\", the default tar format for bsdtar.)\n\n     -n, --norecurse, --no-recursion\n\t     Do not operate recursively on the content of directories.\n\n     --newer date\n\t     (c, r, u modes only) Only include files and directories newer\n\t     than the specified date.  This compares ctime entries.\n\n     --newer-mtime date\n\t     (c, r, u modes only) Like --newer, except it compares mtime\n\t     entries instead of ctime entries.\n\n     --newer-than file\n\t     (c, r, u modes only) Only include files and directories newer\n\t     than the specified file.  This compares ctime entries.\n\n     --newer-mtime-than file\n\t     (c, r, u modes only) Like --newer-than, except it compares mtime\n\t     entries instead of ctime entries.\n\n     --nodump\n\t     (c and r modes only) Honor the nodump file flag by skipping this\n\t     file.\n\n     --nopreserveHFSCompression\n\t     (x mode only) Mac OS X specific (v10.6 or later). Do not compress\n\t     extracted regular files which were compressed with HFS+\n\t     compression before archived.  By default, compress the regular\n\t     files again with HFS+ compression.\n\n     --null  (use with -I or -T) Filenames or patterns are separated by null\n\t     characters, not by newlines.  This is often used to read\n\t     filenames output by the -print0 option to find(1).\n\n     --no-acls\n\t     (c, r, u, x modes only) Do not archive or extract POSIX.1e or\n\t     NFSv4 ACLs.  This is the reverse of --acls and the default\n\t     behavior if tar is run as non-root in x mode (on Mac OS X as any\n\t     user in c, r, u and x modes).\n\n     --no-fflags\n\t     (c, r, u, x modes only) Do not archive or extract file attributes\n\t     or file flags.  This is the reverse of --fflags and the default\n\t     behavior if tar is run as non-root in x mode.\n\n     --no-mac-metadata\n\t     (x mode only) Mac OS X specific.  Do not archive or extract ACLs\n\t     and extended file attributes using copyfile(3) in AppleDouble\n\t     format.  This is the reverse of --mac-metadata.  and the default\n\t     behavior if tar is run as non-root in x mode.\n\n     --no-read-sparse\n\t     (c, r, u modes only) Do not read sparse file information from\n\t     disk.  This is the reverse of --read-sparse.\n\n     --no-safe-writes\n\t     (x mode only) Do not create temporary files and use rename(2) to\n\t     replace the original ones.  This is the reverse of --safe-writes.\n\n     --no-same-owner\n\t     (x mode only) Do not extract owner and group IDs.\tThis is the\n\t     reverse of --same-owner and the default behavior if tar is run as\n\t     non-root.\n\n     --no-same-permissions\n\t     (x mode only) Do not extract full permissions (SGID, SUID, sticky\n\t     bit, file attributes or file flags, extended file attributes and\n\t     ACLs).  This is the reverse of -p and the default behavior if tar\n\t     is run as non-root.\n\n     --no-xattrs\n\t     (c, r, u, x modes only) Do not archive or extract extended file\n\t     attributes.  This is the reverse of --xattrs and the default\n\t     behavior if tar is run as non-root in x mode.\n\n     --numeric-owner\n\t     This is equivalent to --uname \"\" --gname \"\".  On extract, it\n\t     causes user and group names in the archive to be ignored in favor\n\t     of the numeric user and group ids.  On create, it causes user and\n\t     group names to not be stored in the archive.\n\n     -O, --to-stdout\n\t     (x, t modes only) In extract (-x) mode, files will be written to\n\t     standard out rather than being extracted to disk.\tIn list (-t)\n\t     mode, the file listing will be written to stderr rather than the\n\t     usual stdout.\n\n     -o      (x mode) Use the user and group of the user running the program\n\t     rather than those specified in the archive.  Note that this has\n\t     no significance unless -p is specified, and the program is being\n\t     run by the root user.  In this case, the file modes and flags\n\t     from the archive will be restored, but ACLs or owner information\n\t     in the archive will be discarded.\n\n     -o      (c, r, u mode) A synonym for --format ustar\n\n     --older date\n\t     (c, r, u modes only) Only include files and directories older\n\t     than the specified date.  This compares ctime entries.\n\n     --older-mtime date\n\t     (c, r, u modes only) Like --older, except it compares mtime\n\t     entries instead of ctime entries.\n\n     --older-than file\n\t     (c, r, u modes only) Only include files and directories older\n\t     than the specified file.  This compares ctime entries.\n\n     --older-mtime-than file\n\t     (c, r, u modes only) Like --older-than, except it compares mtime\n\t     entries instead of ctime entries.\n\n     --one-file-system\n\t     (c, r, and u modes) Do not cross mount points.\n\n     --options options\n\t     Select optional behaviors for particular modules.\tThe argument\n\t     is a text string containing comma-separated keywords and values.\n\t     These are passed to the modules that handle particular formats to\n\t     control how those formats will behave.  Each option has one of\n\t     the following forms:\n\t     key=value\n\t\t     The key will be set to the specified value in every\n\t\t     module that supports it.  Modules that do not support\n\t\t     this key will ignore it.\n\t     key     The key will be enabled in every module that supports it.\n\t\t     This is equivalent to key=1.\n\t     !key    The key will be disabled in every module that supports\n\t\t     it.\n\t     module:key=value, module:key, module:!key\n\t\t     As above, but the corresponding key and value will be\n\t\t     provided only to modules whose name matches module.\n\n\t     The complete list of supported modules and keys for create and\n\t     append modes is in archive_write_set_options(3) and for extract\n\t     and list modes in archive_read_set_options(3).\n\n\t     Examples of supported options:\n\t     iso9660:joliet\n\t\t     Support Joliet extensions.  This is enabled by default,\n\t\t     use !joliet or iso9660:!joliet to disable.\n\t     iso9660:rockridge\n\t\t     Support Rock Ridge extensions.  This is enabled by\n\t\t     default, use !rockridge or iso9660:!rockridge to disable.\n\t     gzip:compression-level\n\t\t     A decimal integer from 1 to 9 specifying the gzip\n\t\t     compression level.\n\t     gzip:timestamp\n\t\t     Store timestamp.  This is enabled by default, use\n\t\t     !timestamp or gzip:!timestamp to disable.\n\t     lrzip:compression=type\n\t\t     Use type as compression method.  Supported values are\n\t\t     bzip2, gzip, lzo (ultra fast), and zpaq (best, extremely\n\t\t     slow).\n\t     lrzip:compression-level\n\t\t     A decimal integer from 1 to 9 specifying the lrzip\n\t\t     compression level.\n\t     lz4:compression-level\n\t\t     A decimal integer from 1 to 9 specifying the lzop\n\t\t     compression level.\n\t     lz4:stream-checksum\n\t\t     Enable stream checksum.  This is by default, use\n\t\t     lz4:!stream-checksum to disable.\n\t     lz4:block-checksum\n\t\t     Enable block checksum (Disabled by default).\n\t     lz4:block-size\n\t\t     A decimal integer from 4 to 7 specifying the lz4\n\t\t     compression block size (7 is set by default).\n\t     lz4:block-dependence\n\t\t     Use the previous block of the block being compressed for\n\t\t     a compression dictionary to improve compression ratio.\n\t     zstd:compression-level=N\n\t\t     A decimal integer specifying the zstd compression level.\n\t\t     Supported values depend on the library version, common\n\t\t     values are from 1 to 22.\n\t     zstd:threads=N\n\t\t     Specify the number of worker threads to use, or 0 to use\n\t\t     as many threads as there are CPU cores in the system.\n\t     zstd:frame-per-file\n\t\t     Start a new compression frame at the beginning of each\n\t\t     file in the archive.\n\t     zstd:min-frame-in=N\n\t\t     In combination with zstd:frame-per-file, do not start a\n\t\t     new compression frame unless the uncompressed size of the\n\t\t     current frame is at least N bytes.  The number may be\n\t\t     followed by k / kB, M / MB, or G / GB to indicate\n\t\t     kilobytes, megabytes or gigabytes respectively.\n\t     zstd:min-frame-out=N, zstd:min-frame-size=N\n\t\t     In combination with zstd:frame-per-file, do not start a\n\t\t     new compression frame unless the compressed size of the\n\t\t     current frame is at least N bytes.  The number may be\n\t\t     followed by k / kB, M / MB, or G / GB to indicate\n\t\t     kilobytes, megabytes or gigabytes respectively.\n\t     zstd:max-frame-in=N, zstd:max-frame-size=N\n\t\t     Start a new compression frame as soon as possible after\n\t\t     the uncompressed size of the current frame exceeds N\n\t\t     bytes.  The number may be followed by k / kB, M / MB, or\n\t\t     G / GB to indicate kilobytes, megabytes or gigabytes\n\t\t     respectively.  Values less than 1,024 will be rejected.\n\t     zstd:max-frame-out=N\n\t\t     Start a new compression frame as soon as possible after\n\t\t     the compressed size of the current frame exceeds N bytes.\n\t\t     The number may be followed by k / kB, M / MB, or G / GB\n\t\t     to indicate kilobytes, megabytes or gigabytes\n\t\t     respectively.  Values less than 1,024 will be rejected.\n\t     lzop:compression-level\n\t\t     A decimal integer from 1 to 9 specifying the lzop\n\t\t     compression level.\n\t     xz:compression-level\n\t\t     A decimal integer from 0 to 9 specifying the xz\n\t\t     compression level.\n\t     xz:threads\n\t\t     Specify the number of worker threads to use.  Setting\n\t\t     threads to a special value 0 makes xz(1) use as many\n\t\t     threads as there are CPU cores on the system.\n\t     mtree:keyword\n\t\t     The mtree writer module allows you to specify which mtree\n\t\t     keywords will be included in the output.  Supported\n\t\t     keywords include: cksum, device, flags, gid, gname,\n\t\t     indent, link, md5, mode, nlink, rmd160, sha1, sha256,\n\t\t     sha384, sha512, size, time, uid, uname.  The default is\n\t\t     equivalent to: “device, flags, gid, gname, link, mode,\n\t\t     nlink, size, time, type, uid, uname”.\n\t     mtree:all\n\t\t     Enables all of the above keywords.  You can also use\n\t\t     mtree:!all to disable all keywords.\n\t     mtree:use-set\n\t\t     Enable generation of /set lines in the output.\n\t     mtree:indent\n\t\t     Produce human-readable output by indenting options and\n\t\t     splitting lines to fit into 80 columns.\n\t     zip:compression=type\n\t\t     Use type as compression method.  Supported values are\n\t\t     store (uncompressed) and deflate (gzip algorithm).\n\t     zip:encryption\n\t\t     Enable encryption using traditional zip encryption.\n\t     zip:encryption=type\n\t\t     Use type as encryption type.  Supported values are\n\t\t     zipcrypt (traditional zip encryption), aes128 (WinZip\n\t\t     AES-128 encryption) and aes256 (WinZip AES-256\n\t\t     encryption).\n\t     read_concatenated_archives\n\t\t     Ignore zeroed blocks in the archive, which occurs when\n\t\t     multiple tar archives have been concatenated together.\n\t\t     Without this option, only the contents of the first\n\t\t     concatenated archive would be read.  This option is\n\t\t     comparable to the -i, --ignore-zeros option of GNU tar.\n\t     If a provided option is not supported by any module, that is a\n\t     fatal error.\n\n     -P, --absolute-paths\n\t     Preserve pathnames.  By default, absolute pathnames (those that\n\t     begin with a / character) have the leading slash removed both\n\t     when creating archives and extracting from them.  Also, tar will\n\t     refuse to extract archive entries whose pathnames contain .. or\n\t     whose target directory would be altered by a symlink.  This\n\t     option suppresses these behaviors.\n\n     -p, --insecure, --preserve-permissions\n\t     (x mode only) Preserve file permissions.  Attempt to restore the\n\t     full permissions, including file modes, file attributes or file\n\t     flags, extended file attributes and ACLs, if available, for each\n\t     item extracted from the archive.  This is the reverse of\n\t     --no-same-permissions and the default if tar is being run as\n\t     root.  It can be partially overridden by also specifying\n\t     --no-acls, --no-fflags, --no-mac-metadata or --no-xattrs.\n\n     --passphrase passphrase\n\t     The passphrase is used to extract or create an encrypted archive.\n\t     Currently, zip is the only supported format that supports\n\t     encryption.  You shouldn't use this option unless you realize how\n\t     insecure use of this option is.\n\n     --posix\n\t     (c, r, u mode only) Synonym for --format pax\n\n     -q, --fast-read\n\t     (x and t mode only) Extract or list only the first archive entry\n\t     that matches each pattern or filename operand.  Exit as soon as\n\t     each specified pattern or filename has been matched.  By default,\n\t     the archive is always read to the very end, since there can be\n\t     multiple entries with the same name and, by convention, later\n\t     entries overwrite earlier entries.  This option is provided as a\n\t     performance optimization.\n\n     --read-sparse\n\t     (c, r, u modes only) Read sparse file information from disk.\n\t     This is the reverse of --no-read-sparse and the default behavior.\n\n     -S      (x mode only) Extract files as sparse files.  For every block on\n\t     disk, check first if it contains only NULL bytes and seek over it\n\t     otherwise.  This works similar to the conv=sparse option of dd.\n\n     -s pattern\n\t     Modify file or archive member names according to pattern.\tThe\n\t     pattern has the format /old/new/[bghHprRsS] where old is a basic\n\t     regular expression, new is the replacement string of the matched\n\t     part, and the optional trailing letters modify how the\n\t     replacement is handled.  If old is not matched, the pattern is\n\t     skipped.  Within new, ~ is substituted with the match, \\1 to \\9\n\t     with the content of the corresponding captured group.  The\n\t     optional trailing g specifies that matching should continue after\n\t     the matched part and stop on the first unmatched pattern.\tThe\n\t     optional trailing s specifies that the pattern applies to the\n\t     value of symbolic links.  The optional trailing p specifies that\n\t     after a successful substitution the original path name and the\n\t     new path name should be printed to standard error.  The optional\n\t     trailing b specifies that the substitution should be matched from\n\t     the beginning of the string rather than from right after the\n\t     position at which the previous matching substitution ended.\n\t     Optional trailing H, R, or S characters suppress substitutions\n\t     for hardlink targets, regular filenames, or symlink targets,\n\t     respectively.  Optional trailing h, r, or s characters enable\n\t     substitutions for hardlink targets, regular filenames, or symlink\n\t     targets, respectively.  The default is hrs which applies\n\t     substitutions to all names.  In particular, it is never necessary\n\t     to specify h, r, or s.\n\n     --safe-writes\n\t     (x mode only) Extract files atomically.  By default tar unlinks\n\t     the original file with the same name as the extracted file (if it\n\t     exists), and then creates it immediately under the same name and\n\t     writes to it.  For a short period of time, applications trying to\n\t     access the file might not find it, or see incomplete results.  If\n\t     --safe-writes is enabled, tar first creates a unique temporary\n\t     file, then writes the new contents to the temporary file, and\n\t     finally renames the temporary file to its final name atomically\n\t     using rename(2).  This guarantees that an application accessing\n\t     the file, will either see the old contents or the new contents at\n\t     all times.\n\n     --same-owner\n\t     (x mode only) Extract owner and group IDs.  This is the reverse\n\t     of --no-same-owner and the default behavior if tar is run as\n\t     root.\n\n     --strip-components count\n\t     Remove the specified number of leading path elements.  Pathnames\n\t     with fewer elements will be silently skipped.  Note that the\n\t     pathname is edited after checking inclusion/exclusion patterns\n\t     but before security checks.\n\n     -T filename, --files-from filename\n\t     In x or t mode, tar will read the list of names to be extracted\n\t     from filename.  In c mode, tar will read names to be archived\n\t     from filename.  The special name “-C” on a line by itself will\n\t     cause the current directory to be changed to the directory\n\t     specified on the following line.  Names are terminated by\n\t     newlines unless --null is specified.  Note that --null also\n\t     disables the special handling of lines containing “-C”.  Note:\n\t     If you are generating lists of files using find(1), you probably\n\t     want to use -n as well.\n\n     --totals\n\t     (c, r, u modes only) After archiving all files, print a summary\n\t     to stderr.\n\n     -U, --unlink, --unlink-first\n\t     (x mode only) Unlink files before creating them.  This can be a\n\t     minor performance optimization if most files already exist, but\n\t     can make things slower if most files do not already exist.  This\n\t     flag also causes tar to remove intervening directory symlinks\n\t     instead of reporting an error.  See the SECURITY section below\n\t     for more details.\n\n     --uid id\n\t     Use the provided user id number and ignore the user name from the\n\t     archive.  On create, if --uname is not also specified, the user\n\t     name will be set to match the user id.\n\n     --uname name\n\t     Use the provided user name.  On extract, this overrides the user\n\t     name in the archive; if the provided user name does not exist on\n\t     the system, it will be ignored and the user id (from the archive\n\t     or from the --uid option) will be used instead.  On create, this\n\t     sets the user name that will be stored in the archive; the name\n\t     is not verified against the system user database.\n\n     --use-compress-program program\n\t     Pipe the input (in x or t mode) or the output (in c mode) through\n\t     program instead of using the builtin compression support.\n\n     --owner name[:uid]\n\t     Use the provided user, if uid is not provided, name can be either\n\t     an username or numeric id.  See the --uname option for details.\n\n     -v, --verbose\n\t     Produce verbose output.  In create and extract modes, tar will\n\t     list each file name as it is read from or written to the archive.\n\t     In list mode, tar will produce output similar to that of ls(1).\n\t     An additional -v option will also provide ls-like details in\n\t     create and extract mode.\n\n     --version\n\t     Print version of tar and libarchive, and exit.\n\n     -w, --confirmation, --interactive\n\t     Ask for confirmation for every action.\n\n     -X filename, --exclude-from filename\n\t     Read a list of exclusion patterns from the specified file.  See\n\t     --exclude for more information about the handling of exclusions.\n\n     --xattrs\n\t     (c, r, u, x modes only) Archive or extract extended file\n\t     attributes.  This is the reverse of --no-xattrs and the default\n\t     behavior in c, r, and u modes or if tar is run in x mode as root.\n\n     -y      (c mode only) Compress the resulting archive with bzip2(1).  In\n\t     extract or list modes, this option is ignored.  Note that this\n\t     tar implementation recognizes bzip2 compression automatically\n\t     when reading archives.\n\n     -Z, --compress, --uncompress\n\t     (c mode only) Compress the resulting archive with compress(1).\n\t     In extract or list modes, this option is ignored.\tNote that this\n\t     tar implementation recognizes compress compression automatically\n\t     when reading archives.\n\n     -z, --gunzip, --gzip\n\t     (c mode only) Compress the resulting archive with gzip(1).  In\n\t     extract or list modes, this option is ignored.  Note that this\n\t     tar implementation recognizes gzip compression automatically when\n\t     reading archives.\n",
        "     The following environment variables affect the execution of tar:\n\n     TAR_READER_OPTIONS\n\t     The default options for format readers and compression readers.\n\t     The --options option overrides this.\n\n     TAR_WRITER_OPTIONS\n\t     The default options for format writers and compression writers.\n\t     The --options option overrides this.\n\n     LANG    The locale to use.  See environ(7) for more information.\n\n     TAPE    The default device.  The -f option overrides this.  Please see\n\t     the description of the -f option above for more details.\n\n     TZ      The timezone to use when displaying dates.  See environ(7) for\n\t     more information.\n",
        "     The tar utility exits 0 on success, and >0 if an error occurs.\n",
        "     The following creates a new archive called file.tar.gz that contains two\n     files source.c and source.h:\n\t   tar -czf file.tar.gz source.c source.h\n\n     To view a detailed table of contents for this archive:\n\t   tar -tvf file.tar.gz\n\n     To extract all entries from the archive on the default tape drive:\n\t   tar -x\n\n     To examine the contents of an ISO 9660 cdrom image:\n\t   tar -tf image.iso\n\n     To move file hierarchies, invoke tar as\n\t   tar -cf - -C srcdir . | tar -xpf - -C destdir\n     or more traditionally\n\t   cd srcdir ; tar -cf - . | (cd destdir ; tar -xpf -)\n\n     In create mode, the list of files and directories to be archived can also\n     include directory change instructions of the form -Cfoo/baz and archive\n     inclusions of the form @archive-file.  For example, the command line\n\t   tar -c -f new.tar foo1 @old.tgz -C/tmp foo2\n     will create a new archive new.tar.  tar will read the file foo1 from the\n     current directory and add it to the output archive.  It will then read\n     each entry from old.tgz and add those entries to the output archive.\n     Finally, it will switch to the /tmp directory and add foo2 to the output\n     archive.\n\n     An input file in mtree(5) format can be used to create an output archive\n     with arbitrary ownership, permissions, or names that differ from existing\n     data on disk:\n\n\t   $ cat input.mtree\n\t   #mtree\n\t   usr/bin uid=0 gid=0 mode=0755 type=dir\n\t   usr/bin/ls uid=0 gid=0 mode=0755 type=file content=myls\n\t   $ tar -cvf output.tar @input.mtree\n\n     The --newer and --newer-mtime switches accept a variety of common date\n     and time specifications, including “12 Mar 2005 7:14:29pm”, “2005-03-12\n     19:14”, “5 minutes ago”, and “19:14 PST May 1”.\n\n     The --options argument can be used to control various details of archive\n     generation or reading.  For example, you can generate mtree output which\n     only contains type, time, and uid keywords:\n\t   tar -cf file.tar --format=mtree --options='!all,type,time,uid' dir\n     or you can set the compression level used by gzip or xz compression:\n\t   tar -czf file.tar --options='compression-level=9'.\n     For more details, see the explanation of the archive_read_set_options()\n     and archive_write_set_options() API calls that are described in\n     archive_read(3) and archive_write(3).\n",
        "     The bundled-arguments format is supported for compatibility with historic\n     implementations.  It consists of an initial word (with no leading -\n     character) in which each character indicates an option.  Arguments follow\n     as separate words.  The order of the arguments must match the order of\n     the corresponding characters in the bundled command word.\tFor example,\n\t   tar tbf 32 file.tar\n     specifies three flags t, b, and f.  The b and f flags both require\n     arguments, so there must be two additional items on the command line.\n     The 32 is the argument to the b flag, and file.tar is the argument to the\n     f flag.\n\n     The mode options c, r, t, u, and x and the options b, f, l, m, o, v, and\n     w comply with SUSv2.\n\n     For maximum portability, scripts that invoke tar should use the bundled-\n     argument format above, should limit themselves to the c, t, and x modes,\n     and the b, f, m, v, and w options.\n\n     Additional long options are provided to improve compatibility with other\n     tar implementations.\n",
        "     Certain security issues are common to many archiving programs, including\n     tar.  In particular, carefully-crafted archives can request that tar\n     extract files to locations outside of the target directory.  This can\n     potentially be used to cause unwitting users to overwrite files they did\n     not intend to overwrite.  If the archive is being extracted by the\n     superuser, any file on the system can potentially be overwritten.\tThere\n     are three ways this can happen.  Although tar has mechanisms to protect\n     against each one, savvy users should be aware of the implications:\n\n     •\t     Archive entries can have absolute pathnames.  By default, tar\n\t     removes the leading / character from filenames before restoring\n\t     them to guard against this problem.\n\n     •\t     Archive entries can have pathnames that include .. components.\n\t     By default, tar will not extract files containing .. components\n\t     in their pathname.\n\n     •\t     Archive entries can exploit symbolic links to restore files to\n\t     other directories.  An archive can restore a symbolic link to\n\t     another directory, then use that link to restore a file into that\n\t     directory.  To guard against this, tar checks each extracted path\n\t     for symlinks.  If the final path element is a symlink, it will be\n\t     removed and replaced with the archive entry.  If -U is specified,\n\t     any intermediate symlink will also be unconditionally removed.\n\t     If neither -U nor -P is specified, tar will refuse to extract the\n\t     entry.\n     To protect yourself, you should be wary of any archives that come from\n     untrusted sources.  You should examine the contents of an archive with\n\t   tar -tf filename\n     before extraction.  You should use the -k option to ensure that tar will\n     not overwrite any existing files or the -U option to remove any pre-\n     existing files.  You should generally not extract archives while running\n     with super-user privileges.  Note that the -P option to tar disables the\n     security checks above and allows you to extract an archive while\n     preserving any absolute pathnames, .. components, or symlinks to other\n     directories.\n",
        "     bzip2(1), compress(1), cpio(1), gzip(1), pax(1), shar(1), xz(1),\n     libarchive(3), libarchive-formats(5), tar(5)\n",
        "     There is no current POSIX standard for the tar command; it appeared in\n     ISO/IEC 9945-1:1996 (“POSIX.1”) but was dropped from IEEE Std 1003.1-2001\n     (“POSIX.1”).  The options supported by this implementation were developed\n     by surveying a number of existing tar implementations as well as the old\n     POSIX specification for tar and the current POSIX specification for pax.\n\n     The ustar and pax interchange file formats are defined by IEEE Std\n     1003.1-2001 (“POSIX.1”) for the pax command.\n",
        "     A tar command appeared in Seventh Edition Unix, which was released in\n     January, 1979.  There have been numerous other implementations, many of\n     which extended the file format.  John Gilmore's pdtar public-domain\n     implementation (circa November, 1987) was quite influential, and formed\n     the basis of GNU tar.  GNU tar was included as the standard system tar in\n     FreeBSD beginning with FreeBSD 1.0.\n\n     This is a complete re-implementation based on the libarchive(3) library.\n     It was first released with FreeBSD 5.4 in May, 2005.\n",
        "     This program follows ISO/IEC 9945-1:1996 (“POSIX.1”) for the definition\n     of the -l option.\tNote that GNU tar prior to version 1.15 treated -l as\n     a synonym for the --one-file-system option.\n\n     The -C dir option may differ from historic implementations.\n\n     All archive output is written in correctly-sized blocks, even if the\n     output is being compressed.  Whether or not the last output block is\n     padded to a full block size varies depending on the format and the output\n     device.  For tar and cpio formats, the last block of output is padded to\n     a full block size if the output is being written to standard output or to\n     a character or block device such as a tape drive.\tIf the output is being\n     written to a regular file, the last block will not be padded.  Many\n     compressors, including gzip(1) and bzip2(1), complain about the null\n     padding when decompressing an archive created by tar, although they still\n     extract it correctly.\n\n     The compression and decompression is implemented internally, so there may\n     be insignificant differences between the compressed output generated by\n\t   tar -czf - file\n     and that generated by\n\t   tar -cf - file | gzip\n\n     The default should be to read and write archives to the standard I/O\n     paths, but tradition (and POSIX) dictates otherwise.\n\n     The r and u modes require that the archive be uncompressed and located in\n     a regular file on disk.  Other archives can be modified using c mode with\n     the @archive-file extension.\n\n     To archive a file called @foo or -foo you must specify it as ./@foo or\n     ./-foo, respectively.\n\n     In create mode, a leading ./ is always removed.  A leading / is stripped\n     unless the -P option is specified.\n\n     There needs to be better support for file selection on both create and\n     extract.\n\n     There is not yet any support for multi-volume archives.\n\n     Converting between dissimilar archive formats (such as tar and cpio)\n     using the @- convention can cause hard link information to be lost.\n     (This is a consequence of the incompatible ways that different archive\n     formats store hardlink information.)\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "--acls",
      "description": "(c, r, u, x modes only) Archive or extract POSIX.1e or NFSv4 ACLs.  This is the reverse of --no-acls and the default behavior in c, r, and u modes (except on Mac OS X) or if tar is run in x mode as root.  On Mac OS X this option translates extended ACLs to NFSv4 ACLs.  To store extended ACLs the --mac-metadata option is preferred.",
      "shortFlag": "-a"
    },
    {
      "flag": "-B",
      "description": ", --read-full-blocks Ignored for compatibility with other tar(1) implementations."
    },
    {
      "flag": "-b",
      "description": "blocksize, --block-size blocksize Specify the block size, in 512-byte records, for tape drive I/O. As a rule, this argument is only needed when reading from or writing to tape drives, and usually not even then as the default block size of 20 records (10240 bytes) is very common."
    },
    {
      "flag": "--chroot",
      "description": " (x mode only) chroot() to the current directory after processing any -C options and before extracting any files.",
      "shortFlag": "-C"
    },
    {
      "flag": "--clear-nochange-fflags",
      "description": " (x mode only) Before removing file system objects to replace them, clear platform-specific file attributes or file flags that might prevent removal."
    },
    {
      "flag": "--exclude",
      "description": "pattern Do not process files or directories that match the specified pattern.  Note that exclusions take precedence over patterns or filenames specified on the command line."
    },
    {
      "flag": "--exclude-vcs",
      "description": " Do not process files or directories internally used by the version control systems ‘Arch’, ‘Bazaar’, ‘CVS’, ‘Darcs’, ‘Mercurial’, ‘RCS’, ‘SCCS’, ‘SVN’ and ‘git’."
    },
    {
      "flag": "--fflags",
      "description": " (c, r, u, x modes only) Archive or extract platform-specific file attributes or file flags.\tThis is the reverse of --no-fflags and the default behavior in c, r, and u modes or if tar is run in x mode as root."
    },
    {
      "flag": "--format",
      "description": "format (c, r, u mode only) Use the specified format for the created archive.  Supported formats include “cpio”, “pax”, “shar”, and “ustar”.  Other formats may also be supported; see libarchive-formats(5) for more information about currently- supported formats.  In r and u modes, when extending an existing archive, the format specified here must be compatible with the format of the existing archive on disk."
    },
    {
      "flag": "--gid",
      "description": "id Use the provided group id number.\tOn extract, this overrides the group id in the archive; the group name in the archive will be ignored.  On create, this overrides the group id read from disk; if --gname is not also specified, the group name will be set to match the group id.",
      "shortFlag": "-f"
    },
    {
      "flag": "--gname",
      "description": "name Use the provided group name.  On extract, this overrides the group name in the archive; if the provided group name does not exist on the system, the group id (from the archive or from the"
    },
    {
      "flag": "--gid",
      "description": "option) will be used instead.  On create, this sets the group name that will be stored in the archive; the name will not be verified against the system group database."
    },
    {
      "flag": "--group",
      "description": "name[:gid] Use the provided group, if gid is not provided, name can be either a group name or numeric id.  See the --gname option for details."
    },
    {
      "flag": "-H",
      "description": "(c and r modes only) Symbolic links named on the command line will be followed; the target of the link will be archived, not the link itself."
    },
    {
      "flag": "-h",
      "description": "(c and r modes only) Synonym for -L."
    },
    {
      "flag": "--help",
      "description": "Show usage.",
      "shortFlag": "-I"
    },
    {
      "flag": "--hfsCompression",
      "description": " (x mode only) Mac OS X specific (v10.6 or later). Compress extracted regular files with HFS+ compression."
    },
    {
      "flag": "--ignore-zeros",
      "description": " An alias of --options read_concatenated_archives for compatibility with GNU tar."
    },
    {
      "flag": "--include",
      "description": "pattern Process only files or directories that match the specified pattern.  Note that exclusions specified with --exclude take precedence over inclusions.  If no inclusions are explicitly specified, all entries are processed by default.  The --include option is especially useful when filtering archives.  For example, the command tar -c -f new.tar --include='*foo*' @old.tgz creates a new archive new.tar containing only the entries from old.tgz containing the string ‘foo’."
    },
    {
      "flag": "-J",
      "description": ", --xz (c mode only) Compress the resulting archive with xz(1).  In extract or list modes, this option is ignored.  Note that this tar implementation recognizes XZ compression automatically when reading archives."
    },
    {
      "flag": "-j",
      "description": ", --bzip, --bzip2, --bunzip2 (c mode only) Compress the resulting archive with bzip2(1).  In extract or list modes, this option is ignored.  Note that this tar implementation recognizes bzip2 compression automatically when reading archives."
    },
    {
      "flag": "--keep-newer-files",
      "description": " (x mode only) Do not overwrite existing files that are newer than the versions appearing in the archive being extracted.",
      "shortFlag": "-k"
    },
    {
      "flag": "-L",
      "description": ", --dereference (c and r modes only) All symbolic links will be followed. Normally, symbolic links are archived as such.  With this option, the target of the link will be archived instead."
    },
    {
      "flag": "--lrzip",
      "description": " (c mode only) Compress the resulting archive with lrzip(1).  In extract or list modes, this option is ignored.  Note that this tar implementation recognizes lrzip compression automatically when reading archives.",
      "shortFlag": "-l"
    },
    {
      "flag": "--lz4",
      "description": "(c mode only) Compress the archive with lz4-compatible compression before writing it.  In extract or list modes, this option is ignored.  Note that this tar implementation recognizes lz4 compression automatically when reading archives."
    },
    {
      "flag": "--zstd",
      "description": "(c mode only) Compress the archive with zstd-compatible compression before writing it.  In extract or list modes, this option is ignored.  Note that this tar implementation recognizes zstd compression automatically when reading archives."
    },
    {
      "flag": "--lzma",
      "description": "(c mode only) Compress the resulting archive with the original LZMA algorithm.  In extract or list modes, this option is ignored.  Use of this option is discouraged and new archives should be created with --xz instead.  Note that this tar implementation recognizes LZMA compression automatically when reading archives."
    },
    {
      "flag": "--lzop",
      "description": "(c mode only) Compress the resulting archive with lzop(1).  In extract or list modes, this option is ignored.  Note that this tar implementation recognizes LZO compression automatically when reading archives."
    },
    {
      "flag": "--mac-metadata",
      "description": " (c, r, u and x mode only) Mac OS X specific.  Archive or extract extended ACLs and extended file attributes using copyfile(3) in AppleDouble format.  This is the reverse of --no-mac-metadata. and the default behavior in c, r, and u modes or if tar is run in x mode as root.  Currently supported only for pax formats (including \"pax restricted\", the default tar format for bsdtar.)",
      "shortFlag": "-m"
    },
    {
      "flag": "--newer",
      "description": "date (c, r, u modes only) Only include files and directories newer than the specified date.  This compares ctime entries.",
      "shortFlag": "-n"
    },
    {
      "flag": "--newer-mtime",
      "description": "date (c, r, u modes only) Like --newer, except it compares mtime entries instead of ctime entries."
    },
    {
      "flag": "--newer-than",
      "description": "file (c, r, u modes only) Only include files and directories newer than the specified file.  This compares ctime entries."
    },
    {
      "flag": "--newer-mtime-than",
      "description": "file (c, r, u modes only) Like --newer-than, except it compares mtime entries instead of ctime entries."
    },
    {
      "flag": "--nodump",
      "description": " (c and r modes only) Honor the nodump file flag by skipping this file."
    },
    {
      "flag": "--nopreserveHFSCompression",
      "description": " (x mode only) Mac OS X specific (v10.6 or later). Do not compress extracted regular files which were compressed with HFS+ compression before archived.  By default, compress the regular files again with HFS+ compression."
    },
    {
      "flag": "--null",
      "description": "(use with -I or -T) Filenames or patterns are separated by null characters, not by newlines.  This is often used to read filenames output by the -print0 option to find(1)."
    },
    {
      "flag": "--no-acls",
      "description": " (c, r, u, x modes only) Do not archive or extract POSIX.1e or NFSv4 ACLs.  This is the reverse of --acls and the default behavior if tar is run as non-root in x mode (on Mac OS X as any user in c, r, u and x modes)."
    },
    {
      "flag": "--no-fflags",
      "description": " (c, r, u, x modes only) Do not archive or extract file attributes or file flags.  This is the reverse of --fflags and the default behavior if tar is run as non-root in x mode."
    },
    {
      "flag": "--no-mac-metadata",
      "description": " (x mode only) Mac OS X specific.  Do not archive or extract ACLs and extended file attributes using copyfile(3) in AppleDouble format.  This is the reverse of --mac-metadata.  and the default behavior if tar is run as non-root in x mode."
    },
    {
      "flag": "--no-read-sparse",
      "description": " (c, r, u modes only) Do not read sparse file information from disk.  This is the reverse of --read-sparse."
    },
    {
      "flag": "--no-safe-writes",
      "description": " (x mode only) Do not create temporary files and use rename(2) to replace the original ones.  This is the reverse of --safe-writes."
    },
    {
      "flag": "--no-same-owner",
      "description": " (x mode only) Do not extract owner and group IDs.\tThis is the reverse of --same-owner and the default behavior if tar is run as non-root."
    },
    {
      "flag": "--no-same-permissions",
      "description": " (x mode only) Do not extract full permissions (SGID, SUID, sticky bit, file attributes or file flags, extended file attributes and ACLs).  This is the reverse of -p and the default behavior if tar is run as non-root."
    },
    {
      "flag": "--no-xattrs",
      "description": " (c, r, u, x modes only) Do not archive or extract extended file attributes.  This is the reverse of --xattrs and the default behavior if tar is run as non-root in x mode."
    },
    {
      "flag": "--numeric-owner",
      "description": " This is equivalent to --uname \"\" --gname \"\".  On extract, it causes user and group names in the archive to be ignored in favor of the numeric user and group ids.  On create, it causes user and group names to not be stored in the archive."
    },
    {
      "flag": "-O",
      "description": ", --to-stdout (x, t modes only) In extract (-x) mode, files will be written to standard out rather than being extracted to disk.\tIn list (-t) mode, the file listing will be written to stderr rather than the usual stdout."
    },
    {
      "flag": "-o",
      "description": "(x mode) Use the user and group of the user running the program rather than those specified in the archive.  Note that this has no significance unless -p is specified, and the program is being run by the root user.  In this case, the file modes and flags from the archive will be restored, but ACLs or owner information in the archive will be discarded."
    },
    {
      "flag": "--older",
      "description": "date (c, r, u modes only) Only include files and directories older than the specified date.  This compares ctime entries.",
      "shortFlag": "-o"
    },
    {
      "flag": "--older-mtime",
      "description": "date (c, r, u modes only) Like --older, except it compares mtime entries instead of ctime entries."
    },
    {
      "flag": "--older-than",
      "description": "file (c, r, u modes only) Only include files and directories older than the specified file.  This compares ctime entries."
    },
    {
      "flag": "--older-mtime-than",
      "description": "file (c, r, u modes only) Like --older-than, except it compares mtime entries instead of ctime entries."
    },
    {
      "flag": "--one-file-system",
      "description": " (c, r, and u modes) Do not cross mount points."
    },
    {
      "flag": "--options",
      "description": "options Select optional behaviors for particular modules.\tThe argument is a text string containing comma-separated keywords and values. These are passed to the modules that handle particular formats to control how those formats will behave.  Each option has one of the following forms: key=value The key will be set to the specified value in every module that supports it.  Modules that do not support this key will ignore it. key     The key will be enabled in every module that supports it. This is equivalent to key=1. !key    The key will be disabled in every module that supports it. module:key=value, module:key, module:!key As above, but the corresponding key and value will be provided only to modules whose name matches module. The complete list of supported modules and keys for create and append modes is in archive_write_set_options(3) and for extract and list modes in archive_read_set_options(3). Examples of supported options: iso9660:joliet Support Joliet extensions.  This is enabled by default, use !joliet or iso9660:!joliet to disable. iso9660:rockridge Support Rock Ridge extensions.  This is enabled by default, use !rockridge or iso9660:!rockridge to disable. gzip:compression-level A decimal integer from 1 to 9 specifying the gzip compression level. gzip:timestamp Store timestamp.  This is enabled by default, use !timestamp or gzip:!timestamp to disable. lrzip:compression=type Use type as compression method.  Supported values are bzip2, gzip, lzo (ultra fast), and zpaq (best, extremely slow). lrzip:compression-level A decimal integer from 1 to 9 specifying the lrzip compression level. lz4:compression-level A decimal integer from 1 to 9 specifying the lzop compression level. lz4:stream-checksum Enable stream checksum.  This is by default, use lz4:!stream-checksum to disable. lz4:block-checksum Enable block checksum (Disabled by default). lz4:block-size A decimal integer from 4 to 7 specifying the lz4 compression block size (7 is set by default). lz4:block-dependence Use the previous block of the block being compressed for a compression dictionary to improve compression ratio. zstd:compression-level=N A decimal integer specifying the zstd compression level. Supported values depend on the library version, common values are from 1 to 22. zstd:threads=N Specify the number of worker threads to use, or 0 to use as many threads as there are CPU cores in the system. zstd:frame-per-file Start a new compression frame at the beginning of each file in the archive. zstd:min-frame-in=N In combination with zstd:frame-per-file, do not start a new compression frame unless the uncompressed size of the current frame is at least N bytes.  The number may be followed by k / kB, M / MB, or G / GB to indicate kilobytes, megabytes or gigabytes respectively. zstd:min-frame-out=N, zstd:min-frame-size=N In combination with zstd:frame-per-file, do not start a new compression frame unless the compressed size of the current frame is at least N bytes.  The number may be followed by k / kB, M / MB, or G / GB to indicate kilobytes, megabytes or gigabytes respectively. zstd:max-frame-in=N, zstd:max-frame-size=N Start a new compression frame as soon as possible after the uncompressed size of the current frame exceeds N bytes.  The number may be followed by k / kB, M / MB, or G / GB to indicate kilobytes, megabytes or gigabytes respectively.  Values less than 1,024 will be rejected. zstd:max-frame-out=N Start a new compression frame as soon as possible after the compressed size of the current frame exceeds N bytes. The number may be followed by k / kB, M / MB, or G / GB to indicate kilobytes, megabytes or gigabytes respectively.  Values less than 1,024 will be rejected. lzop:compression-level A decimal integer from 1 to 9 specifying the lzop compression level. xz:compression-level A decimal integer from 0 to 9 specifying the xz compression level. xz:threads Specify the number of worker threads to use.  Setting threads to a special value 0 makes xz(1) use as many threads as there are CPU cores on the system. mtree:keyword The mtree writer module allows you to specify which mtree keywords will be included in the output.  Supported keywords include: cksum, device, flags, gid, gname, indent, link, md5, mode, nlink, rmd160, sha1, sha256, sha384, sha512, size, time, uid, uname.  The default is equivalent to: “device, flags, gid, gname, link, mode, nlink, size, time, type, uid, uname”. mtree:all Enables all of the above keywords.  You can also use mtree:!all to disable all keywords. mtree:use-set Enable generation of /set lines in the output. mtree:indent Produce human-readable output by indenting options and splitting lines to fit into 80 columns. zip:compression=type Use type as compression method.  Supported values are store (uncompressed) and deflate (gzip algorithm). zip:encryption Enable encryption using traditional zip encryption. zip:encryption=type Use type as encryption type.  Supported values are zipcrypt (traditional zip encryption), aes128 (WinZip AES-128 encryption) and aes256 (WinZip AES-256 encryption). read_concatenated_archives Ignore zeroed blocks in the archive, which occurs when multiple tar archives have been concatenated together. Without this option, only the contents of the first concatenated archive would be read.  This option is comparable to the -i, --ignore-zeros option of GNU tar. If a provided option is not supported by any module, that is a fatal error."
    },
    {
      "flag": "-P",
      "description": ", --absolute-paths Preserve pathnames.  By default, absolute pathnames (those that begin with a / character) have the leading slash removed both when creating archives and extracting from them.  Also, tar will refuse to extract archive entries whose pathnames contain .. or whose target directory would be altered by a symlink.  This option suppresses these behaviors."
    },
    {
      "flag": "--no-same-permissions",
      "description": "and the default if tar is being run as root.  It can be partially overridden by also specifying",
      "shortFlag": "-p"
    },
    {
      "flag": "--no-acls",
      "description": ", --no-fflags, --no-mac-metadata or --no-xattrs."
    },
    {
      "flag": "--passphrase",
      "description": "passphrase The passphrase is used to extract or create an encrypted archive. Currently, zip is the only supported format that supports encryption.  You shouldn't use this option unless you realize how insecure use of this option is."
    },
    {
      "flag": "--posix",
      "description": " (c, r, u mode only) Synonym for --format pax"
    },
    {
      "flag": "--read-sparse",
      "description": " (c, r, u modes only) Read sparse file information from disk. This is the reverse of --no-read-sparse and the default behavior.",
      "shortFlag": "-q"
    },
    {
      "flag": "-S",
      "description": "(x mode only) Extract files as sparse files.  For every block on disk, check first if it contains only NULL bytes and seek over it otherwise.  This works similar to the conv=sparse option of dd."
    },
    {
      "flag": "--safe-writes",
      "description": " (x mode only) Extract files atomically.  By default tar unlinks the original file with the same name as the extracted file (if it exists), and then creates it immediately under the same name and writes to it.  For a short period of time, applications trying to access the file might not find it, or see incomplete results.  If",
      "shortFlag": "-s"
    },
    {
      "flag": "--safe-writes",
      "description": "is enabled, tar first creates a unique temporary file, then writes the new contents to the temporary file, and finally renames the temporary file to its final name atomically using rename(2).  This guarantees that an application accessing the file, will either see the old contents or the new contents at all times."
    },
    {
      "flag": "--same-owner",
      "description": " (x mode only) Extract owner and group IDs.  This is the reverse of --no-same-owner and the default behavior if tar is run as root."
    },
    {
      "flag": "--strip-components",
      "description": "count Remove the specified number of leading path elements.  Pathnames with fewer elements will be silently skipped.  Note that the pathname is edited after checking inclusion/exclusion patterns but before security checks."
    },
    {
      "flag": "--totals",
      "description": " (c, r, u modes only) After archiving all files, print a summary to stderr.",
      "shortFlag": "-T"
    },
    {
      "flag": "--uid",
      "description": "id Use the provided user id number and ignore the user name from the archive.  On create, if --uname is not also specified, the user name will be set to match the user id.",
      "shortFlag": "-U"
    },
    {
      "flag": "--uname",
      "description": "name Use the provided user name.  On extract, this overrides the user name in the archive; if the provided user name does not exist on the system, it will be ignored and the user id (from the archive or from the --uid option) will be used instead.  On create, this sets the user name that will be stored in the archive; the name is not verified against the system user database."
    },
    {
      "flag": "--use-compress-program",
      "description": "program Pipe the input (in x or t mode) or the output (in c mode) through program instead of using the builtin compression support."
    },
    {
      "flag": "--owner",
      "description": "name[:uid] Use the provided user, if uid is not provided, name can be either an username or numeric id.  See the --uname option for details."
    },
    {
      "flag": "--version",
      "description": " Print version of tar and libarchive, and exit.",
      "shortFlag": "-v"
    },
    {
      "flag": "-w",
      "description": ", --confirmation, --interactive Ask for confirmation for every action."
    },
    {
      "flag": "--exclude",
      "description": "for more information about the handling of exclusions.",
      "shortFlag": "-X"
    },
    {
      "flag": "--xattrs",
      "description": " (c, r, u, x modes only) Archive or extract extended file attributes.  This is the reverse of --no-xattrs and the default behavior in c, r, and u modes or if tar is run in x mode as root."
    },
    {
      "flag": "-y",
      "description": "(c mode only) Compress the resulting archive with bzip2(1).  In extract or list modes, this option is ignored.  Note that this tar implementation recognizes bzip2 compression automatically when reading archives."
    },
    {
      "flag": "-Z",
      "description": ", --compress, --uncompress (c mode only) Compress the resulting archive with compress(1). In extract or list modes, this option is ignored.\tNote that this tar implementation recognizes compress compression automatically when reading archives."
    },
    {
      "flag": "-z",
      "description": ", --gunzip, --gzip (c mode only) Compress the resulting archive with gzip(1).  In extract or list modes, this option is ignored.  Note that this tar implementation recognizes gzip compression automatically when reading archives."
    }
  ],
  "examples": [],
  "relatedCommands": [
    "bzip2",
    "compress",
    "cpio",
    "gzip",
    "pax",
    "shar",
    "xz",
    "libarchive",
    "libarchive-formats",
    "tar",
    "manipulate",
    "tape",
    "archives",
    "bundled-flags",
    "args"
  ],
  "seeAlso": [
    {
      "name": "bzip2",
      "section": 1
    },
    {
      "name": "compress",
      "section": 1
    },
    {
      "name": "cpio",
      "section": 1
    },
    {
      "name": "gzip",
      "section": 1
    },
    {
      "name": "pax",
      "section": 1
    },
    {
      "name": "shar",
      "section": 1
    },
    {
      "name": "xz",
      "section": 1
    },
    {
      "name": "libarchive",
      "section": 3
    },
    {
      "name": "libarchive-formats",
      "section": 5
    },
    {
      "name": "tar",
      "section": 5
    }
  ],
  "metadata": {},
  "searchContent": "tar tar manual page tar creates and manipulates streaming archive files tar bundled-flags args file pattern tar -c options files directories tar -r -u -f archive-file options files directories tar -t -x options patterns tar manual page creates manipulates streaming archive files --acls c r u x modes only archive or extract posix 1e or nfsv4 acls this is the reverse of --no-acls and the default behavior in c r and u modes except on mac os x or if tar is run in x mode as root on mac os x this option translates extended acls to nfsv4 acls to store extended acls the --mac-metadata option is preferred -b --read-full-blocks ignored for compatibility with other tar 1 implementations -b blocksize --block-size blocksize specify the block size in 512-byte records for tape drive i o as a rule this argument is only needed when reading from or writing to tape drives and usually not even then as the default block size of 20 records 10240 bytes is very common --chroot x mode only chroot to the current directory after processing any -c options and before extracting any files --clear-nochange-fflags x mode only before removing file system objects to replace them clear platform-specific file attributes or file flags that might prevent removal --exclude pattern do not process files or directories that match the specified pattern note that exclusions take precedence over patterns or filenames specified on the command line --exclude-vcs do not process files or directories internally used by the version control systems arch bazaar cvs darcs mercurial rcs sccs svn and git --fflags c r u x modes only archive or extract platform-specific file attributes or file flags this is the reverse of --no-fflags and the default behavior in c r and u modes or if tar is run in x mode as root --format format c r u mode only use the specified format for the created archive supported formats include cpio pax shar and ustar other formats may also be supported see libarchive-formats 5 for more information about currently- supported formats in r and u modes when extending an existing archive the format specified here must be compatible with the format of the existing archive on disk --gid id use the provided group id number on extract this overrides the group id in the archive the group name in the archive will be ignored on create this overrides the group id read from disk if --gname is not also specified the group name will be set to match the group id --gname name use the provided group name on extract this overrides the group name in the archive if the provided group name does not exist on the system the group id from the archive or from the --gid option will be used instead on create this sets the group name that will be stored in the archive the name will not be verified against the system group database --group name gid use the provided group if gid is not provided name can be either a group name or numeric id see the --gname option for details -h c and r modes only symbolic links named on the command line will be followed the target of the link will be archived not the link itself -h c and r modes only synonym for -l --help show usage --hfscompression x mode only mac os x specific v10 6 or later compress extracted regular files with hfs compression --ignore-zeros an alias of --options read concatenated archives for compatibility with gnu tar --include pattern process only files or directories that match the specified pattern note that exclusions specified with --exclude take precedence over inclusions if no inclusions are explicitly specified all entries are processed by default the --include option is especially useful when filtering archives for example the command tar -c -f new tar --include foo old tgz creates a new archive new tar containing only the entries from old tgz containing the string foo -j --xz c mode only compress the resulting archive with xz 1 in extract or list modes this option is ignored note that this tar implementation recognizes xz compression automatically when reading archives -j --bzip --bzip2 --bunzip2 c mode only compress the resulting archive with bzip2 1 in extract or list modes this option is ignored note that this tar implementation recognizes bzip2 compression automatically when reading archives --keep-newer-files x mode only do not overwrite existing files that are newer than the versions appearing in the archive being extracted -l --dereference c and r modes only all symbolic links will be followed normally symbolic links are archived as such with this option the target of the link will be archived instead --lrzip c mode only compress the resulting archive with lrzip 1 in extract or list modes this option is ignored note that this tar implementation recognizes lrzip compression automatically when reading archives --lz4 c mode only compress the archive with lz4-compatible compression before writing it in extract or list modes this option is ignored note that this tar implementation recognizes lz4 compression automatically when reading archives --zstd c mode only compress the archive with zstd-compatible compression before writing it in extract or list modes this option is ignored note that this tar implementation recognizes zstd compression automatically when reading archives --lzma c mode only compress the resulting archive with the original lzma algorithm in extract or list modes this option is ignored use of this option is discouraged and new archives should be created with --xz instead note that this tar implementation recognizes lzma compression automatically when reading archives --lzop c mode only compress the resulting archive with lzop 1 in extract or list modes this option is ignored note that this tar implementation recognizes lzo compression automatically when reading archives --mac-metadata c r u and x mode only mac os x specific archive or extract extended acls and extended file attributes using copyfile 3 in appledouble format this is the reverse of --no-mac-metadata and the default behavior in c r and u modes or if tar is run in x mode as root currently supported only for pax formats including pax restricted the default tar format for bsdtar --newer date c r u modes only only include files and directories newer than the specified date this compares ctime entries --newer-mtime date c r u modes only like --newer except it compares mtime entries instead of ctime entries --newer-than file c r u modes only only include files and directories newer than the specified file this compares ctime entries --newer-mtime-than file c r u modes only like --newer-than except it compares mtime entries instead of ctime entries --nodump c and r modes only honor the nodump file flag by skipping this file --nopreservehfscompression x mode only mac os x specific v10 6 or later do not compress extracted regular files which were compressed with hfs compression before archived by default compress the regular files again with hfs compression --null use with -i or -t filenames or patterns are separated by null characters not by newlines this is often used to read filenames output by the -print0 option to find 1 --no-acls c r u x modes only do not archive or extract posix 1e or nfsv4 acls this is the reverse of --acls and the default behavior if tar is run as non-root in x mode on mac os x as any user in c r u and x modes --no-fflags c r u x modes only do not archive or extract file attributes or file flags this is the reverse of --fflags and the default behavior if tar is run as non-root in x mode --no-mac-metadata x mode only mac os x specific do not archive or extract acls and extended file attributes using copyfile 3 in appledouble format this is the reverse of --mac-metadata and the default behavior if tar is run as non-root in x mode --no-read-sparse c r u modes only do not read sparse file information from disk this is the reverse of --read-sparse --no-safe-writes x mode only do not create temporary files and use rename 2 to replace the original ones this is the reverse of --safe-writes --no-same-owner x mode only do not extract owner and group ids this is the reverse of --same-owner and the default behavior if tar is run as non-root --no-same-permissions x mode only do not extract full permissions sgid suid sticky bit file attributes or file flags extended file attributes and acls this is the reverse of -p and the default behavior if tar is run as non-root --no-xattrs c r u x modes only do not archive or extract extended file attributes this is the reverse of --xattrs and the default behavior if tar is run as non-root in x mode --numeric-owner this is equivalent to --uname --gname on extract it causes user and group names in the archive to be ignored in favor of the numeric user and group ids on create it causes user and group names to not be stored in the archive -o --to-stdout x t modes only in extract -x mode files will be written to standard out rather than being extracted to disk in list -t mode the file listing will be written to stderr rather than the usual stdout -o x mode use the user and group of the user running the program rather than those specified in the archive note that this has no significance unless -p is specified and the program is being run by the root user in this case the file modes and flags from the archive will be restored but acls or owner information in the archive will be discarded --older date c r u modes only only include files and directories older than the specified date this compares ctime entries --older-mtime date c r u modes only like --older except it compares mtime entries instead of ctime entries --older-than file c r u modes only only include files and directories older than the specified file this compares ctime entries --older-mtime-than file c r u modes only like --older-than except it compares mtime entries instead of ctime entries --one-file-system c r and u modes do not cross mount points --options options select optional behaviors for particular modules the argument is a text string containing comma-separated keywords and values these are passed to the modules that handle particular formats to control how those formats will behave each option has one of the following forms key value the key will be set to the specified value in every module that supports it modules that do not support this key will ignore it key the key will be enabled in every module that supports it this is equivalent to key 1 key the key will be disabled in every module that supports it module key value module key module key as above but the corresponding key and value will be provided only to modules whose name matches module the complete list of supported modules and keys for create and append modes is in archive write set options 3 and for extract and list modes in archive read set options 3 examples of supported options iso9660 joliet support joliet extensions this is enabled by default use joliet or iso9660 joliet to disable iso9660 rockridge support rock ridge extensions this is enabled by default use rockridge or iso9660 rockridge to disable gzip compression-level a decimal integer from 1 to 9 specifying the gzip compression level gzip timestamp store timestamp this is enabled by default use timestamp or gzip timestamp to disable lrzip compression type use type as compression method supported values are bzip2 gzip lzo ultra fast and zpaq best extremely slow lrzip compression-level a decimal integer from 1 to 9 specifying the lrzip compression level lz4 compression-level a decimal integer from 1 to 9 specifying the lzop compression level lz4 stream-checksum enable stream checksum this is by default use lz4 stream-checksum to disable lz4 block-checksum enable block checksum disabled by default lz4 block-size a decimal integer from 4 to 7 specifying the lz4 compression block size 7 is set by default lz4 block-dependence use the previous block of the block being compressed for a compression dictionary to improve compression ratio zstd compression-level n a decimal integer specifying the zstd compression level supported values depend on the library version common values are from 1 to 22 zstd threads n specify the number of worker threads to use or 0 to use as many threads as there are cpu cores in the system zstd frame-per-file start a new compression frame at the beginning of each file in the archive zstd min-frame-in n in combination with zstd frame-per-file do not start a new compression frame unless the uncompressed size of the current frame is at least n bytes the number may be followed by k kb m mb or g gb to indicate kilobytes megabytes or gigabytes respectively zstd min-frame-out n zstd min-frame-size n in combination with zstd frame-per-file do not start a new compression frame unless the compressed size of the current frame is at least n bytes the number may be followed by k kb m mb or g gb to indicate kilobytes megabytes or gigabytes respectively zstd max-frame-in n zstd max-frame-size n start a new compression frame as soon as possible after the uncompressed size of the current frame exceeds n bytes the number may be followed by k kb m mb or g gb to indicate kilobytes megabytes or gigabytes respectively values less than 1 024 will be rejected zstd max-frame-out n start a new compression frame as soon as possible after the compressed size of the current frame exceeds n bytes the number may be followed by k kb m mb or g gb to indicate kilobytes megabytes or gigabytes respectively values less than 1 024 will be rejected lzop compression-level a decimal integer from 1 to 9 specifying the lzop compression level xz compression-level a decimal integer from 0 to 9 specifying the xz compression level xz threads specify the number of worker threads to use setting threads to a special value 0 makes xz 1 use as many threads as there are cpu cores on the system mtree keyword the mtree writer module allows you to specify which mtree keywords will be included in the output supported keywords include cksum device flags gid gname indent link md5 mode nlink rmd160 sha1 sha256 sha384 sha512 size time uid uname the default is equivalent to device flags gid gname link mode nlink size time type uid uname mtree all enables all of the above keywords you can also use mtree all to disable all keywords mtree use-set enable generation of set lines in the output mtree indent produce human-readable output by indenting options and splitting lines to fit into 80 columns zip compression type use type as compression method supported values are store uncompressed and deflate gzip algorithm zip encryption enable encryption using traditional zip encryption zip encryption type use type as encryption type supported values are zipcrypt traditional zip encryption aes128 winzip aes-128 encryption and aes256 winzip aes-256 encryption read concatenated archives ignore zeroed blocks in the archive which occurs when multiple tar archives have been concatenated together without this option only the contents of the first concatenated archive would be read this option is comparable to the -i --ignore-zeros option of gnu tar if a provided option is not supported by any module that is a fatal error -p --absolute-paths preserve pathnames by default absolute pathnames those that begin with a character have the leading slash removed both when creating archives and extracting from them also tar will refuse to extract archive entries whose pathnames contain or whose target directory would be altered by a symlink this option suppresses these behaviors --no-same-permissions and the default if tar is being run as root it can be partially overridden by also specifying --no-acls --no-fflags --no-mac-metadata or --no-xattrs --passphrase passphrase the passphrase is used to extract or create an encrypted archive currently zip is the only supported format that supports encryption you shouldn t use this option unless you realize how insecure use of this option is --posix c r u mode only synonym for --format pax --read-sparse c r u modes only read sparse file information from disk this is the reverse of --no-read-sparse and the default behavior -s x mode only extract files as sparse files for every block on disk check first if it contains only null bytes and seek over it otherwise this works similar to the conv sparse option of dd --safe-writes x mode only extract files atomically by default tar unlinks the original file with the same name as the extracted file if it exists and then creates it immediately under the same name and writes to it for a short period of time applications trying to access the file might not find it or see incomplete results if --safe-writes is enabled tar first creates a unique temporary file then writes the new contents to the temporary file and finally renames the temporary file to its final name atomically using rename 2 this guarantees that an application accessing the file will either see the old contents or the new contents at all times --same-owner x mode only extract owner and group ids this is the reverse of --no-same-owner and the default behavior if tar is run as root --strip-components count remove the specified number of leading path elements pathnames with fewer elements will be silently skipped note that the pathname is edited after checking inclusion exclusion patterns but before security checks --totals c r u modes only after archiving all files print a summary to stderr --uid id use the provided user id number and ignore the user name from the archive on create if --uname is not also specified the user name will be set to match the user id --uname name use the provided user name on extract this overrides the user name in the archive if the provided user name does not exist on the system it will be ignored and the user id from the archive or from the --uid option will be used instead on create this sets the user name that will be stored in the archive the name is not verified against the system user database --use-compress-program program pipe the input in x or t mode or the output in c mode through program instead of using the builtin compression support --owner name uid use the provided user if uid is not provided name can be either an username or numeric id see the --uname option for details --version print version of tar and libarchive and exit -w --confirmation --interactive ask for confirmation for every action --exclude for more information about the handling of exclusions --xattrs c r u x modes only archive or extract extended file attributes this is the reverse of --no-xattrs and the default behavior in c r and u modes or if tar is run in x mode as root -y c mode only compress the resulting archive with bzip2 1 in extract or list modes this option is ignored note that this tar implementation recognizes bzip2 compression automatically when reading archives -z --compress --uncompress c mode only compress the resulting archive with compress 1 in extract or list modes this option is ignored note that this tar implementation recognizes compress compression automatically when reading archives -z --gunzip --gzip c mode only compress the resulting archive with gzip 1 in extract or list modes this option is ignored note that this tar implementation recognizes gzip compression automatically when reading archives name macos 15 5 april 23 2024 macos 15 5",
  "keywords": [
    "tar",
    "manual",
    "page",
    "creates",
    "manipulates",
    "streaming",
    "archive",
    "files."
  ],
  "complexity": "intermediate",
  "hash": "8e6759206c0c82fe",
  "parsedAt": "2025-06-17T19:32:21.503Z",
  "parseVersion": "2.0.0",
  "isCommon": true,
  "hasInteractiveExamples": false,
  "hasDiagrams": false
}