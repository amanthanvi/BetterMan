{
  "name": "node",
  "section": 1,
  "title": "node manual page",
  "description": "Node.",
  "synopsis": "node [options] [v8-options] [-e string | script.js | -] [--] [arguments ...] node inspect [-e string | script.js | - | <host>:<port>] ... node [--v8-options]",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     Written and maintained by 1000+ contributors:\n     https://github.com/nodejs/node/blob/HEAD/AUTHORS\n\n\t\t\t\t     2018\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "--abort-on-uncaught-exception",
      "description": " Aborting instead of exiting causes a core file to be generated for analysis."
    },
    {
      "flag": "--allow-fs-read",
      "description": " Allow file system read access when using the permission model."
    },
    {
      "flag": "--allow-fs-write",
      "description": " Allow file system write access when using the permission model."
    },
    {
      "flag": "--allow-addons",
      "description": " Allow using native addons when using the permission model."
    },
    {
      "flag": "--allow-child-process",
      "description": " Allow spawning process when using the permission model."
    },
    {
      "flag": "--allow-worker",
      "description": " Allow creating worker threads when using the permission model."
    },
    {
      "flag": "--completion-bash",
      "description": " Print source-able bash completion script for Node.js."
    },
    {
      "flag": "--cpu-prof",
      "description": " Start the V8 CPU profiler on start up, and write the CPU profile to disk before exit. If --cpu-prof-dir is not specified, the profile will be written to the current working directory with a generated file name.",
      "shortFlag": "-C"
    },
    {
      "flag": "--cpu-prof-dir",
      "description": " The directory where the CPU profiles generated by --cpu-prof will be placed.  The default value is controlled by the"
    },
    {
      "flag": "--diagnostic-dir",
      "description": ".\tcommand-line option."
    },
    {
      "flag": "--cpu-prof-interval",
      "description": " The sampling interval in microseconds for the CPU profiles generated by --cpu-prof.  The default is 1000."
    },
    {
      "flag": "--cpu-prof-name",
      "description": " File name of the V8 CPU profile generated with --cpu-prof."
    },
    {
      "flag": "--diagnostic-dir",
      "description": " Set the directory for all diagnostic output files.  Default is current working directory.  Set the directory to which all diagnostic output files will be written to.  Defaults to current working directory.  Affects the default output directory of:"
    },
    {
      "flag": "--cpu-prof-dir",
      "description": ".  --heap-prof-dir.\t--redirect-warnings."
    },
    {
      "flag": "--disable-proto",
      "description": "=mode Disable the `Object.prototype.__proto__` property. If mode is `delete`, the property will be removed entirely. If mode is `throw`, accesses to the property will throw an exception with the code `ERR_PROTO_ACCESS`."
    },
    {
      "flag": "--disallow-code-generation-from-strings",
      "description": " Make built-in language features like `eval` and `new Function` that generate code from strings throw an exception instead. This does not affect the Node.js `vm` module."
    },
    {
      "flag": "--enable-fips",
      "description": " Enable FIPS-compliant crypto at startup.  Requires Node.js to be built with ./configure --openssl-fips."
    },
    {
      "flag": "--enable-source-maps",
      "description": " Enable Source Map V3 support for stack traces."
    },
    {
      "flag": "--experimental-default-type",
      "description": "=type Interpret as either ES modules or CommonJS modules input via"
    },
    {
      "flag": "--eval",
      "description": "or STDIN, when --input-type is unspecified;"
    },
    {
      "flag": "--experimental-global-webcrypto",
      "description": " Expose the Web Crypto API on the global scope."
    },
    {
      "flag": "--experimental-import-meta-resolve",
      "description": " Enable experimental ES modules support for import.meta.resolve()."
    },
    {
      "flag": "--experimental-loader",
      "description": "=module Specify the module to use as a custom module loader."
    },
    {
      "flag": "--experimental-network-imports",
      "description": " Enable experimental support for loading modules using `import` over `https:`."
    },
    {
      "flag": "--experimental-permission",
      "description": " Enable the experimental permission model."
    },
    {
      "flag": "--experimental-policy",
      "description": " Use the specified file as a security policy."
    },
    {
      "flag": "--experimental-shadow-realm",
      "description": " Use this flag to enable ShadowRealm support."
    },
    {
      "flag": "--experimental-test-coverage",
      "description": " Enable code coverage in the test runner."
    },
    {
      "flag": "--experimental-websocket",
      "description": " Enable experimental support for the WebSocket API."
    },
    {
      "flag": "--no-experimental-fetch",
      "description": " Disable experimental support for the Fetch API."
    },
    {
      "flag": "--no-experimental-global-customevent",
      "description": " Disable exposition of the CustomEvent on the global scope."
    },
    {
      "flag": "--no-experimental-global-webcrypto",
      "description": " Disable exposition of the Web Crypto API on the global scope."
    },
    {
      "flag": "--no-experimental-repl-await",
      "description": " Disable top-level await keyword support in REPL."
    },
    {
      "flag": "--experimental-vm-modules",
      "description": " Enable experimental ES module support in VM module."
    },
    {
      "flag": "--experimental-wasi-unstable-preview1",
      "description": " Enable experimental WebAssembly System Interface support. This flag is no longer required as WASI is enabled by default."
    },
    {
      "flag": "--experimental-wasm-modules",
      "description": " Enable experimental WebAssembly module support."
    },
    {
      "flag": "--force-context-aware",
      "description": " Disable loading native addons that are not context-aware."
    },
    {
      "flag": "--force-fips",
      "description": " Force FIPS-compliant crypto on startup (Cannot be disabled from script code).  Same requirements as --enable-fips."
    },
    {
      "flag": "--frozen-intrinsics",
      "description": " Enable experimental frozen intrinsics support."
    },
    {
      "flag": "--heapsnapshot-near-heap-limit",
      "description": "=max_count Generate heap snapshot when the V8 heap usage is approaching the heap limit.  No more than the specified number of snapshots will be generated."
    },
    {
      "flag": "--heapsnapshot-signal",
      "description": "=signal Generate heap snapshot on specified signal."
    },
    {
      "flag": "--heap-prof",
      "description": " Start the V8 heap profiler on start up, and write the heap profile to disk before exit. If --heap-prof-dir is not specified, the profile will be written to the current working directory with a generated file name."
    },
    {
      "flag": "--heap-prof-dir",
      "description": " The directory where the heap profiles generated by --heap-prof will be placed.  The default value is controlled by the"
    },
    {
      "flag": "--diagnostic-dir",
      "description": ".\tcommand-line option."
    },
    {
      "flag": "--heap-prof-interval",
      "description": " The average sampling interval in bytes for the heap profiles generated by --heap-prof.\tThe default is 512 * 1024."
    },
    {
      "flag": "--heap-prof-name",
      "description": " File name of the V8 heap profile generated with --heap-prof."
    },
    {
      "flag": "--icu-data-dir",
      "description": "=file Specify ICU data load path.  Overrides NODE_ICU_DATA."
    },
    {
      "flag": "--input-type",
      "description": "=type Set the module resolution type for input via --eval, --print or STDIN."
    },
    {
      "flag": "--inspect-brk",
      "description": "=[host:]port Activate inspector on host:port and break at start of user script."
    },
    {
      "flag": "--inspect-port",
      "description": "=[host:]port Set the host:port to be used when the inspector is activated."
    },
    {
      "flag": "--inspect-publish-uid",
      "description": "=stderr,http Specify how the inspector WebSocket URL is exposed.  Valid values are stderr and http.  Default is stderr,http."
    },
    {
      "flag": "--inspect",
      "description": "=[host:]port Activate inspector on host:port.  Default is 127.0.0.1:9229. V8 Inspector integration allows attaching Chrome DevTools and IDEs to Node.js instances for debugging and profiling.  It uses the Chrome DevTools Protocol."
    },
    {
      "flag": "--insecure-http-parser",
      "description": " Use an insecure HTTP parser that accepts invalid HTTP headers. This may allow interoperability with non-conformant HTTP implementations. It may also allow request smuggling and other HTTP attacks that rely on invalid headers being accepted. Avoid using this option."
    },
    {
      "flag": "--jitless",
      "description": " Disable runtime allocation of executable memory. This may be required on some platforms for security reasons. It can also reduce attack surface on other platforms, but the performance impact may be severe. This flag is inherited from V8 and is subject to change upstream. It may disappear in a non-semver-major release."
    },
    {
      "flag": "--max-http-header-size",
      "description": "=size Specify the maximum size of HTTP headers in bytes. Defaults to 16 KiB."
    },
    {
      "flag": "--napi-modules",
      "description": " This option is a no-op.  It is kept for compatibility."
    },
    {
      "flag": "--no-deprecation",
      "description": " Silence deprecation warnings."
    },
    {
      "flag": "--no-extra-info-on-fatal-exception",
      "description": " Hide extra information on fatal exception that causes exit."
    },
    {
      "flag": "--no-force-async-hooks-checks",
      "description": " Disable runtime checks for `async_hooks`.\tThese will still be enabled dynamically when `async_hooks` is enabled."
    },
    {
      "flag": "--no-addons",
      "description": " Disable the `node-addons` exports condition as well as disable loading native addons. When `--no-addons` is specified, calling `process.dlopen` or requiring a native C++ addon will fail and throw an exception."
    },
    {
      "flag": "--no-global-search-paths",
      "description": " Do not search modules from global paths."
    },
    {
      "flag": "--no-warnings",
      "description": " Silence all process warnings (including deprecations)."
    },
    {
      "flag": "--node-memory-debug",
      "description": " Enable extra debug checks for memory leaks in Node.js internals. This is usually only useful for developers debugging Node.js itself."
    },
    {
      "flag": "--openssl-config",
      "description": "=file Load an OpenSSL configuration file on startup.  Among other uses, this can be used to enable FIPS-compliant crypto if Node.js is built with ./configure --openssl-fips."
    },
    {
      "flag": "--pending-deprecation",
      "description": " Emit pending deprecation warnings."
    },
    {
      "flag": "--policy-integrity",
      "description": "=sri Instructs Node.js to error prior to running any code if the policy does not have the specified integrity. It expects a Subresource Integrity string as a parameter."
    },
    {
      "flag": "--preserve-symlinks",
      "description": " Instructs the module loader to preserve symbolic links when resolving and caching modules other than the main module."
    },
    {
      "flag": "--preserve-symlinks-main",
      "description": " Instructs the module loader to preserve symbolic links when resolving and caching the main module."
    },
    {
      "flag": "--prof",
      "description": "Generate V8 profiler output."
    },
    {
      "flag": "--prof-process",
      "description": " Process V8 profiler output generated using the V8 option --prof."
    },
    {
      "flag": "--redirect-warnings",
      "description": "=file Write process warnings to the given file instead of printing to stderr."
    },
    {
      "flag": "--report-compact",
      "description": " Write diagnostic reports in a compact format, single-line JSON."
    },
    {
      "flag": "--report-dir",
      "description": "--report-directory Location at which the diagnostic report will be generated.  The `file` name may be an absolute path. If it is not, the default directory it will be written to is controlled by the"
    },
    {
      "flag": "--diagnostic-dir",
      "description": ".\tcommand-line option."
    },
    {
      "flag": "--report-filename",
      "description": " Name of the file to which the diagnostic report will be written."
    },
    {
      "flag": "--report-on-fatalerror",
      "description": " Enables the diagnostic report to be triggered on fatal errors (internal errors within the Node.js runtime such as out of memory) that leads to termination of the application. Useful to inspect various diagnostic data elements such as heap, stack, event loop state, resource consumption etc. to reason about the fatal error."
    },
    {
      "flag": "--report-on-signal",
      "description": " Enables diagnostic report to be generated upon receiving the specified (or predefined) signal to the running Node.js process. Default signal is SIGUSR2."
    },
    {
      "flag": "--report-signal",
      "description": " Sets or resets the signal for diagnostic report generation (not supported on Windows). Default signal is SIGUSR2."
    },
    {
      "flag": "--report-uncaught-exception",
      "description": " Enables diagnostic report to be generated on un-caught exceptions. Useful when inspecting JavaScript stack in conjunction with native stack and other runtime environment data."
    },
    {
      "flag": "--secure-heap",
      "description": "=n Specify the size of the OpenSSL secure heap. Any value less than 2 disables the secure heap. The default is 0. The value must be a power of two."
    },
    {
      "flag": "--secure-heap-min",
      "description": "=n Specify the minimum allocation from the OpenSSL secure heap. The default is 2. The value must be a power of two."
    },
    {
      "flag": "--test",
      "description": "Starts the Node.js command line test runner."
    },
    {
      "flag": "--test-concurrency",
      "description": " The maximum number of test files that the test runner CLI will execute concurrently."
    },
    {
      "flag": "--test-name-pattern",
      "description": " A regular expression that configures the test runner to only execute tests whose name matches the provided pattern."
    },
    {
      "flag": "--test-reporter",
      "description": " A test reporter to use when running tests."
    },
    {
      "flag": "--test-reporter-destination",
      "description": " The destination for the corresponding test reporter."
    },
    {
      "flag": "--test-only",
      "description": " Configures the test runner to only execute top level tests that have the `only` option set."
    },
    {
      "flag": "--test-shard",
      "description": " Test suite shard to execute in a format of <index>/<total>."
    },
    {
      "flag": "--test-timeout",
      "description": " A number of milliseconds the test execution will fail after."
    },
    {
      "flag": "--throw-deprecation",
      "description": " Throw errors for deprecations."
    },
    {
      "flag": "--title",
      "description": "=title Specify process.title on startup."
    },
    {
      "flag": "--tls-cipher-list",
      "description": "=list Specify an alternative default TLS cipher list.  Requires Node.js to be built with crypto support. (Default)"
    },
    {
      "flag": "--tls-keylog",
      "description": "=file Log TLS key material to a file. The key material is in NSS SSLKEYLOGFILE format and can be used by software (such as Wireshark) to decrypt the TLS traffic."
    },
    {
      "flag": "--tls-max-v1",
      "description": ".2 Set default  maxVersion to 'TLSv1.2'. Use to disable support for TLSv1.3."
    },
    {
      "flag": "--tls-max-v1",
      "description": ".3 Set default  maxVersion to 'TLSv1.3'. Use to enable support for TLSv1.3."
    },
    {
      "flag": "--tls-min-v1",
      "description": ".0 Set default minVersion to 'TLSv1'. Use for compatibility with old TLS clients or servers."
    },
    {
      "flag": "--tls-min-v1",
      "description": ".1 Set default minVersion to 'TLSv1.1'. Use for compatibility with old TLS clients or servers."
    },
    {
      "flag": "--tls-min-v1",
      "description": ".2 Set default minVersion to 'TLSv1.2'. This is the default for 12.x and later, but the option is supported for compatibility with older Node.js versions."
    },
    {
      "flag": "--tls-min-v1",
      "description": ".3 Set default minVersion to 'TLSv1.3'. Use to disable support for TLSv1.2 in favour of TLSv1.3, which is more secure."
    },
    {
      "flag": "--trace-atomics-wait",
      "description": " Print short summaries of calls to Atomics.wait().\tThis flag is deprecated."
    },
    {
      "flag": "--trace-deprecation",
      "description": " Print stack traces for deprecations."
    },
    {
      "flag": "--trace-event-categories",
      "description": "categories A comma-separated list of categories that should be traced when trace event tracing is enabled using --trace-events-enabled."
    },
    {
      "flag": "--trace-event-file-pattern",
      "description": "pattern Template string specifying the filepath for the trace event data, it supports ${rotation} and ${pid}."
    },
    {
      "flag": "--trace-events-enabled",
      "description": " Enable the collection of trace event tracing information."
    },
    {
      "flag": "--trace-exit",
      "description": " Prints a stack trace whenever an environment is exited proactively, i.e. invoking `process.exit()`."
    },
    {
      "flag": "--trace-sigint",
      "description": " Prints a stack trace on SIGINT."
    },
    {
      "flag": "--trace-sync-io",
      "description": " Print a stack trace whenever synchronous I/O is detected after the first turn of the event loop."
    },
    {
      "flag": "--trace-tls",
      "description": " Prints TLS packet trace information to stderr."
    },
    {
      "flag": "--trace-uncaught",
      "description": " Print stack traces for uncaught exceptions; usually, the stack trace associated with the creation of an Error is printed, whereas this makes Node.js also print the stack trace associated with throwing the value (which does not need to be an Error instance). Enabling this option may affect garbage collection behavior negatively."
    },
    {
      "flag": "--trace-warnings",
      "description": " Print stack traces for process warnings (including deprecations)."
    },
    {
      "flag": "--track-heap-objects",
      "description": " Track heap object allocations for heap snapshots."
    },
    {
      "flag": "--unhandled-rejections",
      "description": "=mode Define the behavior for unhandled rejections. Can be one of `strict` (raise an error), `warn` (enforce warnings) or `none` (silence warnings)."
    },
    {
      "flag": "--use-bundled-ca",
      "description": ", --use-openssl-ca Use bundled Mozilla CA store as supplied by current Node.js version or use OpenSSL's default CA store.  The default store is selectable at build-time. The bundled CA store, as supplied by Node.js, is a snapshot of Mozilla CA store that is fixed at release time.  It is identical on all supported platforms. Using OpenSSL store allows for external modifications of the store.  For most Linux and BSD distributions, this store is maintained by the distribution maintainers and system administrators.  OpenSSL CA store location is dependent on configuration of the OpenSSL library but this can be altered at runtime using environment variables. See SSL_CERT_DIR and SSL_CERT_FILE."
    },
    {
      "flag": "--use-largepages",
      "description": "=mode Re-map the Node.js static code to large memory pages at startup. If supported on the target system, this will cause the Node.js static code to be moved onto 2 MiB pages instead of 4 KiB pages. mode must have one of the following values: `off` (the default value, meaning do not map), `on` (map and ignore failure, reporting it to stderr), or `silent` (map and silently ignore failure)."
    },
    {
      "flag": "--v8-options",
      "description": " Print V8 command-line options.",
      "optional": true
    },
    {
      "flag": "--v8-pool-size",
      "description": "=num Set V8's thread pool size which will be used to allocate background jobs.  If set to 0 then V8 will choose an appropriate size of the thread pool based on the number of online processors. If the value provided is larger than V8's maximum, then the largest value will be chosen."
    },
    {
      "flag": "--zero-fill-buffers",
      "description": " Automatically zero-fills all newly allocated Buffer and SlowBuffer instances."
    },
    {
      "flag": "-c",
      "description": ", --check Check the script's syntax without executing it.  Exits with an error code if script is invalid."
    },
    {
      "flag": "-e",
      "description": " Evaluate string as JavaScript.",
      "optional": true
    },
    {
      "flag": "-h",
      "description": ", --help Print command-line options.  The output of this option is less detailed than this document."
    },
    {
      "flag": "-i",
      "description": ", --interactive Open the REPL even if stdin does not appear to be a terminal."
    },
    {
      "flag": "-p",
      "description": ", --print string Identical to -e, but prints the result."
    },
    {
      "flag": "-r",
      "description": ", --require module Preload the specified module at startup.  Follows `require()`'s module resolution rules.  module may be either a path to a file, or a Node.js module name."
    },
    {
      "flag": "-v",
      "description": ", --version Print node's version."
    }
  ],
  "examples": [],
  "relatedCommands": [
    "node",
    "server-side",
    "runtime",
    "options",
    "v8-options",
    "string",
    "script",
    "arguments",
    "inspect",
    "host",
    "port",
    "set",
    "libraries",
    "which",
    "allows"
  ],
  "seeAlso": [],
  "metadata": {
    "author": "IZED"
  },
  "searchContent": "node node manual page node node options v8-options -e string script js - -- arguments node inspect -e string script js - host port node --v8-options node manual page node --abort-on-uncaught-exception aborting instead of exiting causes a core file to be generated for analysis --allow-fs-read allow file system read access when using the permission model --allow-fs-write allow file system write access when using the permission model --allow-addons allow using native addons when using the permission model --allow-child-process allow spawning process when using the permission model --allow-worker allow creating worker threads when using the permission model --completion-bash print source-able bash completion script for node js --cpu-prof start the v8 cpu profiler on start up and write the cpu profile to disk before exit if --cpu-prof-dir is not specified the profile will be written to the current working directory with a generated file name --cpu-prof-dir the directory where the cpu profiles generated by --cpu-prof will be placed the default value is controlled by the --diagnostic-dir command-line option --cpu-prof-interval the sampling interval in microseconds for the cpu profiles generated by --cpu-prof the default is 1000 --cpu-prof-name file name of the v8 cpu profile generated with --cpu-prof --diagnostic-dir set the directory for all diagnostic output files default is current working directory set the directory to which all diagnostic output files will be written to defaults to current working directory affects the default output directory of --cpu-prof-dir --heap-prof-dir --redirect-warnings --disable-proto mode disable the object prototype proto property if mode is delete the property will be removed entirely if mode is throw accesses to the property will throw an exception with the code err proto access --disallow-code-generation-from-strings make built-in language features like eval and new function that generate code from strings throw an exception instead this does not affect the node js vm module --enable-fips enable fips-compliant crypto at startup requires node js to be built with configure --openssl-fips --enable-source-maps enable source map v3 support for stack traces --experimental-default-type type interpret as either es modules or commonjs modules input via --eval or stdin when --input-type is unspecified --experimental-global-webcrypto expose the web crypto api on the global scope --experimental-import-meta-resolve enable experimental es modules support for import meta resolve --experimental-loader module specify the module to use as a custom module loader --experimental-network-imports enable experimental support for loading modules using import over https --experimental-permission enable the experimental permission model --experimental-policy use the specified file as a security policy --experimental-shadow-realm use this flag to enable shadowrealm support --experimental-test-coverage enable code coverage in the test runner --experimental-websocket enable experimental support for the websocket api --no-experimental-fetch disable experimental support for the fetch api --no-experimental-global-customevent disable exposition of the customevent on the global scope --no-experimental-global-webcrypto disable exposition of the web crypto api on the global scope --no-experimental-repl-await disable top-level await keyword support in repl --experimental-vm-modules enable experimental es module support in vm module --experimental-wasi-unstable-preview1 enable experimental webassembly system interface support this flag is no longer required as wasi is enabled by default --experimental-wasm-modules enable experimental webassembly module support --force-context-aware disable loading native addons that are not context-aware --force-fips force fips-compliant crypto on startup cannot be disabled from script code same requirements as --enable-fips --frozen-intrinsics enable experimental frozen intrinsics support --heapsnapshot-near-heap-limit max count generate heap snapshot when the v8 heap usage is approaching the heap limit no more than the specified number of snapshots will be generated --heapsnapshot-signal signal generate heap snapshot on specified signal --heap-prof start the v8 heap profiler on start up and write the heap profile to disk before exit if --heap-prof-dir is not specified the profile will be written to the current working directory with a generated file name --heap-prof-dir the directory where the heap profiles generated by --heap-prof will be placed the default value is controlled by the --diagnostic-dir command-line option --heap-prof-interval the average sampling interval in bytes for the heap profiles generated by --heap-prof the default is 512 1024 --heap-prof-name file name of the v8 heap profile generated with --heap-prof --icu-data-dir file specify icu data load path overrides node icu data --input-type type set the module resolution type for input via --eval --print or stdin --inspect-brk host port activate inspector on host port and break at start of user script --inspect-port host port set the host port to be used when the inspector is activated --inspect-publish-uid stderr http specify how the inspector websocket url is exposed valid values are stderr and http default is stderr http --inspect host port activate inspector on host port default is 127 0 0 1 9229 v8 inspector integration allows attaching chrome devtools and ides to node js instances for debugging and profiling it uses the chrome devtools protocol --insecure-http-parser use an insecure http parser that accepts invalid http headers this may allow interoperability with non-conformant http implementations it may also allow request smuggling and other http attacks that rely on invalid headers being accepted avoid using this option --jitless disable runtime allocation of executable memory this may be required on some platforms for security reasons it can also reduce attack surface on other platforms but the performance impact may be severe this flag is inherited from v8 and is subject to change upstream it may disappear in a non-semver-major release --max-http-header-size size specify the maximum size of http headers in bytes defaults to 16 kib --napi-modules this option is a no-op it is kept for compatibility --no-deprecation silence deprecation warnings --no-extra-info-on-fatal-exception hide extra information on fatal exception that causes exit --no-force-async-hooks-checks disable runtime checks for async hooks these will still be enabled dynamically when async hooks is enabled --no-addons disable the node-addons exports condition as well as disable loading native addons when --no-addons is specified calling process dlopen or requiring a native c addon will fail and throw an exception --no-global-search-paths do not search modules from global paths --no-warnings silence all process warnings including deprecations --node-memory-debug enable extra debug checks for memory leaks in node js internals this is usually only useful for developers debugging node js itself --openssl-config file load an openssl configuration file on startup among other uses this can be used to enable fips-compliant crypto if node js is built with configure --openssl-fips --pending-deprecation emit pending deprecation warnings --policy-integrity sri instructs node js to error prior to running any code if the policy does not have the specified integrity it expects a subresource integrity string as a parameter --preserve-symlinks instructs the module loader to preserve symbolic links when resolving and caching modules other than the main module --preserve-symlinks-main instructs the module loader to preserve symbolic links when resolving and caching the main module --prof generate v8 profiler output --prof-process process v8 profiler output generated using the v8 option --prof --redirect-warnings file write process warnings to the given file instead of printing to stderr --report-compact write diagnostic reports in a compact format single-line json --report-dir --report-directory location at which the diagnostic report will be generated the file name may be an absolute path if it is not the default directory it will be written to is controlled by the --diagnostic-dir command-line option --report-filename name of the file to which the diagnostic report will be written --report-on-fatalerror enables the diagnostic report to be triggered on fatal errors internal errors within the node js runtime such as out of memory that leads to termination of the application useful to inspect various diagnostic data elements such as heap stack event loop state resource consumption etc to reason about the fatal error --report-on-signal enables diagnostic report to be generated upon receiving the specified or predefined signal to the running node js process default signal is sigusr2 --report-signal sets or resets the signal for diagnostic report generation not supported on windows default signal is sigusr2 --report-uncaught-exception enables diagnostic report to be generated on un-caught exceptions useful when inspecting javascript stack in conjunction with native stack and other runtime environment data --secure-heap n specify the size of the openssl secure heap any value less than 2 disables the secure heap the default is 0 the value must be a power of two --secure-heap-min n specify the minimum allocation from the openssl secure heap the default is 2 the value must be a power of two --test starts the node js command line test runner --test-concurrency the maximum number of test files that the test runner cli will execute concurrently --test-name-pattern a regular expression that configures the test runner to only execute tests whose name matches the provided pattern --test-reporter a test reporter to use when running tests --test-reporter-destination the destination for the corresponding test reporter --test-only configures the test runner to only execute top level tests that have the only option set --test-shard test suite shard to execute in a format of index total --test-timeout a number of milliseconds the test execution will fail after --throw-deprecation throw errors for deprecations --title title specify process title on startup --tls-cipher-list list specify an alternative default tls cipher list requires node js to be built with crypto support default --tls-keylog file log tls key material to a file the key material is in nss sslkeylogfile format and can be used by software such as wireshark to decrypt the tls traffic --tls-max-v1 2 set default maxversion to tlsv1 2 use to disable support for tlsv1 3 --tls-max-v1 3 set default maxversion to tlsv1 3 use to enable support for tlsv1 3 --tls-min-v1 0 set default minversion to tlsv1 use for compatibility with old tls clients or servers --tls-min-v1 1 set default minversion to tlsv1 1 use for compatibility with old tls clients or servers --tls-min-v1 2 set default minversion to tlsv1 2 this is the default for 12 x and later but the option is supported for compatibility with older node js versions --tls-min-v1 3 set default minversion to tlsv1 3 use to disable support for tlsv1 2 in favour of tlsv1 3 which is more secure --trace-atomics-wait print short summaries of calls to atomics wait this flag is deprecated --trace-deprecation print stack traces for deprecations --trace-event-categories categories a comma-separated list of categories that should be traced when trace event tracing is enabled using --trace-events-enabled --trace-event-file-pattern pattern template string specifying the filepath for the trace event data it supports rotation and pid --trace-events-enabled enable the collection of trace event tracing information --trace-exit prints a stack trace whenever an environment is exited proactively i e invoking process exit --trace-sigint prints a stack trace on sigint --trace-sync-io print a stack trace whenever synchronous i o is detected after the first turn of the event loop --trace-tls prints tls packet trace information to stderr --trace-uncaught print stack traces for uncaught exceptions usually the stack trace associated with the creation of an error is printed whereas this makes node js also print the stack trace associated with throwing the value which does not need to be an error instance enabling this option may affect garbage collection behavior negatively --trace-warnings print stack traces for process warnings including deprecations --track-heap-objects track heap object allocations for heap snapshots --unhandled-rejections mode define the behavior for unhandled rejections can be one of strict raise an error warn enforce warnings or none silence warnings --use-bundled-ca --use-openssl-ca use bundled mozilla ca store as supplied by current node js version or use openssl s default ca store the default store is selectable at build-time the bundled ca store as supplied by node js is a snapshot of mozilla ca store that is fixed at release time it is identical on all supported platforms using openssl store allows for external modifications of the store for most linux and bsd distributions this store is maintained by the distribution maintainers and system administrators openssl ca store location is dependent on configuration of the openssl library but this can be altered at runtime using environment variables see ssl cert dir and ssl cert file --use-largepages mode re-map the node js static code to large memory pages at startup if supported on the target system this will cause the node js static code to be moved onto 2 mib pages instead of 4 kib pages mode must have one of the following values off the default value meaning do not map on map and ignore failure reporting it to stderr or silent map and silently ignore failure --v8-options print v8 command-line options --v8-pool-size num set v8 s thread pool size which will be used to allocate background jobs if set to 0 then v8 will choose an appropriate size of the thread pool based on the number of online processors if the value provided is larger than v8 s maximum then the largest value will be chosen --zero-fill-buffers automatically zero-fills all newly allocated buffer and slowbuffer instances -c --check check the script s syntax without executing it exits with an error code if script is invalid -e evaluate string as javascript -h --help print command-line options the output of this option is less detailed than this document -i --interactive open the repl even if stdin does not appear to be a terminal -p --print string identical to -e but prints the result -r --require module preload the specified module at startup follows require s module resolution rules module may be either a path to a file or a node js module name -v --version print node s version name",
  "keywords": [
    "node",
    "manual",
    "page",
    "node."
  ],
  "complexity": "advanced",
  "hash": "798265d70a624de8",
  "parsedAt": "2025-06-17T19:32:17.766Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": false,
  "hasDiagrams": false
}