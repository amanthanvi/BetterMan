{
  "name": "csplit",
  "section": 1,
  "title": "csplit manual page",
  "description": "The csplit utility splits file into pieces using the patterns args.",
  "synopsis": "csplit [-ks] [-f prefix] [-n number] file args ...",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "macOS 15.5\t\t       February 6, 2014 \t\t    macOS 15.5",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     csplit – split files based on context\n",
        "     csplit [-ks] [-f prefix] [-n number] file args ...\n",
        "     The csplit utility splits file into pieces using the patterns args.  If\n     file is a dash (‘-’), csplit reads from standard input.\n\n     Files are created with a prefix of “xx” and two decimal digits.  The size\n     of each file is written to standard output as it is created.  If an error\n     occurs whilst files are being created, or a HUP, INT, or TERM signal is\n     received, all files previously written are removed.\n\n     The options are as follows:\n\n     -f prefix\n\t     Create file names beginning with prefix, instead of “xx”.\n\n     -k      Do not remove previously created files if an error occurs or a\n\t     HUP, INT, or TERM signal is received.\n\n     -n number\n\t     Create file names beginning with number of decimal digits after\n\t     the prefix, instead of 2.\n\n     -s      Do not write the size of each output file to standard output as\n\t     it is created.\n\n     The args operands may be a combination of the following patterns:\n\n     /regexp/[[+|-]offset]\n\t     Create a file containing the input from the current line to (but\n\t     not including) the next line matching the given basic regular\n\t     expression.  An optional offset from the line that matched may be\n\t     specified.\n\n     %regexp%[[+|-]offset]\n\t     Same as above but a file is not created for the output.\n\n     line_no\n\t     Create containing the input from the current line to (but not\n\t     including) the specified line number.\n\n     {num}   Repeat the previous pattern the specified number of times.  If it\n\t     follows a line number pattern, a new file will be created for\n\t     each line_no lines, num times.  The first line of the file is\n\t     line number 1 for historic reasons.\n\n     After all the patterns have been processed, the remaining input data (if\n     there is any) will be written to a new file.\n\n     Requesting to split at a line before the current line number or past the\n     end of the file will result in an error.\n",
        "     The LANG, LC_ALL, LC_COLLATE and LC_CTYPE environment variables affect\n     the execution of csplit as described in environ(7).\n",
        "     The csplit utility exits 0 on success, and >0 if an error occurs.\n",
        "     Split the mdoc(7) file foo.1 into one file for each section (up to 21\n     plus one for the rest, if any):\n\n\t   csplit -k foo.1 '%^\\.Sh%' '/^\\.Sh/' '{20}'\n\n     Split standard input after the first 99 lines and every 100 lines\n     thereafter:\n\n\t   csplit -k - 100 '{19}'\n",
        "     sed(1), split(1), re_format(7)\n",
        "     The csplit utility conforms to IEEE Std 1003.1-2001 (“POSIX.1”).\n",
        "     A csplit command appeared in PWB UNIX.\n",
        "     Input lines are limited to LINE_MAX (2048) bytes in length.\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "-f",
      "description": " Create file names beginning with prefix, instead of “xx”.",
      "optional": true
    },
    {
      "flag": "-k",
      "description": "Do not remove previously created files if an error occurs or a HUP, INT, or TERM signal is received."
    },
    {
      "flag": "-n",
      "description": " Create file names beginning with number of decimal digits after the prefix, instead of 2.",
      "optional": true
    },
    {
      "flag": "-s",
      "description": "Do not write the size of each output file to standard output as it is created. The args operands may be a combination of the following patterns: /regexp/[[+|-]offset] Create a file containing the input from the current line to (but not including) the next line matching the given basic regular expression.  An optional offset from the line that matched may be specified. %regexp%[[+|-]offset] Same as above but a file is not created for the output. line_no Create containing the input from the current line to (but not including) the specified line number. {num}   Repeat the previous pattern the specified number of times.  If it follows a line number pattern, a new file will be created for each line_no lines, num times.  The first line of the file is line number 1 for historic reasons. After all the patterns have been processed, the remaining input data (if there is any) will be written to a new file. Requesting to split at a line before the current line number or past the end of the file will result in an error."
    }
  ],
  "examples": [],
  "relatedCommands": [
    "sed",
    "split",
    "re_format",
    "csplit",
    "based",
    "context",
    "prefix",
    "number",
    "args",
    "utility",
    "splits",
    "into",
    "pieces",
    "using",
    "patterns"
  ],
  "seeAlso": [
    {
      "name": "sed",
      "section": 1
    },
    {
      "name": "split",
      "section": 1
    },
    {
      "name": "re_format",
      "section": 7
    }
  ],
  "metadata": {},
  "searchContent": "csplit csplit manual page the csplit utility splits file into pieces using the patterns args csplit -ks -f prefix -n number file args csplit manual page utility splits into pieces using patterns args -f create file names beginning with prefix instead of xx -k do not remove previously created files if an error occurs or a hup int or term signal is received -n create file names beginning with number of decimal digits after the prefix instead of 2 -s do not write the size of each output file to standard output as it is created the args operands may be a combination of the following patterns regexp - offset create a file containing the input from the current line to but not including the next line matching the given basic regular expression an optional offset from the line that matched may be specified regexp - offset same as above but a file is not created for the output line no create containing the input from the current line to but not including the specified line number num repeat the previous pattern the specified number of times if it follows a line number pattern a new file will be created for each line no lines num times the first line of the file is line number 1 for historic reasons after all the patterns have been processed the remaining input data if there is any will be written to a new file requesting to split at a line before the current line number or past the end of the file will result in an error name macos 15 5 february 6 2014 macos 15 5",
  "keywords": [
    "csplit",
    "manual",
    "page",
    "utility",
    "splits",
    "into",
    "pieces",
    "using",
    "patterns",
    "args."
  ],
  "complexity": "basic",
  "hash": "dd3d1e9767d50074",
  "parsedAt": "2025-06-17T19:42:00.678Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": false,
  "hasDiagrams": false
}