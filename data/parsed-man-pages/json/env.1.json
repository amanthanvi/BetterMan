{
  "name": "env",
  "section": 1,
  "title": "env manual page",
  "description": "The env utility executes another utility after modifying the environment as specified on the command line.",
  "synopsis": "env [-0iv] [-u name] [name=value ...] env [-iv] [-C altwd] [-P altpath] [-S string] [-u name] [name=value ...] utility [argument ...]",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "utility [argument ...]",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     env – set environment and execute command, or print environment\n",
        "     env [-0iv] [-u name] [name=value ...]\n     env [-iv] [-C altwd] [-P altpath] [-S string] [-u name] [name=value ...]"
      ]
    },
    {
      "id": "description",
      "title": "DESCRIPTION",
      "content": "macOS 15.5\t\t\tOctober 8, 2024 \t\t    macOS 15.5",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     The env utility executes another utility after modifying the environment\n     as specified on the command line.\tEach name=value option specifies the\n     setting of an environment variable, name, with a value of value.  All\n     such environment variables are set before the utility is executed.\n\n     The options are as follows:\n\n     -0      End each output line with NUL, not newline.\n\n     -i      Execute the utility with only those environment variables\n\t     specified by name=value options.  The environment inherited by\n\t     env is ignored completely.\n\n     -C altwd\n\t     Change to the specified alternate working directory before\n\t     executing the specified utility program.\n\n     -P altpath\n\t     Search the set of directories as specified by altpath to locate\n\t     the specified utility program, instead of using the value of the\n\t     PATH environment variable.\n\n     -S string\n\t     Split apart the given string into multiple strings, and process\n\t     each of the resulting strings as separate arguments to the env\n\t     utility.  The -S option recognizes some special character escape\n\t     sequences and also supports environment-variable substitution, as\n\t     described below.\n\n     -u name\n\t     If the environment variable name is in the environment, then\n\t     remove it before processing the remaining options.  This is\n\t     similar to the unset command in sh(1).  The value for name must\n\t     not include the ‘=’ character.\n\n     -v      Print verbose information for each step of processing done by the\n\t     env utility.  Additional information will be printed if -v is\n\t     specified multiple times.\n\n     The above options are only recognized when they are specified before any\n     name=value options.\n\n     If no utility is specified, env prints out the names and values of the\n     variables in the environment.  Each name/value pair is separated by a new\n     line unless -0 is specified, in which case name/value pairs are separated\n     by NUL.  Both -0 and utility may not be specified together.\n\n     The env utility does not handle values of utility which have an equals\n     sign (‘=’) in their name, for obvious reasons.  This can easily be worked\n     around by interposing the command(1) utility, which simply executes its\n     arguments; see EXAMPLES below.\n",
        "     The processing of the -S option will split the given string into separate\n     arguments based on any space or <tab> characters found in the string.\n     Each of those new arguments will then be treated as if it had been\n     specified as a separate argument on the original env command.\n\n     Spaces and tabs may be embedded in one of those new arguments by using\n     single (“'”) or double (‘\"’) quotes, or backslashes (‘\\’).  Single quotes\n     will escape all non-single quote characters, up to the matching single\n     quote.  Double quotes will escape all non-double quote characters, up to\n     the matching double quote.  It is an error if the end of the string is\n     reached before the matching quote character.\n\n     If -S would create a new argument that starts with the ‘#’ character,\n     then that argument and the remainder of the string will be ignored.  The\n     ‘\\#’ sequence can be used when you want a new argument to start with a\n     ‘#’ character, without causing the remainder of the string to be skipped.\n\n     While processing the string value, -S processing will treat certain\n     character combinations as escape sequences which represent some action to\n     take.  The character escape sequences are in backslash notation.  The\n     characters and their meanings are as follows:\n\n\t   \\c\t   Ignore the remaining characters in the string.  This must\n\t\t   not appear inside a double-quoted string.\n\t   \\f\t   Replace with a <form-feed> character.\n\t   \\n\t   Replace with a <new-line> character.\n\t   \\r\t   Replace with a <carriage return> character.\n\t   \\t\t   Replace with a <tab> character.\n\t   \\v\t   Replace with a <vertical tab> character.\n\t   \\#\t   Replace with a ‘#’ character.  This would be useful when\n\t\t   you need a ‘#’ as the first character in one of the\n\t\t   arguments created by splitting apart the given string.\n\t   \\$\t   Replace with a ‘$’ character.\n\t   \\_\t   If this is found inside of a double-quoted string, then\n\t\t   replace it with a single blank.  If this is found outside\n\t\t   of a quoted string, then treat this as the separator\n\t\t   character between new arguments in the original string.\n\t   \\\"\t   Replace with a <double quote> character.\n\t   \\´\t   Replace with a <single quote> character.\n\t   \\\\\t   Replace with a backslash character.\n\n     The sequences for <single-quote> and backslash are the only sequences\n     which are recognized inside of a single-quoted string.  The other\n     sequences have no special meaning inside a single-quoted string.  All\n     escape sequences are recognized inside of a double-quoted string.\tIt is\n     an error if a single ‘\\’ character is followed by a character other than\n     the ones listed above.\n\n     The processing of -S also supports substitution of values from\n     environment variables.  To do this, the name of the environment variable\n     must be inside of ‘${}’, such as: ${SOMEVAR}.  The common shell syntax of\n     $SOMEVAR is not supported.  All values substituted will be the values of\n     the environment variables as they were when the env utility was\n     originally invoked.  Those values will not be checked for any of the\n     escape sequences as described above.  And any settings of name=value will\n     not effect the values used for substitution in -S processing.\n\n     Also, -S processing cannot reference the value of the special parameters\n     which are defined by most shells.\tFor instance, -S cannot recognize\n     special parameters such as: ‘$*’, ‘$@’, ‘$#’, ‘$?’ or ‘$$’ if they appear\n     inside the given string.\n",
        "     The env utility is often used as the interpreter on the first line of\n     interpreted scripts, as described in execve(2).\n\n     Note that the ‘#!’ (first line) of an interpreted script is parsed\n     differently on Darwin than it is on many other common systems.  The first\n     line will be split into separate arguments based on any whitespace (space\n     or ⟨tab⟩ characters) found in the line.  So, if a script named\n     /usr/local/bin/someport has a first line of:\n\n\t   #!/usr/local/bin/php -n -q -dsafe_mode=0\n\n     then the /usr/local/bin/php program will be started with the arguments\n     of:\n\n\t   arg[0] = '/usr/local/bin/php'\n\t   arg[1] = '-n'\n\t   arg[2] = '-q'\n\t   arg[3] = '-dsafe_mode=0'\n\t   arg[4] = '/usr/local/bin/someport'\n\n     plus any arguments the user specified when executing someport.  However,\n     this processing of multiple options on the ‘#!’ line is not the way many\n     other operating system parse the first line of an interpreted script.\n     Notably, the same first line on other systems will result in\n     /usr/local/bin/php being started with the arguments of:\n\n\t   arg[0] = '/usr/local/bin/php'\n\t   arg[1] = '-n -q -dsafe_mode=0'\n\t   arg[2] = '/usr/local/bin/someport'\n\n     plus any arguments the user specified.  As a result, uses of the -S\n     option like this:\n\n\t   #!/usr/bin/env -S /usr/local/bin/php -n -q -dsafe_mode=0\n\n     will behave differently than expected on Darwin, which will instead parse\n     the original version of this first line as if it were executed directly\n     in a shell.\n",
        "     The env utility uses the PATH environment variable to locate the\n     requested utility if the name contains no ‘/’ characters, unless the -P\n     option has been specified.\n",
        "     The env utility exits 0 on success, and >0 if an error occurs.  An exit\n     status of 126 indicates that utility was found, but could not be\n     executed.\tAn exit status of 127 indicates that utility could not be\n     found.\n",
        "     Since the env utility is often used as part of the first line of an\n     interpreted script, the following examples show a number of ways that the\n     env utility can be useful in scripts.\n\n     The kernel processing of an interpreted script does not allow a script to\n     directly reference some other script as its own interpreter.  As a way\n     around this, the main difference between\n\n\t   #!/usr/local/bin/foo\n     and\n\t   #!/usr/bin/env /usr/local/bin/foo\n\n     is that the latter works even if /usr/local/bin/foo is itself an\n     interpreted script.\n\n     Probably the most common use of env is to find the correct interpreter\n     for a script, when the interpreter may be in different directories on\n     different systems.  The following example will find the ‘perl’\n     interpreter by searching through the directories specified by PATH.\n\n\t   #!/usr/bin/env perl\n\n     One limitation of that example is that it assumes the user's value for\n     PATH is set to a value which will find the interpreter you want to\n     execute.  The -P option can be used to make sure a specific list of\n     directories is used in the search for utility.  Note that the -S option\n     is also required for this example to work correctly.\n\n\t   #!/usr/bin/env -S -P/usr/local/bin:/usr/bin perl\n\n     The above finds ‘perl’ only if it is in /usr/local/bin or /usr/bin.  That\n     could be combined with the present value of PATH, to provide more\n     flexibility.  Note that spaces are not required between the -S and -P\n     options:\n\n\t   #!/usr/bin/env -S-P/usr/local/bin:/usr/bin:${PATH} perl\n\n     To execute a utility with an equal sign in its name:\n\n\t   env name=value ... command foo=bar arg ...\n",
        "     The env utility accepts the - option as a synonym for -i.\n",
        "     printenv(1), sh(1), execvp(3), login.conf(5), environ(7)\n",
        "     The env utility conforms to IEEE Std 1003.1-2001 (“POSIX.1”).  The -0,\n     -C, -P, -S, -u and -v options are non-standard extensions supported by\n     FreeBSD, but which may not be available on other operating systems.\n",
        "     The env command appeared in 4.4BSD.  The -P, -S and -v options were added\n     in FreeBSD 6.0.  The -C option was added in FreeBSD 14.2.\n",
        "     The env utility does not take multibyte characters into account when\n     processing the -S option, which may lead to incorrect results in some\n     locales.\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "-0",
      "description": "End each output line with NUL, not newline."
    },
    {
      "flag": "-i",
      "description": "Execute the utility with only those environment variables specified by name=value options.  The environment inherited by env is ignored completely."
    },
    {
      "flag": "-C",
      "description": " Change to the specified alternate working directory before executing the specified utility program.",
      "optional": true
    },
    {
      "flag": "-P",
      "description": " Search the set of directories as specified by altpath to locate the specified utility program, instead of using the value of the PATH environment variable.",
      "optional": true
    },
    {
      "flag": "-S",
      "description": " Split apart the given string into multiple strings, and process each of the resulting strings as separate arguments to the env utility.  The -S option recognizes some special character escape sequences and also supports environment-variable substitution, as described below.",
      "optional": true
    },
    {
      "flag": "-u",
      "description": " If the environment variable name is in the environment, then remove it before processing the remaining options.  This is similar to the unset command in sh(1).  The value for name must not include the ‘=’ character.",
      "optional": true
    },
    {
      "flag": "-v",
      "description": "Print verbose information for each step of processing done by the env utility.  Additional information will be printed if -v is specified multiple times. The above options are only recognized when they are specified before any name=value options. If no utility is specified, env prints out the names and values of the variables in the environment.  Each name/value pair is separated by a new line unless -0 is specified, in which case name/value pairs are separated by NUL.  Both -0 and utility may not be specified together. The env utility does not handle values of utility which have an equals sign (‘=’) in their name, for obvious reasons.  This can easily be worked around by interposing the command(1) utility, which simply executes its arguments; see EXAMPLES below. Details of -S (split-string) processing The processing of the -S option will split the given string into separate arguments based on any space or <tab> characters found in the string. Each of those new arguments will then be treated as if it had been specified as a separate argument on the original env command. Spaces and tabs may be embedded in one of those new arguments by using single (“'”) or double (‘\"’) quotes, or backslashes (‘\\’).  Single quotes will escape all non-single quote characters, up to the matching single quote.  Double quotes will escape all non-double quote characters, up to the matching double quote.  It is an error if the end of the string is reached before the matching quote character. If -S would create a new argument that starts with the ‘#’ character, then that argument and the remainder of the string will be ignored.  The ‘\\#’ sequence can be used when you want a new argument to start with a ‘#’ character, without causing the remainder of the string to be skipped. While processing the string value, -S processing will treat certain character combinations as escape sequences which represent some action to take.  The character escape sequences are in backslash notation.  The characters and their meanings are as follows: \\c\t   Ignore the remaining characters in the string.  This must not appear inside a double-quoted string. \\f\t   Replace with a <form-feed> character. \\n\t   Replace with a <new-line> character. \\r\t   Replace with a <carriage return> character. \\t\t   Replace with a <tab> character. \\v\t   Replace with a <vertical tab> character. \\#\t   Replace with a ‘#’ character.  This would be useful when you need a ‘#’ as the first character in one of the arguments created by splitting apart the given string. \\$\t   Replace with a ‘$’ character. \\_\t   If this is found inside of a double-quoted string, then replace it with a single blank.  If this is found outside of a quoted string, then treat this as the separator character between new arguments in the original string. \\\"\t   Replace with a <double quote> character. \\´\t   Replace with a <single quote> character. \\\\\t   Replace with a backslash character. The sequences for <single-quote> and backslash are the only sequences which are recognized inside of a single-quoted string.  The other sequences have no special meaning inside a single-quoted string.  All escape sequences are recognized inside of a double-quoted string.\tIt is an error if a single ‘\\’ character is followed by a character other than the ones listed above. The processing of -S also supports substitution of values from environment variables.  To do this, the name of the environment variable must be inside of ‘${}’, such as: ${SOMEVAR}.  The common shell syntax of $SOMEVAR is not supported.  All values substituted will be the values of the environment variables as they were when the env utility was originally invoked.  Those values will not be checked for any of the escape sequences as described above.  And any settings of name=value will not effect the values used for substitution in -S processing. Also, -S processing cannot reference the value of the special parameters which are defined by most shells.\tFor instance, -S cannot recognize special parameters such as: ‘$*’, ‘$@’, ‘$#’, ‘$?’ or ‘$$’ if they appear inside the given string. Use in shell-scripts The env utility is often used as the interpreter on the first line of interpreted scripts, as described in execve(2). Note that the ‘#!’ (first line) of an interpreted script is parsed differently on Darwin than it is on many other common systems.  The first line will be split into separate arguments based on any whitespace (space or ⟨tab⟩ characters) found in the line.  So, if a script named /usr/local/bin/someport has a first line of: #!/usr/local/bin/php -n -q -dsafe_mode=0 then the /usr/local/bin/php program will be started with the arguments of: arg[0] = '/usr/local/bin/php' arg[1] = '-n' arg[2] = '-q' arg[3] = '-dsafe_mode=0' arg[4] = '/usr/local/bin/someport' plus any arguments the user specified when executing someport.  However, this processing of multiple options on the ‘#!’ line is not the way many other operating system parse the first line of an interpreted script. Notably, the same first line on other systems will result in /usr/local/bin/php being started with the arguments of: arg[0] = '/usr/local/bin/php' arg[1] = '-n -q -dsafe_mode=0' arg[2] = '/usr/local/bin/someport' plus any arguments the user specified.  As a result, uses of the -S option like this: #!/usr/bin/env -S /usr/local/bin/php -n -q -dsafe_mode=0 will behave differently than expected on Darwin, which will instead parse the original version of this first line as if it were executed directly in a shell."
    }
  ],
  "examples": [
    {
      "command": "SOMEVAR is not supported.  All values substituted will be the values of",
      "description": "the environment variables as they were when the env utility was",
      "tags": [],
      "output": "     the environment variables as they were when the env utility was\n     originally invoked.  Those values will not be checked for any of the\n     escape sequences as described above.  And any settings of name=value will\n     not effect the values used for substitution in -S processing.\n     Also, -S processing cannot reference the value of the special parameters\n     which are defined by most shells.\tFor instance, -S cannot recognize\n     special parameters such as: ‘$*’, ‘$@’, ‘$#’, ‘$?’ or ‘$$’ if they appear\n     inside the given string.\n   Use in shell-scripts\n     The env utility is often used as the interpreter on the first line of\n     interpreted scripts, as described in execve(2).\n     Note that the ‘#!’ (first line) of an interpreted script is parsed\n     differently on Darwin than it is on many other common systems.  The first\n     line will be split into separate arguments based on any whitespace (space\n     or ⟨tab⟩ characters) found in the line.  So, if a script named\n     /usr/local/bin/someport has a first line of:\n\t   #!/usr/local/bin/php -n -q -dsafe_mode=0\n     then the /usr/local/bin/php program will be started with the arguments\n     of:\n\t   arg[0] = '/usr/local/bin/php'\n\t   arg[1] = '-n'\n\t   arg[2] = '-q'\n\t   arg[3] = '-dsafe_mode=0'\n\t   arg[4] = '/usr/local/bin/someport'\n     plus any arguments the user specified when executing someport.  However,\n     this processing of multiple options on the ‘#!’ line is not the way many\n     other operating system parse the first line of an interpreted script.\n     Notably, the same first line on other systems will result in\n     /usr/local/bin/php being started with the arguments of:\n\t   arg[0] = '/usr/local/bin/php'\n\t   arg[1] = '-n -q -dsafe_mode=0'\n\t   arg[2] = '/usr/local/bin/someport'\n     plus any arguments the user specified.  As a result, uses of the -S\n     option like this:\n\t   #!/usr/bin/env -S /usr/local/bin/php -n -q -dsafe_mode=0\n     will behave differently than expected on Darwin, which will instead parse\n     the original version of this first line as if it were executed directly\n     in a shell.\n"
    }
  ],
  "relatedCommands": [
    "printenv",
    "sh",
    "execvp",
    "conf",
    "environ",
    "env",
    "set",
    "environment",
    "execute",
    "command",
    "print",
    "name",
    "value",
    "altwd",
    "altpath"
  ],
  "seeAlso": [
    {
      "name": "printenv",
      "section": 1
    },
    {
      "name": "sh",
      "section": 1
    },
    {
      "name": "execvp",
      "section": 3
    },
    {
      "name": "conf",
      "section": 5
    },
    {
      "name": "environ",
      "section": 7
    }
  ],
  "metadata": {},
  "searchContent": "env env manual page the env utility executes another utility after modifying the environment as specified on the command line env -0iv -u name name value env -iv -c altwd -p altpath -s string -u name name value utility argument env manual page utility executes another after modifying environment specified command line -0 end each output line with nul not newline -i execute the utility with only those environment variables specified by name value options the environment inherited by env is ignored completely -c change to the specified alternate working directory before executing the specified utility program -p search the set of directories as specified by altpath to locate the specified utility program instead of using the value of the path environment variable -s split apart the given string into multiple strings and process each of the resulting strings as separate arguments to the env utility the -s option recognizes some special character escape sequences and also supports environment-variable substitution as described below -u if the environment variable name is in the environment then remove it before processing the remaining options this is similar to the unset command in sh 1 the value for name must not include the character -v print verbose information for each step of processing done by the env utility additional information will be printed if -v is specified multiple times the above options are only recognized when they are specified before any name value options if no utility is specified env prints out the names and values of the variables in the environment each name value pair is separated by a new line unless -0 is specified in which case name value pairs are separated by nul both -0 and utility may not be specified together the env utility does not handle values of utility which have an equals sign in their name for obvious reasons this can easily be worked around by interposing the command 1 utility which simply executes its arguments see examples below details of -s split-string processing the processing of the -s option will split the given string into separate arguments based on any space or tab characters found in the string each of those new arguments will then be treated as if it had been specified as a separate argument on the original env command spaces and tabs may be embedded in one of those new arguments by using single or double quotes or backslashes single quotes will escape all non-single quote characters up to the matching single quote double quotes will escape all non-double quote characters up to the matching double quote it is an error if the end of the string is reached before the matching quote character if -s would create a new argument that starts with the character then that argument and the remainder of the string will be ignored the sequence can be used when you want a new argument to start with a character without causing the remainder of the string to be skipped while processing the string value -s processing will treat certain character combinations as escape sequences which represent some action to take the character escape sequences are in backslash notation the characters and their meanings are as follows c ignore the remaining characters in the string this must not appear inside a double-quoted string f replace with a form-feed character n replace with a new-line character r replace with a carriage return character t replace with a tab character v replace with a vertical tab character replace with a character this would be useful when you need a as the first character in one of the arguments created by splitting apart the given string replace with a character if this is found inside of a double-quoted string then replace it with a single blank if this is found outside of a quoted string then treat this as the separator character between new arguments in the original string replace with a double quote character replace with a single quote character replace with a backslash character the sequences for single-quote and backslash are the only sequences which are recognized inside of a single-quoted string the other sequences have no special meaning inside a single-quoted string all escape sequences are recognized inside of a double-quoted string it is an error if a single character is followed by a character other than the ones listed above the processing of -s also supports substitution of values from environment variables to do this the name of the environment variable must be inside of such as somevar the common shell syntax of somevar is not supported all values substituted will be the values of the environment variables as they were when the env utility was originally invoked those values will not be checked for any of the escape sequences as described above and any settings of name value will not effect the values used for substitution in -s processing also -s processing cannot reference the value of the special parameters which are defined by most shells for instance -s cannot recognize special parameters such as or if they appear inside the given string use in shell-scripts the env utility is often used as the interpreter on the first line of interpreted scripts as described in execve 2 note that the first line of an interpreted script is parsed differently on darwin than it is on many other common systems the first line will be split into separate arguments based on any whitespace space or tab characters found in the line so if a script named usr local bin someport has a first line of usr local bin php -n -q -dsafe mode 0 then the usr local bin php program will be started with the arguments of arg 0 usr local bin php arg 1 -n arg 2 -q arg 3 -dsafe mode 0 arg 4 usr local bin someport plus any arguments the user specified when executing someport however this processing of multiple options on the line is not the way many other operating system parse the first line of an interpreted script notably the same first line on other systems will result in usr local bin php being started with the arguments of arg 0 usr local bin php arg 1 -n -q -dsafe mode 0 arg 2 usr local bin someport plus any arguments the user specified as a result uses of the -s option like this usr bin env -s usr local bin php -n -q -dsafe mode 0 will behave differently than expected on darwin which will instead parse the original version of this first line as if it were executed directly in a shell somevar is not supported all values substituted will be the values of the environment variables as they were when the env utility was name utility argument description macos 15 5 october 8 2024 macos 15 5",
  "keywords": [
    "env",
    "manual",
    "page",
    "utility",
    "executes",
    "another",
    "after",
    "modifying",
    "environment",
    "specified",
    "command",
    "line."
  ],
  "complexity": "intermediate",
  "hash": "d7b4e33f7a9aeb9f",
  "parsedAt": "2025-06-17T19:42:10.492Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": true,
  "hasDiagrams": false
}