{
  "name": "make",
  "section": 1,
  "title": "GNU make utility to maintain groups of programs",
  "description": "GNU make utility to maintain groups of programs",
  "synopsis": "make [ -f makefile ] [ options ] ... [ targets ] ...",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "GNU\t\t\t\t22 August 1989\t\t\t       MAKE(1)",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "       make - GNU make utility to maintain groups of programs\n",
        "       make  [ -f makefile ] [ options ] ... [ targets ] ...\n",
        "       This man page is an extract of the documentation of GNU make.  It is\n       updated only occasionally, because the GNU project does not use nroff.\n       For complete, current documentation, refer to the Info file make.info\n       which is made from the Texinfo source file make.texi.\n",
        "       The purpose of the make utility is to determine automatically which\n       pieces of a large program need to be recompiled, and issue the commands\n       to recompile them.  The manual describes the GNU implementation of\n       make, which was written by Richard Stallman and Roland McGrath, and is\n       currently maintained by Paul Smith.  Our examples show C programs,\n       since they are most common, but you can use make with any programming\n       language whose compiler can be run with a shell command.  In fact, make\n       is not limited to programs.  You can use it to describe any task where\n       some files must be updated automatically from others whenever the\n       others change.\n\n       To prepare to use make, you must write a file called the makefile that\n       describes the relationships among files in your program, and the states\n       the commands for updating each file.  In a program, typically the\n       executable file is updated from object files, which are in turn made by\n       compiling source files.\n\n       Once a suitable makefile exists, each time you change some source\n       files, this simple shell command:\n\n\t      make\n\n       suffices to perform all necessary recompilations.  The make program\n       uses the makefile data base and the last-modification times of the\n       files to decide which of the files need to be updated.  For each of\n       those files, it issues the commands recorded in the data base.\n\n       make executes commands in the makefile to update one or more target\n       names, where name is typically a program.  If no -f option is present,\n       make will look for the makefiles GNUmakefile, makefile, and Makefile,\n       in that order.\n\n       Normally you should call your makefile either makefile or Makefile.\n       (We recommend Makefile because it appears prominently near the\n       beginning of a directory listing, right near other important files such\n       as README.) The first name checked, GNUmakefile, is not recommended for\n       most makefiles.\tYou should use this name if you have a makefile that\n       is specific to GNU make, and will not be understood by other versions\n       of make.  If makefile is `-', the standard input is read.\n\n       make updates a target if it depends on prerequisite files that have\n       been modified since the target was last modified, or if the target does\n       not exist.\n",
        "       -b, -m\n\t    These options are ignored for compatibility with other versions of\n\t    make.\n\n       -B, --always-make\n\t    Unconditionally make all targets.\n\n       -C dir, --directory=dir\n\t    Change to directory dir before reading the makefiles or doing\n\t    anything else.  If multiple -C options are specified, each is\n\t    interpreted relative to the previous one: -C / -C etc is\n\t    equivalent to -C /etc.  This is typically used with recursive\n\t    invocations of make.\n\n       -d   Print debugging information in addition to normal processing.  The\n\t    debugging information says which files are being considered for\n\t    remaking, which file-times are being compared and with what\n\t    results, which files actually need to be remade, which implicit\n\t    rules are considered and which are applied---everything\n\t    interesting about how make decides what to do.\n\n       --debug[=FLAGS]\n\t    Print debugging information in addition to normal processing.  If\n\t    the FLAGS are omitted, then the behavior is the same as if -d was\n\t    specified.\tFLAGS may be a for all debugging output (same as using\n\t    -d), b for basic debugging, v for more verbose basic debugging, i\n\t    for showing implicit rules, j for details on invocation of\n\t    commands, and m for debugging while remaking makefiles.\n\n       -e, --environment-overrides\n\t    Give variables taken from the environment precedence over\n\t    variables from makefiles.\n\n       +-f file, --file=file, --makefile=FILE\n\t    Use file as a makefile.\n\n       -i, --ignore-errors\n\t    Ignore all errors in commands executed to remake files.\n\n       -I dir, --include-dir=dir\n\t    Specifies a directory dir to search for included makefiles.  If\n\t    several -I options are used to specify several directories, the\n\t    directories are searched in the order specified.  Unlike the\n\t    arguments to other flags of make, directories given with -I flags\n\t    may come directly after the flag: -Idir is allowed, as well as -I\n\t    dir.  This syntax is allowed for compatibility with the C\n\t    preprocessor's -I flag.\n\n       -j [jobs], --jobs[=jobs]\n\t    Specifies the number of jobs (commands) to run simultaneously.  If\n\t    there is more than one -j option, the last one is effective.  If\n\t    the -j option is given without an argument, make will not limit\n\t    the number of jobs that can run simultaneously.\n\n       -k, --keep-going\n\t    Continue as much as possible after an error.  While the target\n\t    that failed, and those that depend on it, cannot be remade, the\n\t    other dependencies of these targets can be processed all the same.\n\n       -l [load], --load-average[=load]\n\t    Specifies that no new jobs (commands) should be started if there\n\t    are others jobs running and the load average is at least load (a\n\t    floating-point number).  With no argument, removes a previous load\n\t    limit.\n\n       -L, --check-symlink-times\n\t    Use the latest mtime between symlinks and target.\n\n       -n, --just-print, --dry-run, --recon\n\t    Print the commands that would be executed, but do not execute\n\t    them.\n\n       -o file, --old-file=file, --assume-old=file\n\t    Do not remake the file file even if it is older than its\n\t    dependencies, and do not remake anything on account of changes in\n\t    file.  Essentially the file is treated as very old and its rules\n\t    are ignored.\n\n       -p, --print-data-base\n\t    Print the data base (rules and variable values) that results from\n\t    reading the makefiles; then execute as usual or as otherwise\n\t    specified.\tThis also prints the version information given by the\n\t    -v switch (see below).  To print the data base without trying to\n\t    remake any files, use make -p -f/dev/null.\n\n       -q, --question\n\t    ``Question mode''.\tDo not run any commands, or print anything;\n\t    just return an exit status that is zero if the specified targets\n\t    are already up to date, nonzero otherwise.\n\n       -r, --no-builtin-rules\n\t    Eliminate use of the built-in implicit rules.  Also clear out the\n\t    default list of suffixes for suffix rules.\n\n       -R, --no-builtin-variables\n\t    Don't define any built-in variables.\n\n       -s, --silent, --quiet\n\t    Silent operation; do not print the commands as they are executed.\n\n       -S, --no-keep-going, --stop\n\t    Cancel the effect of the -k option.  This is never necessary\n\t    except in a recursive make where -k might be inherited from the\n\t    top-level make via MAKEFLAGS or if you set -k in MAKEFLAGS in your\n\t    environment.\n\n       -t, --touch\n\t    Touch files (mark them up to date without really changing them)\n\t    instead of running their commands.\tThis is used to pretend that\n\t    the commands were done, in order to fool future invocations of\n\t    make.\n\n       -v, --version\n\t    Print the version of the make program plus a copyright, a list of\n\t    authors and a notice that there is no warranty.\n\n       -w, --print-directory\n\t    Print a message containing the working directory before and after\n\t    other processing.  This may be useful for tracking down errors\n\t    from complicated nests of recursive make commands.\n\n       --no-print-directory\n\t    Turn off -w, even if it was turned on implicitly.\n\n       -W file, --what-if=file, --new-file=file, --assume-new=file\n\t    Pretend that the target file has just been modified.  When used\n\t    with the -n flag, this shows you what would happen if you were to\n\t    modify that file.  Without -n, it is almost the same as running a\n\t    touch command on the given file before running make, except that\n\t    the modification time is changed only in the imagination of make.\n\n       --warn-undefined-variables\n\t    Warn when an undefined variable is referenced.\n",
        "       GNU make exits with a status of zero if all makefiles were successfully\n       parsed and no targets that were built failed.  A status of one will be\n       returned if the -q flag was used and make determines that a target\n       needs to be rebuilt.  A status of two will be returned if any errors\n       were encountered.\n",
        "       The GNU Make Manual\n",
        "       See the chapter `Problems and Bugs' in The GNU Make Manual.\n",
        "       This manual page contributed by Dennis Morse of Stanford University.\n       It has been reworked by Roland McGrath.\tFurther updates contributed by\n       Mike Frysinger.\n",
        "       Copyright (C) 1992, 1993, 1996, 1999 Free Software Foundation, Inc.\n       This file is part of GNU make.\n\n       GNU make is free software; you can redistribute it and/or modify it\n       under the terms of the GNU General Public License as published by the\n       Free Software Foundation; either version 2, or (at your option) any\n       later version.\n\n       GNU make is distributed in the hope that it will be useful, but WITHOUT\n       ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n       FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n       for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with GNU make; see the file COPYING.  If not, write to the Free\n       Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n       02110-1301, USA.\n"
      ]
    }
  ],
  "flags": [],
  "examples": [],
  "relatedCommands": [
    "make",
    "utility",
    "maintain",
    "groups",
    "programs",
    "makefile",
    "options",
    "targets",
    "man",
    "page",
    "extract",
    "documentation",
    "updated",
    "only",
    "occasionally"
  ],
  "seeAlso": [],
  "metadata": {
    "author": "and a notice that there is no warranty."
  },
  "searchContent": "make gnu make utility to maintain groups of programs gnu make utility to maintain groups of programs make -f makefile options targets make utility maintain groups programs name gnu 22 august 1989 make 1",
  "keywords": [
    "make",
    "utility",
    "maintain",
    "groups",
    "programs"
  ],
  "complexity": "advanced",
  "hash": "5a9995f0364f6c12",
  "parsedAt": "2025-06-17T19:42:07.045Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": false,
  "hasDiagrams": false
}