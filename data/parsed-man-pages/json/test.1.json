{
  "name": "test",
  "section": 1,
  "title": "test manual page",
  "description": "The test utility evaluates the expression and, if it evaluates to true, returns a zero (true) exit status; otherwise it returns 1 (false).",
  "synopsis": "test expression [ expression ]",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "macOS 15.5\t\t\tOctober 5, 2016 \t\t    macOS 15.5",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     test, [ – condition evaluation utility\n",
        "     test expression\n     [ expression ]\n",
        "     The test utility evaluates the expression and, if it evaluates to true,\n     returns a zero (true) exit status; otherwise it returns 1 (false).  If\n     there is no expression, test also returns 1 (false).\n\n     All operators and flags are separate arguments to the test utility.\n\n     The following primaries are used to construct expression:\n\n     -b file\t   True if file exists and is a block special file.\n\n     -c file\t   True if file exists and is a character special file.\n\n     -d file\t   True if file exists and is a directory.\n\n     -e file\t   True if file exists (regardless of type).\n\n     -f file\t   True if file exists and is a regular file.\n\n     -g file\t   True if file exists and its set group ID flag is set.\n\n     -h file\t   True if file exists and is a symbolic link.\tThis operator\n\t\t   is retained for compatibility with previous versions of\n\t\t   this program.  Do not rely on its existence; use -L\n\t\t   instead.\n\n     -k file\t   True if file exists and its sticky bit is set.\n\n     -n string\t   True if the length of string is nonzero.\n\n     -p file\t   True if file is a named pipe (FIFO).\n\n     -r file\t   True if file exists and is readable.\n\n     -s file\t   True if file exists and has a size greater than zero.\n\n     -t file_descriptor\n\t\t   True if the file whose file descriptor number is\n\t\t   file_descriptor is open and is associated with a terminal.\n\n     -u file\t   True if file exists and its set user ID flag is set.\n\n     -w file\t   True if file exists and is writable.  True indicates only\n\t\t   that the write flag is on.  The file is not writable on a\n\t\t   read-only file system even if this test indicates true.\n\n     -x file\t   True if file exists and is executable.  True indicates only\n\t\t   that the execute flag is on.  If file is a directory, true\n\t\t   indicates that file can be searched.\n\n     -z string\t   True if the length of string is zero.\n\n     -L file\t   True if file exists and is a symbolic link.\n\n     -O file\t   True if file exists and its owner matches the effective\n\t\t   user id of this process.\n\n     -G file\t   True if file exists and its group matches the effective\n\t\t   group id of this process.\n\n     -S file\t   True if file exists and is a socket.\n\n     file1 -nt file2\n\t\t   True if file1 exists and is newer than file2.\n\n     file1 -ot file2\n\t\t   True if file1 exists and is older than file2.\n\n     file1 -ef file2\n\t\t   True if file1 and file2 exist and refer to the same file.\n\n     string\t   True if string is not the null string.\n\n     s1 = s2\t   True if the strings s1 and s2 are identical.\n\n     s1 != s2\t   True if the strings s1 and s2 are not identical.\n\n     s1 < s2\t   True if string s1 comes before s2 based on the binary value\n\t\t   of their characters.\n\n     s1 > s2\t   True if string s1 comes after s2 based on the binary value\n\t\t   of their characters.\n\n     n1 -eq n2\t   True if the integers n1 and n2 are algebraically equal.\n\n     n1 -ne n2\t   True if the integers n1 and n2 are not algebraically equal.\n\n     n1 -gt n2\t   True if the integer n1 is algebraically greater than the\n\t\t   integer n2.\n\n     n1 -ge n2\t   True if the integer n1 is algebraically greater than or\n\t\t   equal to the integer n2.\n\n     n1 -lt n2\t   True if the integer n1 is algebraically less than the\n\t\t   integer n2.\n\n     n1 -le n2\t   True if the integer n1 is algebraically less than or equal\n\t\t   to the integer n2.\n\n     If file is a symbolic link, test will fully dereference it and then\n     evaluate the expression against the file referenced, except for the -h\n     and -L primaries.\n\n     These primaries can be combined with the following operators:\n\n     ! expression  True if expression is false.\n\n     expression1 -a expression2\n\t\t   True if both expression1 and expression2 are true.\n\n     expression1 -o expression2\n\t\t   True if either expression1 or expression2 are true.\n\n     ( expression )\n\t\t   True if expression is true.\n\n     The -a operator has higher precedence than the -o operator.\n\n     Some shells may provide a builtin test command which is similar or\n     identical to this utility.  Consult the builtin(1) manual page.\n",
        "     The test grammar is inherently ambiguous.\tIn order to assure a degree of\n     consistency, the cases described in the IEEE Std 1003.2 (“POSIX.2”),\n     section D11.2/4.62.4, standard are evaluated consistently according to\n     the rules specified in the standards document.  All other cases are\n     subject to the ambiguity in the command semantics.\n\n     In particular, only expressions containing -a, -o, ( or ) can be\n     ambiguous.\n",
        "     The test utility exits with one of the following values:\n\n     0\t     expression evaluated to true.\n\n     1\t     expression evaluated to false or expression was missing.\n\n     >1      An error occurred.\n",
        "     Implement test FILE1 -nt FILE2 using only POSIX functionality:\n\n\t   test -n \"$(find -L -- FILE1 -prune -newer FILE2 2>/dev/null)\"\n\n     This can be modified using non-standard find(1) primaries like -newerca\n     to compare other timestamps.\n",
        "     For compatibility with some other implementations, the = primary can be\n     substituted with == with the same meaning.\n",
        "     builtin(1), expr(1), find(1), sh(1), stat(1), symlink(7)\n",
        "     The test utility implements a superset of the IEEE Std 1003.2 (“POSIX.2”)\n     specification.  The primaries <, ==, >, -ef, -nt, -ot, -G, and -O are\n     extensions.\n",
        "     A test utility appeared in Version 7 AT&T UNIX.\n",
        "     Both sides are always evaluated in -a and -o.  For instance, the writable\n     status of file will be tested by the following command even though the\n     former expression indicated false, which results in a gratuitous access\n     to the file system:\n\t   [ -z abc -a -w file ]\n     To avoid this, write\n\t   [ -z abc ] && [ -w file ]\n"
      ]
    }
  ],
  "flags": [],
  "examples": [],
  "relatedCommands": [
    "builtin",
    "expr",
    "find",
    "sh",
    "stat",
    "symlink",
    "test",
    "condition",
    "evaluation",
    "utility",
    "expression",
    "evaluates",
    "true",
    "returns",
    "zero"
  ],
  "seeAlso": [
    {
      "name": "builtin",
      "section": 1
    },
    {
      "name": "expr",
      "section": 1
    },
    {
      "name": "find",
      "section": 1
    },
    {
      "name": "sh",
      "section": 1
    },
    {
      "name": "stat",
      "section": 1
    },
    {
      "name": "symlink",
      "section": 7
    }
  ],
  "metadata": {},
  "searchContent": "test test manual page the test utility evaluates the expression and if it evaluates to true returns a zero true exit status otherwise it returns 1 false test expression expression test manual page utility evaluates expression and true returns zero true exit status otherwise false name macos 15 5 october 5 2016 macos 15 5",
  "keywords": [
    "test",
    "manual",
    "page",
    "utility",
    "evaluates",
    "expression",
    "and,",
    "true,",
    "returns",
    "zero",
    "(true)",
    "exit",
    "status;",
    "otherwise",
    "(false)."
  ],
  "complexity": "basic",
  "hash": "9bb1cca3fe91af70",
  "parsedAt": "2025-06-17T19:42:12.784Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": false,
  "hasDiagrams": false
}