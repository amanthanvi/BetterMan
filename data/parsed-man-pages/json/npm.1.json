{
  "name": "npm",
  "section": 1,
  "title": "javascript package manager",
  "description": "npm is the package manager for the Node JavaScript platform.",
  "synopsis": "npm Note: This command is unaware of workspaces. Version 10.2.4 Description npm is the package manager for the Node JavaScript platform. It puts modules in place so that node can find them, and manages dependency conflicts intelligently. It is extremely configurable to support a variety of use cases. Most commonly, you use it to publish, discover, install, and develop node programs. Run npm help to get a list of available commands. Important npm comes preconfigured to use npm's public registry at https://registry.npmjs.org by default. Use of the npm public registry is subject to terms of use available at https://docs.npmjs.com/policies/terms. You can configure npm to use any compatible registry you like, and even run your own registry. Use of someone else's registry is governed by their terms of use. Introduction You probably got npm because you want to install stuff. The very first thing you will most likely want to run in any node program is npm install to install its dependencies. You can also run npm install blerg to install the latest version of \"blerg\". Check out npm help install for more info. It can do a lot of stuff. Use the npm search command to show everything that's available in the public registry. Use npm ls to show everything you've installed. Dependencies If a package lists a dependency using a git URL, npm will install that dependency using the git ⟨https://github.com/git-guides/install-git⟩ command and will generate an error if it is not installed. If one of the packages npm tries to install is a native node module and requires compiling of C++ Code, npm will use node-gyp ⟨https://github.com/nodejs/node-gyp⟩ for that task. For a Unix system, node-gyp ⟨https://github.com/nodejs/node-gyp⟩ needs Python, make and a buildchain like GCC. On Windows, Python and Microsoft Visual Studio C++ are needed. For more information visit the node-gyp repository ⟨https://github.com/nodejs/node-gyp⟩ and the node-gyp Wiki ⟨https://github.com/nodejs/node-gyp/wiki⟩. Directories See npm help folders to learn about where npm puts stuff. In particular, npm has two modes of operation: • local mode: npm installs packages into the current project directory, which defaults to the current working directory. Packages install to ./node_modules, and bins to ./node_modules/.bin. • global mode: npm installs packages into the install prefix at $npm_config_prefix/lib/node_modules and bins to $npm_config_prefix/bin. Local mode is the default. Use -g or --global on any command to run in global mode instead. Developer Usage If you're using npm to develop and publish your code, check out the following help topics: • json: Make a package.json file. See package.json ⟨/configuring- npm/package-json⟩. • link: Links your current working code into Node's path, so that you don't have to reinstall every time you make a change. Use npm help link to do this. • install: It's a good idea to install things if you don't need the symbolic link. Especially, installing other peoples code from the registry is done via npm help install • adduser: Create an account or log in. When you do this, npm will store credentials in the user config file. • publish: Use the npm help publish command to upload your code to the registry. Configuration npm is extremely configurable. It reads its configuration options from 5 places. • Command line switches: Set a config with --key val. All keys take a value, even if they are booleans (the config parser doesn't know what the options are at the time of parsing). If you do not provide a value (--key) then the option is set to boolean true. • Environment Variables: Set any config by prefixing the name in an environment variable with npm_config_. For example, export npm_config_key=val. • User Configs: The file at $HOME/.npmrc is an ini-formatted list of configs. If present, it is parsed. If the userconfig option is set in the cli or env, that file will be used instead. • Global Configs: The file found at ./etc/npmrc (relative to the global prefix will be parsed if it is found. See npm help prefix for more info on the global prefix. If the globalconfig option is set in the cli, env, or user config, then that file is parsed instead. • Defaults: npm's default configuration options are defined in lib/utils/config/definitions.js. These must not be changed. See npm help config for much much more information. Contributions Patches welcome! If you would like to help, but don't know what to work on, read the contributing guidelines ⟨https://github.com/npm/cli/blob/latest/CONTRIBUTING.md⟩ and check the issues list. Bugs When you find issues, please report them: ⟨https://github.com/npm/cli/issues⟩ Please be sure to follow the template and bug reporting guidelines. Feature Requests Discuss new feature ideas on our discussion forum: • ⟨https://github.com/npm/feedback⟩ Or suggest formal RFC proposals: • ⟨https://github.com/npm/rfcs⟩ See Also • npm help help • package.json ⟨/configuring-npm/package-json⟩ • npm help npmrc • npm help config • npm help install • npm help prefix • npm help publish November 2023 NPM(1)",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "       •   npm help help\n\n       •   package.json ⟨/configuring-npm/package-json⟩\n\n       •   npm help npmrc\n\n       •   npm help config\n\n       •   npm help install\n\n       •   npm help prefix\n\n       •   npm help publish\n\n\t\t\t\t November 2023\t\t\t\tNPM(1)\n"
      ]
    }
  ],
  "flags": [],
  "examples": [],
  "relatedCommands": [
    "NPM",
    "npm",
    "javascript",
    "package",
    "manager",
    "command",
    "unaware",
    "workspaces",
    "platform",
    "puts",
    "modules",
    "place",
    "node",
    "find",
    "them"
  ],
  "seeAlso": [
    {
      "name": "NPM",
      "section": 1
    }
  ],
  "metadata": {},
  "searchContent": "npm javascript package manager npm is the package manager for the node javascript platform npm note this command is unaware of workspaces version 10 2 4 description npm is the package manager for the node javascript platform it puts modules in place so that node can find them and manages dependency conflicts intelligently it is extremely configurable to support a variety of use cases most commonly you use it to publish discover install and develop node programs run npm help to get a list of available commands important npm comes preconfigured to use npm s public registry at https registry npmjs org by default use of the npm public registry is subject to terms of use available at https docs npmjs com policies terms you can configure npm to use any compatible registry you like and even run your own registry use of someone else s registry is governed by their terms of use introduction you probably got npm because you want to install stuff the very first thing you will most likely want to run in any node program is npm install to install its dependencies you can also run npm install blerg to install the latest version of blerg check out npm help install for more info it can do a lot of stuff use the npm search command to show everything that s available in the public registry use npm ls to show everything you ve installed dependencies if a package lists a dependency using a git url npm will install that dependency using the git https github com git-guides install-git command and will generate an error if it is not installed if one of the packages npm tries to install is a native node module and requires compiling of c code npm will use node-gyp https github com nodejs node-gyp for that task for a unix system node-gyp https github com nodejs node-gyp needs python make and a buildchain like gcc on windows python and microsoft visual studio c are needed for more information visit the node-gyp repository https github com nodejs node-gyp and the node-gyp wiki https github com nodejs node-gyp wiki directories see npm help folders to learn about where npm puts stuff in particular npm has two modes of operation local mode npm installs packages into the current project directory which defaults to the current working directory packages install to node modules and bins to node modules bin global mode npm installs packages into the install prefix at npm config prefix lib node modules and bins to npm config prefix bin local mode is the default use -g or --global on any command to run in global mode instead developer usage if you re using npm to develop and publish your code check out the following help topics json make a package json file see package json configuring- npm package-json link links your current working code into node s path so that you don t have to reinstall every time you make a change use npm help link to do this install it s a good idea to install things if you don t need the symbolic link especially installing other peoples code from the registry is done via npm help install adduser create an account or log in when you do this npm will store credentials in the user config file publish use the npm help publish command to upload your code to the registry configuration npm is extremely configurable it reads its configuration options from 5 places command line switches set a config with --key val all keys take a value even if they are booleans the config parser doesn t know what the options are at the time of parsing if you do not provide a value --key then the option is set to boolean true environment variables set any config by prefixing the name in an environment variable with npm config for example export npm config key val user configs the file at home npmrc is an ini-formatted list of configs if present it is parsed if the userconfig option is set in the cli or env that file will be used instead global configs the file found at etc npmrc relative to the global prefix will be parsed if it is found see npm help prefix for more info on the global prefix if the globalconfig option is set in the cli env or user config then that file is parsed instead defaults npm s default configuration options are defined in lib utils config definitions js these must not be changed see npm help config for much much more information contributions patches welcome if you would like to help but don t know what to work on read the contributing guidelines https github com npm cli blob latest contributing md and check the issues list bugs when you find issues please report them https github com npm cli issues please be sure to follow the template and bug reporting guidelines feature requests discuss new feature ideas on our discussion forum https github com npm feedback or suggest formal rfc proposals https github com npm rfcs see also npm help help package json configuring-npm package-json npm help npmrc npm help config npm help install npm help prefix npm help publish november 2023 npm 1 npm javascript package manager node platform name",
  "keywords": [
    "npm",
    "javascript",
    "package",
    "manager",
    "node",
    "platform."
  ],
  "complexity": "basic",
  "hash": "c74e08ba7bb92d76",
  "parsedAt": "2025-06-17T19:42:06.764Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": false,
  "hasDiagrams": false
}