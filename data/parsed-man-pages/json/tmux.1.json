{
  "name": "tmux",
  "section": 1,
  "title": "tmux manual page",
  "description": "tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen.",
  "synopsis": "tmux [-2CDlNuVv] [-c shell-command] [-f file] [-L socket-name] [-S socket-path] [-T features] [command [flags]]",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "[-S socket-path] [-T features] [command [flags]]",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     tmux – terminal multiplexer\n",
        "     tmux [-2CDlNuVv] [-c shell-command] [-f file] [-L socket-name]"
      ]
    },
    {
      "id": "description",
      "title": "DESCRIPTION",
      "content": "macOS 15.5\t\t\t June 17, 2025\t\t\t    macOS 15.5",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     tmux is a terminal multiplexer: it enables a number of terminals to be\n     created, accessed, and controlled from a single screen.  tmux may be\n     detached from a screen and continue running in the background, then later\n     reattached.\n\n     When tmux is started, it creates a new session with a single window and\n     displays it on screen.  A status line at the bottom of the screen shows\n     information on the current session and is used to enter interactive\n     commands.\n\n     A session is a single collection of pseudo terminals under the management\n     of tmux.  Each session has one or more windows linked to it.  A window\n     occupies the entire screen and may be split into rectangular panes, each\n     of which is a separate pseudo terminal (the pty(4) manual page documents\n     the technical details of pseudo terminals).  Any number of tmux instances\n     may connect to the same session, and any number of windows may be present\n     in the same session.  Once all sessions are killed, tmux exits.\n\n     Each session is persistent and will survive accidental disconnection\n     (such as ssh(1) connection timeout) or intentional detaching (with the\n     ‘C-b d’ key strokes).  tmux may be reattached using:\n\n\t   $ tmux attach\n\n     In tmux, a session is displayed on screen by a client and all sessions\n     are managed by a single server.  The server and each client are separate\n     processes which communicate through a socket in /tmp.\n\n     The options are as follows:\n\n     -2 \t   Force tmux to assume the terminal supports 256 colours.\n\t\t   This is equivalent to -T 256.\n\n     -C \t   Start in control mode (see the CONTROL MODE section).\n\t\t   Given twice (-CC) disables echo.\n\n     -c shell-command\n\t\t   Execute shell-command using the default shell.  If\n\t\t   necessary, the tmux server will be started to retrieve the\n\t\t   default-shell option.  This option is for compatibility\n\t\t   with sh(1) when tmux is used as a login shell.\n\n     -D \t   Do not start the tmux server as a daemon.  This also turns\n\t\t   the exit-empty option off.  With -D, command may not be\n\t\t   specified.\n\n     -f file\t   Specify an alternative configuration file.  By default,\n\t\t   tmux loads the system configuration file from\n\t\t   /opt/homebrew/etc/tmux.conf, if present, then looks for a\n\t\t   user configuration file at ~/.tmux.conf or\n\t\t   $XDG_CONFIG_HOME/tmux/tmux.conf.\n\n\t\t   The configuration file is a set of tmux commands which are\n\t\t   executed in sequence when the server is first started.\n\t\t   tmux loads configuration files once when the server process\n\t\t   has started.  The source-file command may be used to load a\n\t\t   file later.\n\n\t\t   tmux shows any error messages from commands in\n\t\t   configuration files in the first session created, and\n\t\t   continues to process the rest of the configuration file.\n\n     -L socket-name\n\t\t   tmux stores the server socket in a directory under\n\t\t   TMUX_TMPDIR or /tmp if it is unset.\tThe default socket is\n\t\t   named default.  This option allows a different socket name\n\t\t   to be specified, allowing several independent tmux servers\n\t\t   to be run.  Unlike -S a full path is not necessary: the\n\t\t   sockets are all created in a directory tmux-UID under the\n\t\t   directory given by TMUX_TMPDIR or in /tmp.  The tmux-UID\n\t\t   directory is created by tmux and must not be world\n\t\t   readable, writable or executable.\n\n\t\t   If the socket is accidentally removed, the SIGUSR1 signal\n\t\t   may be sent to the tmux server process to recreate it (note\n\t\t   that this will fail if any parent directories are missing).\n\n     -l \t   Behave as a login shell.  This flag currently has no effect\n\t\t   and is for compatibility with other shells when using tmux\n\t\t   as a login shell.\n\n     -N \t   Do not start the server even if the command would normally\n\t\t   do so (for example new-session or start-server).\n\n     -S socket-path\n\t\t   Specify a full alternative path to the server socket.  If\n\t\t   -S is specified, the default socket directory is not used\n\t\t   and any -L flag is ignored.\n\n     -T features   Set terminal features for the client.  This is a comma-\n\t\t   separated list of features.\tSee the terminal-features\n\t\t   option.\n\n     -u \t   Write UTF-8 output to the terminal even if the first\n\t\t   environment variable of LC_ALL, LC_CTYPE, or LANG that is\n\t\t   set does not contain \"UTF-8\" or \"UTF8\".\n\n     -V \t   Report the tmux version.\n\n     -v \t   Request verbose logging.  Log messages will be saved into\n\t\t   tmux-client-PID.log and tmux-server-PID.log files in the\n\t\t   current directory, where PID is the PID of the server or\n\t\t   client process.  If -v is specified twice, an additional\n\t\t   tmux-out-PID.log file is generated with a copy of\n\t\t   everything tmux writes to the terminal.\n\n\t\t   The SIGUSR2 signal may be sent to the tmux server process\n\t\t   to toggle logging between on (as if -v was given) and off.\n\n     command [flags]\n\t\t   This specifies one of a set of commands used to control\n\t\t   tmux, as described in the following sections.  If no\n\t\t   commands are specified, the new-session command is assumed.\n",
        "     tmux may be controlled from an attached client by using a key combination\n     of a prefix key, ‘C-b’ (Ctrl-b) by default, followed by a command key.\n\n     The default command key bindings are:\n\n\t   C-b\t       Send the prefix key (C-b) through to the application.\n\t   C-o\t       Rotate the panes in the current window forwards.\n\t   C-z\t       Suspend the tmux client.\n\t   !\t       Break the current pane out of the window.\n\t   \"\t       Split the current pane into two, top and bottom.\n\t   #\t       List all paste buffers.\n\t   $\t       Rename the current session.\n\t   %\t       Split the current pane into two, left and right.\n\t   &\t       Kill the current window.\n\t   '\t       Prompt for a window index to select.\n\t   (\t       Switch the attached client to the previous session.\n\t   )\t       Switch the attached client to the next session.\n\t   ,\t       Rename the current window.\n\t   -\t       Delete the most recently copied buffer of text.\n\t   .\t       Prompt for an index to move the current window.\n\t   0 to 9      Select windows 0 to 9.\n\t   :\t       Enter the tmux command prompt.\n\t   ;\t       Move to the previously active pane.\n\t   =\t       Choose which buffer to paste interactively from a list.\n\t   ?\t       List all key bindings.\n\t   D\t       Choose a client to detach.\n\t   L\t       Switch the attached client back to the last session.\n\t   [\t       Enter copy mode to copy text or view the history.\n\t   ]\t       Paste the most recently copied buffer of text.\n\t   c\t       Create a new window.\n\t   d\t       Detach the current client.\n\t   f\t       Prompt to search for text in open windows.\n\t   i\t       Display some information about the current window.\n\t   l\t       Move to the previously selected window.\n\t   m\t       Mark the current pane (see select-pane -m).\n\t   M\t       Clear the marked pane.\n\t   n\t       Change to the next window.\n\t   o\t       Select the next pane in the current window.\n\t   p\t       Change to the previous window.\n\t   q\t       Briefly display pane indexes.\n\t   r\t       Force redraw of the attached client.\n\t   s\t       Select a new session for the attached client\n\t\t       interactively.\n\t   t\t       Show the time.\n\t   w\t       Choose the current window interactively.\n\t   x\t       Kill the current pane.\n\t   z\t       Toggle zoom state of the current pane.\n\t   {\t       Swap the current pane with the previous pane.\n\t   }\t       Swap the current pane with the next pane.\n\t   ~\t       Show previous messages from tmux, if any.\n\t   Page Up     Enter copy mode and scroll one page up.\n\t   Up, Down\n\t   Left, Right\n\t\t       Change to the pane above, below, to the left, or to the\n\t\t       right of the current pane.\n\t   M-1 to M-5  Arrange panes in one of the seven preset layouts: even-\n\t\t       horizontal, even-vertical, main-horizontal, main-\n\t\t       horizontal-mirrored, main-vertical, main-vertical, or\n\t\t       tiled.\n\t   Space       Arrange the current window in the next preset layout.\n\t   M-n\t       Move to the next window with a bell or activity marker.\n\t   M-o\t       Rotate the panes in the current window backwards.\n\t   M-p\t       Move to the previous window with a bell or activity\n\t\t       marker.\n\t   C-Up, C-Down\n\t   C-Left, C-Right\n\t\t       Resize the current pane in steps of one cell.\n\t   M-Up, M-Down\n\t   M-Left, M-Right\n\t\t       Resize the current pane in steps of five cells.\n\n     Key bindings may be changed with the bind-key and unbind-key commands.\n",
        "     tmux supports a large number of commands which can be used to control its\n     behaviour.  Each command is named and can accept zero or more flags and\n     arguments.  They may be bound to a key with the bind-key command or run\n     from the shell prompt, a shell script, a configuration file or the\n     command prompt.  For example, the same set-option command run from the\n     shell prompt, from ~/.tmux.conf and bound to a key may look like:\n\n\t   $ tmux set-option -g status-style bg=cyan\n\n\t   set-option -g status-style bg=cyan\n\n\t   bind-key C set-option -g status-style bg=cyan\n\n     Here, the command name is ‘set-option’, ‘-g’ is a flag and ‘status-style’\n     and ‘bg=cyan’ are arguments.\n\n     tmux distinguishes between command parsing and execution.\tIn order to\n     execute a command, tmux needs it to be split up into its name and\n     arguments.  This is command parsing.  If a command is run from the shell,\n     the shell parses it; from inside tmux or from a configuration file, tmux\n     does.  Examples of when tmux parses commands are:\n\n\t   -   in a configuration file;\n\n\t   -   typed at the command prompt (see command-prompt);\n\n\t   -   given to bind-key;\n\n\t   -   passed as arguments to if-shell or confirm-before.\n\n     To execute commands, each client has a ‘command queue’.  A global command\n     queue not attached to any client is used on startup for configuration\n     files like ~/.tmux.conf.  Parsed commands added to the queue are executed\n     in order.\tSome commands, like if-shell and confirm-before, parse their\n     argument to create a new command which is inserted immediately after\n     themselves.  This means that arguments can be parsed twice or more - once\n     when the parent command (such as if-shell) is parsed and again when it\n     parses and executes its command.  Commands like if-shell, run-shell and\n     display-panes stop execution of subsequent commands on the queue until\n     something happens - if-shell and run-shell until a shell command finishes\n     and display-panes until a key is pressed.\tFor example, the following\n     commands:\n\n\t   new-session; new-window\n\t   if-shell \"true\" \"split-window\"\n\t   kill-session\n\n     Will execute new-session, new-window, if-shell, the shell command\n     true(1), split-window and kill-session in that order.\n\n     The COMMANDS section lists the tmux commands and their arguments.\n",
        "     This section describes the syntax of commands parsed by tmux, for example\n     in a configuration file or at the command prompt.\tNote that when\n     commands are entered into the shell, they are parsed by the shell - see\n     for example ksh(1) or csh(1).\n\n     Each command is terminated by a newline or a semicolon (;).  Commands\n     separated by semicolons together form a ‘command sequence’ - if a command\n     in the sequence encounters an error, no subsequent commands are executed.\n\n     It is recommended that a semicolon used as a command separator should be\n     written as an individual token, for example from sh(1):\n\n\t   $ tmux neww \\; splitw\n\n     Or:\n\n\t   $ tmux neww ';' splitw\n\n     Or from the tmux command prompt:\n\n\t   neww ; splitw\n\n     However, a trailing semicolon is also interpreted as a command separator,\n     for example in these sh(1) commands:\n\n\t   $ tmux neww\\; splitw\n\n     Or:\n\n\t   $ tmux 'neww;' splitw\n\n     As in these examples, when running tmux from the shell extra care must be\n     taken to properly quote semicolons:\n\n\t   1.\tSemicolons that should be interpreted as a command separator",
        "\t   2.\tIndividual semicolons or trailing semicolons that should be",
        "\t\t      $ tmux neww 'foo\\\\;' bar\n\t\t      $ tmux neww foo\\\\\\\\; bar\n\n\t   3.\tSemicolons that are not individual tokens or trailing another",
        "\t\t      $ tmux neww 'foo-;-bar'\n\t\t      $ tmux neww foo-\\\\;-bar\n\n     Comments are marked by the unquoted # character - any remaining text\n     after a comment is ignored until the end of the line.\n\n     If the last character of a line is \\, the line is joined with the\n     following line (the \\ and the newline are completely removed).  This is\n     called line continuation and applies both inside and outside quoted\n     strings and in comments, but not inside braces.\n\n     Command arguments may be specified as strings surrounded by single (')\n     quotes, double quotes (\") or braces ({}).\tThis is required when the\n     argument contains any special character.  Single and double quoted\n     strings cannot span multiple lines except with line continuation.\tBraces\n     can span multiple lines.\n\n     Outside of quotes and inside double quotes, these replacements are\n     performed:\n\n\t   -   Environment variables preceded by $ are replaced with their\n\t       value from the global environment (see the GLOBAL AND SESSION\n\t       ENVIRONMENT section).\n\n\t   -   A leading ~ or ~user is expanded to the home directory of the\n\t       current or specified user.\n\n\t   -   \\uXXXX or \\uXXXXXXXX is replaced by the Unicode codepoint\n\t       corresponding to the given four or eight digit hexadecimal\n\t       number.\n\n\t   -   When preceded (escaped) by a \\, the following characters are\n\t       replaced: \\e by the escape character; \\r by a carriage return;\n\t       \\n by a newline; and \\t by a tab.\n\n\t   -   \\ooo is replaced by a character of the octal value ooo.\tThree\n\t       octal digits are required, for example \\001.  The largest valid\n\t       character is \\377.\n\n\t   -   Any other characters preceded by \\ are replaced by themselves\n\t       (that is, the \\ is removed) and are not treated as having any\n\t       special meaning - so for example \\; will not mark a command\n\t       sequence and \\$ will not expand an environment variable.\n\n     Braces are parsed as a configuration file (so conditions such as ‘%if’\n     are processed) and then converted into a string.  They are designed to\n     avoid the need for additional escaping when passing a group of tmux\n     commands as an argument (for example to if-shell).  These two examples\n     produce an identical command - note that no escaping is needed when using\n     {}:\n\n\t   if-shell true {\n\t       display -p 'brace-dollar-foo: }$foo'\n\t   }\n\n\t   if-shell true \"display -p 'brace-dollar-foo: }\\$foo'\"\n\n     Braces may be enclosed inside braces, for example:\n\n\t   bind x if-shell \"true\" {\n\t       if-shell \"true\" {\n\t\t   display \"true!\"\n\t       }\n\t   }\n\n     Environment variables may be set by using the syntax ‘name=value’, for\n     example ‘HOME=/home/user’.  Variables set during parsing are added to the\n     global environment.  A hidden variable may be set with ‘%hidden’, for\n     example:\n\n\t   %hidden MYVAR=42\n\n     Hidden variables are not passed to the environment of processes created\n     by tmux.  See the GLOBAL AND SESSION ENVIRONMENT section.\n\n     Commands may be parsed conditionally by surrounding them with ‘%if’,\n     ‘%elif’, ‘%else’ and ‘%endif’.  The argument to ‘%if’ and ‘%elif’ is\n     expanded as a format (see FORMATS) and if it evaluates to false (zero or\n     empty), subsequent text is ignored until the closing ‘%elif’, ‘%else’ or\n     ‘%endif’.\tFor example:\n\n\t   %if \"#{==:#{host},myhost}\"\n\t   set -g status-style bg=red\n\t   %elif \"#{==:#{host},myotherhost}\"\n\t   set -g status-style bg=green\n\t   %else\n\t   set -g status-style bg=blue\n\t   %endif\n\n     Will change the status line to red if running on ‘myhost’, green if\n     running on ‘myotherhost’, or blue if running on another host.\n     Conditionals may be given on one line, for example:\n\n\t   %if #{==:#{host},myhost} set -g status-style bg=red %endif\n",
        "     This section describes the commands supported by tmux.  Most commands\n     accept the optional -t (and sometimes -s) argument with one of\n     target-client, target-session, target-window, or target-pane.  These\n     specify the client, session, window or pane which a command should\n     affect.\n\n     target-client should be the name of the client, typically the pty(4) file\n     to which the client is connected, for example either of /dev/ttyp1 or\n     ttyp1 for the client attached to /dev/ttyp1.  If no client is specified,\n     tmux attempts to work out the client currently in use; if that fails, an\n     error is reported.  Clients may be listed with the list-clients command.\n\n     target-session is tried as, in order:\n\n\t   1.\tA session ID prefixed with a $.\n\n\t   2.\tAn exact name of a session (as listed by the list-sessions",
        "\t   3.\tThe start of a session name, for example ‘mysess’ would match",
        "\t   4.\tAn fnmatch(3) pattern which is matched against the session",
        "     If the session name is prefixed with an ‘=’, only an exact match is\n     accepted (so ‘=mysess’ will only match exactly ‘mysess’, not\n     ‘mysession’).\n\n     If a single session is found, it is used as the target session; multiple\n     matches produce an error.\tIf a session is omitted, the current session\n     is used if available; if no current session is available, the most\n     recently used is chosen.\n\n     target-window (or src-window or dst-window) specifies a window in the\n     form session:window.  session follows the same rules as for\n     target-session, and window is looked for in order as:\n\n\t   1.\tA special token, listed below.\n\n\t   2.\tA window index, for example ‘mysession:1’ is window 1 in",
        "\t   3.\tA window ID, such as @1.\n\n\t   4.\tAn exact window name, such as ‘mysession:mywindow’.\n\n\t   5.\tThe start of a window name, such as ‘mysession:mywin’.\n\n\t   6.\tAs an fnmatch(3) pattern matched against the window name.\n\n     Like sessions, a ‘=’ prefix will do an exact match only.  An empty window\n     name specifies the next unused index if appropriate (for example the\n     new-window and link-window commands) otherwise the current window in\n     session is chosen.\n\n     The following special tokens are available to indicate particular\n     windows.  Each has a single-character alternative form.\n\n     Token\t\tMeaning\n     {start}\t   ^\tThe lowest-numbered window\n     {end}\t   $\tThe highest-numbered window\n     {last}\t   !\tThe last (previously current) window\n     {next}\t   +\tThe next window by number\n     {previous}    -\tThe previous window by number\n\n     target-pane (or src-pane or dst-pane) may be a pane ID or takes a similar\n     form to target-window but with the optional addition of a period followed\n     by a pane index or pane ID, for example: ‘mysession:mywindow.1’.  If the\n     pane index is omitted, the currently active pane in the specified window\n     is used.  The following special tokens are available for the pane index:\n\n     Token\t\t    Meaning\n     {last}\t       !    The last (previously active) pane\n     {next}\t       +    The next pane by number\n     {previous}        -    The previous pane by number\n     {top}\t\t    The top pane\n     {bottom}\t\t    The bottom pane\n     {left}\t\t    The leftmost pane\n     {right}\t\t    The rightmost pane\n     {top-left} \t    The top-left pane\n     {top-right}\t    The top-right pane\n     {bottom-left}\t    The bottom-left pane\n     {bottom-right}\t    The bottom-right pane\n     {up-of}\t\t    The pane above the active pane\n     {down-of}\t\t    The pane below the active pane\n     {left-of}\t\t    The pane to the left of the active pane\n     {right-of} \t    The pane to the right of the active pane\n\n     The tokens ‘+’ and ‘-’ may be followed by an offset, for example:\n\n\t   select-window -t:+2\n\n     In addition, target-session, target-window or target-pane may consist\n     entirely of the token ‘{mouse}’ (alternative form ‘=’) to specify the\n     session, window or pane where the most recent mouse event occurred (see\n     the MOUSE SUPPORT section) or ‘{marked}’ (alternative form ‘~’) to\n     specify the marked pane (see select-pane -m).\n\n     Sessions, window and panes are each numbered with a unique ID; session\n     IDs are prefixed with a ‘$’, windows with a ‘@’, and panes with a ‘%’.\n     These are unique and are unchanged for the life of the session, window or\n     pane in the tmux server.  The pane ID is passed to the child process of\n     the pane in the TMUX_PANE environment variable.  IDs may be displayed\n     using the ‘session_id’, ‘window_id’, or ‘pane_id’ formats (see the\n     FORMATS section) and the display-message, list-sessions, list-windows or\n     list-panes commands.\n\n     shell-command arguments are sh(1) commands.  This may be a single\n     argument passed to the shell, for example:\n\n\t   new-window 'vi ~/.tmux.conf'\n\n     Will run:\n\n\t   /bin/sh -c 'vi ~/.tmux.conf'\n\n     Additionally, the new-window, new-session, split-window, respawn-window\n     and respawn-pane commands allow shell-command to be given as multiple\n     arguments and executed directly (without ‘sh -c’).  This can avoid issues\n     with shell quoting.  For example:\n\n\t   $ tmux new-window vi ~/.tmux.conf\n\n     Will run vi(1) directly without invoking the shell.\n\n     command [argument ...] refers to a tmux command, either passed with the\n     command and arguments separately, for example:\n\n\t   bind-key F1 set-option status off\n\n     Or passed as a single string argument in .tmux.conf, for example:\n\n\t   bind-key F1 { set-option status off }\n\n     Example tmux commands include:\n\n\t   refresh-client -t/dev/ttyp2\n\n\t   rename-session -tfirst newname\n\n\t   set-option -wt:0 monitor-activity on\n\n\t   new-window ; split-window -d\n\n\t   bind-key R source-file ~/.tmux.conf \\; \\\n\t\t   display-message \"source-file done\"\n\n     Or from sh(1):\n\n\t   $ tmux kill-window -t :1\n\n\t   $ tmux new-window \\; split-window -d\n\n\t   $ tmux new-session -d 'vi ~/.tmux.conf' \\; split-window -d \\; attach\n",
        "     The tmux server manages clients, sessions, windows and panes.  Clients\n     are attached to sessions to interact with them, either when they are\n     created with the new-session command, or later with the attach-session\n     command.  Each session has one or more windows linked into it.  Windows\n     may be linked to multiple sessions and are made up of one or more panes,\n     each of which contains a pseudo terminal.\tCommands for creating, linking\n     and otherwise manipulating windows are covered in the WINDOWS AND PANES\n     section.\n\n     The following commands are available to manage clients and sessions:\n\n     attach-session [-dErx] [-c working-directory] [-f flags] [-t\n\t     target-session]\n\t\t   (alias: attach)\n\t     If run from outside tmux, attach to target-session in the current\n\t     terminal.\ttarget-session must already exist - to create a new\n\t     session, see the new-session command (with -A to create or\n\t     attach).  If used from inside, switch the currently attached\n\t     session to target-session.  If -d is specified, any other clients\n\t     attached to the session are detached.  If -x is given, send\n\t     SIGHUP to the parent process of the client as well as detaching\n\t     the client, typically causing it to exit.\t-f sets a comma-\n\t     separated list of client flags.  The flags are:\n\n\t     active-pane\n\t\t     the client has an independent active pane\n\n\t     ignore-size\n\t\t     the client does not affect the size of other clients\n\n\t     no-output\n\t\t     the client does not receive pane output in control mode\n\n\t     pause-after=seconds\n\t\t     output is paused once the pane is seconds behind in\n\t\t     control mode\n\n\t     read-only\n\t\t     the client is read-only\n\n\t     wait-exit\n\t\t     wait for an empty line input before exiting in control\n\t\t     mode\n\n\t     A leading ‘!’ turns a flag off if the client is already attached.\n\t     -r is an alias for -f read-only,ignore-size.  When a client is\n\t     read-only, only keys bound to the detach-client or switch-client\n\t     commands have any effect.\tA client with the active-pane flag\n\t     allows the active pane to be selected independently of the\n\t     window's active pane used by clients without the flag.  This only\n\t     affects the cursor position and commands issued from the client;\n\t     other features such as hooks and styles continue to use the\n\t     window's active pane.\n\n\t     If no server is started, attach-session will attempt to start it;\n\t     this will fail unless sessions are created in the configuration\n\t     file.\n\n\t     The target-session rules for attach-session are slightly\n\t     adjusted: if tmux needs to select the most recently used session,\n\t     it will prefer the most recently used unattached session.\n\n\t     -c will set the session working directory (used for new windows)\n\t     to working-directory.\n\n\t     If -E is used, the update-environment option will not be applied.\n\n     detach-client [-aP] [-E shell-command] [-s target-session] [-t\n\t     target-client]\n\t\t   (alias: detach)\n\t     Detach the current client if bound to a key, the client specified\n\t     with -t, or all clients currently attached to the session\n\t     specified by -s.  The -a option kills all but the client given\n\t     with -t.  If -P is given, send SIGHUP to the parent process of\n\t     the client, typically causing it to exit.\tWith -E, run\n\t     shell-command to replace the client.\n\n     has-session [-t target-session]\n\t\t   (alias: has)\n\t     Report an error and exit with 1 if the specified session does not\n\t     exist.  If it does exist, exit with 0.\n\n     kill-server\n\t     Kill the tmux server and clients and destroy all sessions.\n\n     kill-session [-aC] [-t target-session]\n\t     Destroy the given session, closing any windows linked to it and\n\t     no other sessions, and detaching all clients attached to it.  If\n\t     -a is given, all sessions but the specified one is killed.  The\n\t     -C flag clears alerts (bell, activity, or silence) in all windows\n\t     linked to the session.\n\n     list-clients [-F format] [-f filter] [-t target-session]\n\t\t   (alias: lsc)\n\t     List all clients attached to the server.  -F specifies the format\n\t     of each line and -f a filter.  Only clients for which the filter\n\t     is true are shown.  See the FORMATS section.  If target-session\n\t     is specified, list only clients connected to that session.\n\n     list-commands [-F format] [command]\n\t\t   (alias: lscm)\n\t     List the syntax of command or - if omitted - of all commands\n\t     supported by tmux.\n\n     list-sessions [-F format] [-f filter]\n\t\t   (alias: ls)\n\t     List all sessions managed by the server.  -F specifies the format\n\t     of each line and -f a filter.  Only sessions for which the filter\n\t     is true are shown.  See the FORMATS section.\n\n     lock-client [-t target-client]\n\t\t   (alias: lockc)\n\t     Lock target-client, see the lock-server command.\n\n     lock-session [-t target-session]\n\t\t   (alias: locks)\n\t     Lock all clients attached to target-session.\n\n     new-session [-AdDEPX] [-c start-directory] [-e environment] [-f flags]\n\t     [-F format] [-n window-name] [-s session-name] [-t group-name]\n\t     [-x width] [-y height] [shell-command]\n\t\t   (alias: new)\n\t     Create a new session with name session-name.\n\n\t     The new session is attached to the current terminal unless -d is\n\t     given.  window-name and shell-command are the name of and shell\n\t     command to execute in the initial window.\tWith -d, the initial\n\t     size comes from the global default-size option; -x and -y can be\n\t     used to specify a different size.\t‘-’ uses the size of the\n\t     current client if any.  If -x or -y is given, the default-size\n\t     option is set for the session.  -f sets a comma-separated list of\n\t     client flags (see attach-session).\n\n\t     If run from a terminal, any termios(4) special characters are\n\t     saved and used for new windows in the new session.\n\n\t     The -A flag makes new-session behave like attach-session if\n\t     session-name already exists; if -A is given, -D behaves like -d\n\t     to attach-session, and -X behaves like -x to attach-session.\n\n\t     If -t is given, it specifies a session group.  Sessions in the\n\t     same group share the same set of windows - new windows are linked\n\t     to all sessions in the group and any windows closed removed from\n\t     all sessions.  The current and previous window and any session\n\t     options remain independent and any session in a group may be\n\t     killed without affecting the others.  The group-name argument may\n\t     be:\n\n\t     1.      the name of an existing group, in which case the new\n\t\t     session is added to that group;\n\n\t     2.      the name of an existing session - the new session is\n\t\t     added to the same group as that session, creating a new\n\t\t     group if necessary;\n\n\t     3.      the name for a new group containing only the new session.\n\n\t     -n and shell-command are invalid if -t is used.\n\n\t     The -P option prints information about the new session after it\n\t     has been created.\tBy default, it uses the format\n\t     ‘#{session_name}:’ but a different format may be specified with\n\t     -F.\n\n\t     If -E is used, the update-environment option will not be applied.\n\t     -e takes the form ‘VARIABLE=value’ and sets an environment\n\t     variable for the newly created session; it may be specified\n\t     multiple times.\n\n     refresh-client [-cDLRSU] [-A pane:state] [-B name:what:format] [-C size]\n\t     [-f flags] [-l [target-pane]] [-r pane:report] [-t target-client]\n\t     [adjustment]\n\t\t   (alias: refresh)\n\t     Refresh the current client if bound to a key, or a single client\n\t     if one is given with -t.  If -S is specified, only update the\n\t     client's status line.\n\n\t     The -U, -D, -L -R, and -c flags allow the visible portion of a\n\t     window which is larger than the client to be changed.  -U moves\n\t     the visible part up by adjustment rows and -D down, -L left by\n\t     adjustment columns and -R right.  -c returns to tracking the\n\t     cursor automatically.  If adjustment is omitted, 1 is used.  Note\n\t     that the visible position is a property of the client not of the\n\t     window, changing the current window in the attached session will\n\t     reset it.\n\n\t     -C sets the width and height of a control mode client or of a\n\t     window for a control mode client, size must be one of\n\t     ‘widthxheight’ or ‘window ID:widthxheight’, for example ‘80x24’\n\t     or ‘@0:80x24’.  -A allows a control mode client to trigger\n\t     actions on a pane.  The argument is a pane ID (with leading ‘%’),\n\t     a colon, then one of ‘on’, ‘off’, ‘continue’ or ‘pause’.  If\n\t     ‘off’, tmux will not send output from the pane to the client and\n\t     if all clients have turned the pane off, will stop reading from\n\t     the pane.\tIf ‘continue’, tmux will return to sending output to\n\t     the pane if it was paused (manually or with the pause-after\n\t     flag).  If ‘pause’, tmux will pause the pane.  -A may be given\n\t     multiple times for different panes.\n\n\t     -B sets a subscription to a format for a control mode client.\n\t     The argument is split into three items by colons: name is a name\n\t     for the subscription; what is a type of item to subscribe to;\n\t     format is the format.  After a subscription is added, changes to\n\t     the format are reported with the %subscription-changed\n\t     notification, at most once a second.  If only the name is given,\n\t     the subscription is removed.  what may be empty to check the\n\t     format only for the attached session, or one of: a pane ID such\n\t     as ‘%0’; ‘%*’ for all panes in the attached session; a window ID\n\t     such as ‘@0’; or ‘@*’ for all windows in the attached session.\n\n\t     -f sets a comma-separated list of client flags, see\n\t     attach-session.  -r allows a control mode client to provide\n\t     information about a pane via a report (such as the response to\n\t     OSC 10).  The argument is a pane ID (with a leading ‘%’), a\n\t     colon, then a report escape sequence.\n\n\t     -l requests the clipboard from the client using the xterm(1)\n\t     escape sequence.  If target-pane is given, the clipboard is sent\n\t     (in encoded form), otherwise it is stored in a new paste buffer.\n\n\t     -L, -R, -U and -D move the visible portion of the window left,\n\t     right, up or down by adjustment, if the window is larger than the\n\t     client.  -c resets so that the position follows the cursor.  See\n\t     the window-size option.\n\n     rename-session [-t target-session] new-name\n\t\t   (alias: rename)\n\t     Rename the session to new-name.\n\n     server-access [-adlrw] [user]\n\t     Change the access or read/write permission of user.  The user\n\t     running the tmux server (its owner) and the root user cannot be\n\t     changed and are always permitted access.\n\n\t     -a and -d are used to give or revoke access for the specified\n\t     user.  If the user is already attached, the -d flag causes their\n\t     clients to be detached.\n\n\t     -r and -w change the permissions for user: -r makes their clients\n\t     read-only and -w writable.  -l lists current access permissions.\n\n\t     By default, the access list is empty and tmux creates sockets\n\t     with file system permissions preventing access by any user other\n\t     than the owner (and root).  These permissions must be changed\n\t     manually.\tGreat care should be taken not to allow access to\n\t     untrusted users even read-only.\n\n     show-messages [-JT] [-t target-client]\n\t\t   (alias: showmsgs)\n\t     Show server messages or information.  Messages are stored, up to\n\t     a maximum of the limit set by the message-limit server option.\n\t     -J and -T show debugging information about jobs and terminals.\n\n     source-file [-Fnqv] [-t target-pane] path ...\n\t\t   (alias: source)\n\t     Execute commands from one or more files specified by path (which\n\t     may be glob(7) patterns).\tIf -F is present, then path is\n\t     expanded as a format.  If -q is given, no error will be returned\n\t     if path does not exist.  With -n, the file is parsed but no\n\t     commands are executed.  -v shows the parsed commands and line\n\t     numbers if possible.\n\n     start-server\n\t\t   (alias: start)\n\t     Start the tmux server, if not already running, without creating\n\t     any sessions.\n\n\t     Note that as by default the tmux server will exit with no\n\t     sessions, this is only useful if a session is created in\n\t     ~/.tmux.conf, exit-empty is turned off, or another command is run\n\t     as part of the same command sequence.  For example:\n\n\t\t   $ tmux start \\; show -g\n\n     suspend-client [-t target-client]\n\t\t   (alias: suspendc)\n\t     Suspend a client by sending SIGTSTP (tty stop).\n\n     switch-client [-ElnprZ] [-c target-client] [-t target-session] [-T\n\t     key-table]\n\t\t   (alias: switchc)\n\t     Switch the current session for client target-client to\n\t     target-session.  As a special case, -t may refer to a pane (a\n\t     target that contains ‘:’, ‘.’ or ‘%’), to change session, window\n\t     and pane.\tIn that case, -Z keeps the window zoomed if it was\n\t     zoomed.  If -l, -n or -p is used, the client is moved to the\n\t     last, next or previous session respectively.  -r toggles the\n\t     client read-only and ignore-size flags (see the attach-session\n\t     command).\n\n\t     If -E is used, update-environment option will not be applied.\n\n\t     -T sets the client's key table; the next key from the client will\n\t     be interpreted from key-table.  This may be used to configure\n\t     multiple prefix keys, or to bind commands to sequences of keys.\n\t     For example, to make typing ‘abc’ run the list-keys command:\n\n\t\t   bind-key -Ttable2 c list-keys\n\t\t   bind-key -Ttable1 b switch-client -Ttable2\n\t\t   bind-key -Troot   a switch-client -Ttable1\n",
        "     Each window displayed by tmux may be split into one or more panes; each\n     pane takes up a certain area of the display and is a separate terminal.\n     A window may be split into panes using the split-window command.  Windows\n     may be split horizontally (with the -h flag) or vertically.  Panes may be\n     resized with the resize-pane command (bound to ‘C-Up’, ‘C-Down’ ‘C-Left’\n     and ‘C-Right’ by default), the current pane may be changed with the\n     select-pane command and the rotate-window and swap-pane commands may be\n     used to swap panes without changing their position.  Panes are numbered\n     beginning from zero in the order they are created.\n\n     By default, a tmux pane permits direct access to the terminal contained\n     in the pane.  A pane may also be put into one of several modes:\n\n\t   -   Copy mode, which permits a section of a window or its history\n\t       to be copied to a paste buffer for later insertion into another\n\t       window.\tThis mode is entered with the copy-mode command, bound\n\t       to ‘[’ by default.  Copied text can be pasted with the\n\t       paste-buffer command, bound to ‘]’.\n\n\t   -   View mode, which is like copy mode but is entered when a\n\t       command that produces output, such as list-keys, is executed\n\t       from a key binding.\n\n\t   -   Choose mode, which allows an item to be chosen from a list.\n\t       This may be a client, a session or window or pane, or a buffer.\n\t       This mode is entered with the choose-buffer, choose-client and\n\t       choose-tree commands.\n\n     In copy mode an indicator is displayed in the top-right corner of the\n     pane with the current position and the number of lines in the history.\n\n     Commands are sent to copy mode using the -X flag to the send-keys\n     command.  When a key is pressed, copy mode automatically uses one of two\n     key tables, depending on the mode-keys option: copy-mode for emacs, or\n     copy-mode-vi for vi.  Key tables may be viewed with the list-keys\n     command.\n\n     The following commands are supported in copy mode:\n\n     append-selection\n\t     Append the selection to the top paste buffer.\n\n     append-selection-and-cancel (vi: A)\n\t     Append the selection to the top paste buffer and exit copy mode.\n\n     back-to-indentation (vi: ^) (emacs: M-m)\n\t     Move the cursor back to the indentation.\n\n     begin-selection (vi: Space) (emacs: C-Space)\n\t     Begin selection.\n\n     bottom-line (vi: L)\n\t     Move to the bottom line.\n\n     cancel (vi: q) (emacs: Escape)\n\t     Exit copy mode.\n\n     clear-selection (vi: Escape) (emacs: C-g)\n\t     Clear the current selection.\n\n     copy-end-of-line [prefix]\n\t     Copy from the cursor position to the end of the line.  prefix is\n\t     used to name the new paste buffer.\n\n     copy-end-of-line-and-cancel [prefix]\n\t     Copy from the cursor position and exit copy mode.\n\n     copy-pipe-end-of-line [command] [prefix]\n\t     Copy from the cursor position to the end of the line and pipe the\n\t     text to command.  prefix is used to name the new paste buffer.\n\n     copy-pipe-end-of-line-and-cancel [command] [prefix]\n\t     Same as copy-pipe-end-of-line but also exit copy mode.\n\n     copy-line [prefix]\n\t     Copy the entire line.\n\n     copy-line-and-cancel [prefix]\n\t     Copy the entire line and exit copy mode.\n\n     copy-pipe-line [command] [prefix]\n\t     Copy the entire line and pipe the text to command.  prefix is\n\t     used to name the new paste buffer.\n\n     copy-pipe-line-and-cancel [command] [prefix]\n\t     Same as copy-pipe-line but also exit copy mode.\n\n     copy-pipe [command] [prefix]\n\t     Copy the selection, clear it and pipe its text to command.\n\t     prefix is used to name the new paste buffer.\n\n     copy-pipe-no-clear [command] [prefix]\n\t     Same as copy-pipe but do not clear the selection.\n\n     copy-pipe-and-cancel [command] [prefix]\n\t     Same as copy-pipe but also exit copy mode.\n\n     copy-selection [prefix]\n\t     Copies the current selection.\n\n     copy-selection-no-clear [prefix]\n\t     Same as copy-selection but do not clear the selection.\n\n     copy-selection-and-cancel [prefix] (vi: Enter) (emacs: M-w)\n\t     Copy the current selection and exit copy mode.\n\n     cursor-down (vi: j) (emacs: Down)\n\t     Move the cursor down.\n\n     cursor-down-and-cancel\n\t     Same as cursor-down but also exit copy mode if reaching the\n\t     bottom.\n\n     cursor-left (vi: h) (emacs: Left)\n\t     Move the cursor left.\n\n     cursor-right (vi: l) (emacs: Right)\n\t     Move the cursor right.\n\n     cursor-up (vi: k) (emacs: Up)\n\t     Move the cursor up.\n\n     end-of-line (vi: $) (emacs: C-e)\n\t     Move the cursor to the end of the line.\n\n     goto-line line (vi: :) (emacs: g)\n\t     Move the cursor to a specific line.\n\n     halfpage-down (vi: C-d) (emacs: M-Down)\n\t     Scroll down by half a page.\n\n     halfpage-down-and-cancel\n\t     Same as halfpage-down but also exit copy mode if reaching the\n\t     bottom.\n\n     halfpage-up (vi: C-u) (emacs: M-Up)\n\t     Scroll up by half a page.\n\n     history-bottom (vi: G) (emacs: M->)\n\t     Scroll to the bottom of the history.\n\n     history-top (vi: g) (emacs: M-<)\n\t     Scroll to the top of the history.\n\n     jump-again (vi: ;) (emacs: ;)\n\t     Repeat the last jump.\n\n     jump-backward to (vi: F) (emacs: F)\n\t     Jump backwards to the specified text.\n\n     jump-forward to (vi: f) (emacs: f)\n\t     Jump forward to the specified text.\n\n     jump-reverse (vi: ,) (emacs: ,)\n\t     Repeat the last jump in the reverse direction (forward becomes\n\t     backward and backward becomes forward).\n\n     jump-to-backward to (vi: T)\n\t     Jump backwards, but one character less, placing the cursor on the\n\t     character after the target.\n\n     jump-to-forward to (vi: t)\n\t     Jump forward, but one character less, placing the cursor on the\n\t     character before the target.\n\n     jump-to-mark (vi: M-x) (emacs: M-x)\n\t     Jump to the last mark.\n\n     middle-line (vi: M) (emacs: M-r)\n\t     Move to the middle line.\n\n     next-matching-bracket (vi: %) (emacs: M-C-f)\n\t     Move to the next matching bracket.\n\n     next-paragraph (vi: }) (emacs: M-})\n\t     Move to the next paragraph.\n\n     next-prompt [-o]\n\t     Move to the next prompt.\n\n     next-word (vi: w)\n\t     Move to the next word.\n\n     next-word-end (vi: e) (emacs: M-f)\n\t     Move to the end of the next word.\n\n     next-space (vi: W)\n\t     Same as next-word but use a space alone as the word separator.\n\n     next-space-end (vi: E)\n\t     Same as next-word-end but use a space alone as the word\n\t     separator.\n\n     other-end (vi: o)\n\t     Switch at which end of the selection the cursor sits.\n\n     page-down (vi: C-f) (emacs: PageDown)\n\t     Scroll down by one page.\n\n     page-down-and-cancel\n\t     Same as page-down but also exit copy mode if reaching the bottom.\n\n     page-up (vi: C-b) (emacs: PageUp)\n\t     Scroll up by one page.\n\n     pipe [command]\n\t     Pipe the selected text to command and clear the selection.\n\n     pipe-no-clear [command]\n\t     Same as pipe but do not clear the selection.\n\n     pipe-and-cancel [command] [prefix]\n\t     Same as pipe but also exit copy mode.\n\n     previous-matching-bracket (emacs: M-C-b)\n\t     Move to the previous matching bracket.\n\n     previous-paragraph (vi: {) (emacs: M-{)\n\t     Move to the previous paragraph.\n\n     previous-prompt [-o]\n\t     Move to the previous prompt.\n\n     previous-word (vi: b) (emacs: M-b)\n\t     Move to the previous word.\n\n     previous-space (vi: B)\n\t     Same as previous-word but use a space alone as the word\n\t     separator.\n\n     rectangle-on\n\t     Turn on rectangle selection mode.\n\n     rectangle-off\n\t     Turn off rectangle selection mode.\n\n     rectangle-toggle (vi: v) (emacs: R)\n\t     Toggle rectangle selection mode.\n\n     refresh-from-pane (vi: r) (emacs: r)\n\t     Refresh the content from the pane.\n\n     scroll-bottom\n\t     Scroll up until the current line is at the bottom while keeping\n\t     the cursor on that line.\n\n     scroll-down (vi: C-e) (emacs: C-Down)\n\t     Scroll down.\n\n     scroll-down-and-cancel\n\t     Same as scroll-down but also exit copy mode if the cursor reaches\n\t     the bottom.\n\n     scroll-middle (vi: z)\n\t     Scroll so that the current line becomes the middle one while\n\t     keeping the cursor on that line.\n\n     scroll-top\n\t     Scroll down until the current line is at the top while keeping\n\t     the cursor on that line.\n\n     scroll-up (vi: C-y) (emacs: C-Up)\n\t     Scroll up.\n\n     search-again (vi: n) (emacs: n)\n\t     Repeat the last search.\n\n     search-backward text (vi: ?)\n\t     Search backwards for the specified text.\n\n     search-backward-incremental text (emacs: C-r)\n\t     Search backwards incrementally for the specified text.  Is\n\t     expected to be used with the -i flag to the command-prompt\n\t     command.\n\n     search-backward-text text\n\t     Search backwards for the specified plain text.\n\n     search-forward text (vi: /)\n\t     Search forward for the specified text.\n\n     search-forward-incremental text (emacs: C-s)\n\t     Search forward incrementally for the specified text.  Is expected\n\t     to be used with the -i flag to the command-prompt command.\n\n     search-forward-text text\n\t     Search forward for the specified plain text.\n\n     search-reverse (vi: N) (emacs: N)\n\t     Repeat the last search in the reverse direction (forward becomes\n\t     backward and backward becomes forward).\n\n     select-line (vi: V)\n\t     Select the current line.\n\n     select-word\n\t     Select the current word.\n\n     set-mark (vi: X) (emacs: X)\n\t     Mark the current line.\n\n     start-of-line (vi: 0) (emacs: C-a)\n\t     Move the cursor to the start of the line.\n\n     stop-selection\n\t     Stop selecting without clearing the current selection.\n\n     toggle-position (vi: P) (emacs: P)\n\t     Toggle the visibility of the position indicator in the top right.\n\n     top-line (vi: H) (emacs: M-R)\n\t     Move to the top line.\n\n     The search commands come in several varieties: ‘search-forward’ and\n     ‘search-backward’ search for a regular expression; the ‘-text’ variants\n     search for a plain text string rather than a regular expression;\n     ‘-incremental’ perform an incremental search and expect to be used with\n     the -i flag to the command-prompt command.  ‘search-again’ repeats the\n     last search and ‘search-reverse’ does the same but reverses the direction\n     (forward becomes backward and backward becomes forward).\n\n     The ‘next-prompt’ and ‘previous-prompt’ move between shell prompts, but\n     require the shell to emit an escape sequence (\\033]133;A\\033\\\\) to tell\n     tmux where the prompts are located; if the shell does not do this, these\n     commands will do nothing.\tThe -o flag jumps to the beginning of the\n     command output instead of the shell prompt.\n\n     Copy commands may take an optional buffer prefix argument which is used\n     to generate the buffer name (the default is ‘buffer’ so buffers are named\n     ‘buffer0’, ‘buffer1’ and so on).  Pipe commands take a command argument\n     which is the command to which the selected text is piped.\t‘copy-pipe’\n     variants also copy the selection.\tThe ‘-and-cancel’ variants of some\n     commands exit copy mode after they have completed (for copy commands) or\n     when the cursor reaches the bottom (for scrolling commands).  ‘-no-clear’\n     variants do not clear the selection.\n\n     The next and previous word keys skip over whitespace and treat\n     consecutive runs of either word separators or other letters as words.\n     Word separators can be customized with the word-separators session\n     option.  Next word moves to the start of the next word, next word end to\n     the end of the next word and previous word to the start of the previous\n     word.  The three next and previous space keys work similarly but use a\n     space alone as the word separator.  Setting word-separators to the empty\n     string makes next/previous word equivalent to next/previous space.\n\n     The jump commands enable quick movement within a line.  For instance,\n     typing ‘f’ followed by ‘/’ will move the cursor to the next ‘/’ character\n     on the current line.  A ‘;’ will then jump to the next occurrence.\n\n     Commands in copy mode may be prefaced by an optional repeat count.  With\n     vi key bindings, a prefix is entered using the number keys; with emacs,\n     the Alt (meta) key and a number begins prefix entry.\n\n     The synopsis for the copy-mode command is:\n\n     copy-mode [-deHMqu] [-s src-pane] [-t target-pane]\n\t     Enter copy mode.  -u also scrolls one page up after entering and\n\t     -d one page down if already in copy mode.\t-M begins a mouse drag\n\t     (only valid if bound to a mouse key binding, see MOUSE SUPPORT).\n\t     -H hides the position indicator in the top right.\t-q cancels\n\t     copy mode and any other modes.  -s copies from src-pane instead\n\t     of target-pane.\n\n\t     -e specifies that scrolling to the bottom of the history (to the\n\t     visible screen) should exit copy mode.  While in copy mode,\n\t     pressing a key other than those used for scrolling will disable\n\t     this behaviour.  This is intended to allow fast scrolling through\n\t     a pane's history, for example with:\n\n\t\t   bind PageUp copy-mode -eu\n\t\t   bind PageDown copy-mode -ed\n\n     A number of preset arrangements of panes are available, these are called\n     layouts.  These may be selected with the select-layout command or cycled\n     with next-layout (bound to ‘Space’ by default); once a layout is chosen,\n     panes within it may be moved and resized as normal.\n\n     The following layouts are supported:\n\n     even-horizontal\n\t     Panes are spread out evenly from left to right across the window.\n\n     even-vertical\n\t     Panes are spread evenly from top to bottom.\n\n     main-horizontal\n\t     A large (main) pane is shown at the top of the window and the\n\t     remaining panes are spread from left to right in the leftover\n\t     space at the bottom.  Use the main-pane-height window option to\n\t     specify the height of the top pane.\n\n     main-horizontal-mirrored\n\t     The same as main-horizontal but mirrored so the main pane is at\n\t     the bottom of the window.\n\n     main-vertical\n\t     A large (main) pane is shown on the left of the window and the\n\t     remaining panes are spread from top to bottom in the leftover\n\t     space on the right.  Use the main-pane-width window option to\n\t     specify the width of the left pane.\n\n     main-vertical-mirrored\n\t     The same as main-vertical but mirrored so the main pane is on the\n\t     right of the window.\n\n     tiled   Panes are spread out as evenly as possible over the window in\n\t     both rows and columns.\n\n     In addition, select-layout may be used to apply a previously used layout\n     - the list-windows command displays the layout of each window in a form\n     suitable for use with select-layout.  For example:\n\n\t   $ tmux list-windows\n\t   0: ksh [159x48]\n\t       layout: bb62,159x48,0,0{79x48,0,0,79x48,80,0}\n\t   $ tmux select-layout 'bb62,159x48,0,0{79x48,0,0,79x48,80,0}'\n\n     tmux automatically adjusts the size of the layout for the current window\n     size.  Note that a layout cannot be applied to a window with more panes\n     than that from which the layout was originally defined.\n\n     Commands related to windows and panes are as follows:\n\n     break-pane [-abdP] [-F format] [-n window-name] [-s src-pane] [-t\n\t     dst-window]\n\t\t   (alias: breakp)\n\t     Break src-pane off from its containing window to make it the only\n\t     pane in dst-window.  With -a or -b, the window is moved to the\n\t     next index after or before (existing windows are moved if\n\t     necessary).  If -d is given, the new window does not become the\n\t     current window.  The -P option prints information about the new\n\t     window after it has been created.\tBy default, it uses the format\n\t     ‘#{session_name}:#{window_index}.#{pane_index}’ but a different\n\t     format may be specified with -F.\n\n     capture-pane [-aAepPqCJN] [-b buffer-name] [-E end-line] [-S start-line]\n\t     [-t target-pane]\n\t\t   (alias: capturep)\n\t     Capture the contents of a pane.  If -p is given, the output goes\n\t     to stdout, otherwise to the buffer specified with -b or a new\n\t     buffer if omitted.  If -a is given, the alternate screen is used,\n\t     and the history is not accessible.  If no alternate screen\n\t     exists, an error will be returned unless -q is given.  If -e is\n\t     given, the output includes escape sequences for text and\n\t     background attributes.  -C also escapes non-printable characters\n\t     as octal \\xxx.  -T ignores trailing positions that do not contain\n\t     a character.  -N preserves trailing spaces at each line's end and\n\t     -J preserves trailing spaces and joins any wrapped lines; -J\n\t     implies -T.  -P captures only any output that the pane has\n\t     received that is the beginning of an as-yet incomplete escape\n\t     sequence.\n\n\t     -S and -E specify the starting and ending line numbers, zero is\n\t     the first line of the visible pane and negative numbers are lines\n\t     in the history.  ‘-’ to -S is the start of the history and to -E\n\t     the end of the visible pane.  The default is to capture only the\n\t     visible contents of the pane.\n\n     choose-client [-NrZ] [-F format] [-f filter] [-K key-format] [-O\n\t     sort-order] [-t target-pane] [template]\n\t     Put a pane into client mode, allowing a client to be selected\n\t     interactively from a list.  Each client is shown on one line.  A\n\t     shortcut key is shown on the left in brackets allowing for\n\t     immediate choice, or the list may be navigated and an item chosen\n\t     or otherwise manipulated using the keys below.  -Z zooms the\n\t     pane.  The following keys may be used in client mode:\n\n\t\t   Key\t  Function\n\t\t   Enter  Choose selected client\n\t\t   Up\t  Select previous client\n\t\t   Down   Select next client\n\t\t   C-s\t  Search by name\n\t\t   n\t  Repeat last search forwards\n\t\t   N\t  Repeat last search backwards\n\t\t   t\t  Toggle if client is tagged\n\t\t   T\t  Tag no clients\n\t\t   C-t\t  Tag all clients\n\t\t   d\t  Detach selected client\n\t\t   D\t  Detach tagged clients\n\t\t   x\t  Detach and HUP selected client\n\t\t   X\t  Detach and HUP tagged clients\n\t\t   z\t  Suspend selected client\n\t\t   Z\t  Suspend tagged clients\n\t\t   f\t  Enter a format to filter items\n\t\t   O\t  Change sort field\n\t\t   r\t  Reverse sort order\n\t\t   v\t  Toggle preview\n\t\t   q\t  Exit mode\n\n\t     After a client is chosen, ‘%%’ is replaced by the client name in\n\t     template and the result executed as a command.  If template is\n\t     not given, \"detach-client -t '%%'\" is used.\n\n\t     -O specifies the initial sort field: one of ‘name’, ‘size’,\n\t     ‘creation’ (time), or ‘activity’ (time).  -r reverses the sort\n\t     order.  -f specifies an initial filter: the filter is a format -\n\t     if it evaluates to zero, the item in the list is not shown,\n\t     otherwise it is shown.  If a filter would lead to an empty list,\n\t     it is ignored.  -F specifies the format for each item in the list\n\t     and -K a format for each shortcut key; both are evaluated once\n\t     for each line.  -N starts without the preview.  This command\n\t     works only if at least one client is attached.\n\n     choose-tree [-GNrswZ] [-F format] [-f filter] [-K key-format] [-O\n\t     sort-order] [-t target-pane] [template]\n\t     Put a pane into tree mode, where a session, window or pane may be\n\t     chosen interactively from a tree.\tEach session, window or pane\n\t     is shown on one line.  A shortcut key is shown on the left in\n\t     brackets allowing for immediate choice, or the tree may be\n\t     navigated and an item chosen or otherwise manipulated using the\n\t     keys below.  -s starts with sessions collapsed and -w with\n\t     windows collapsed.  -Z zooms the pane.  The following keys may be\n\t     used in tree mode:\n\n\t\t   Key\t  Function\n\t\t   Enter  Choose selected item\n\t\t   Up\t  Select previous item\n\t\t   Down   Select next item\n\t\t   +\t  Expand selected item\n\t\t   -\t  Collapse selected item\n\t\t   M-+\t  Expand all items\n\t\t   M--\t  Collapse all items\n\t\t   x\t  Kill selected item\n\t\t   X\t  Kill tagged items\n\t\t   <\t  Scroll list of previews left\n\t\t   >\t  Scroll list of previews right\n\t\t   C-s\t  Search by name\n\t\t   m\t  Set the marked pane\n\t\t   M\t  Clear the marked pane\n\t\t   n\t  Repeat last search forwards\n\t\t   N\t  Repeat last search backwards\n\t\t   t\t  Toggle if item is tagged\n\t\t   T\t  Tag no items\n\t\t   C-t\t  Tag all items\n\t\t   :\t  Run a command for each tagged item\n\t\t   f\t  Enter a format to filter items\n\t\t   H\t  Jump to the starting pane\n\t\t   O\t  Change sort field\n\t\t   r\t  Reverse sort order\n\t\t   v\t  Toggle preview\n\t\t   q\t  Exit mode\n\n\t     After a session, window or pane is chosen, the first instance of\n\t     ‘%%’ and all instances of ‘%1’ are replaced by the target in\n\t     template and the result executed as a command.  If template is\n\t     not given, \"switch-client -t '%%'\" is used.\n\n\t     -O specifies the initial sort field: one of ‘index’, ‘name’, or\n\t     ‘time’ (activity).  -r reverses the sort order.  -f specifies an\n\t     initial filter: the filter is a format - if it evaluates to zero,\n\t     the item in the list is not shown, otherwise it is shown.\tIf a\n\t     filter would lead to an empty list, it is ignored.  -F specifies\n\t     the format for each item in the tree and -K a format for each\n\t     shortcut key; both are evaluated once for each line.  -N starts\n\t     without the preview.  -G includes all sessions in any session\n\t     groups in the tree rather than only the first.  This command\n\t     works only if at least one client is attached.\n\n     customize-mode [-NZ] [-F format] [-f filter] [-t target-pane] [template]\n\t     Put a pane into customize mode, where options and key bindings\n\t     may be browsed and modified from a list.  Option values in the\n\t     list are shown for the active pane in the current window.\t-Z\n\t     zooms the pane.  The following keys may be used in customize\n\t     mode:\n\n\t\t   Key\t  Function\n\t\t   Enter  Set pane, window, session or global option value\n\t\t   Up\t  Select previous item\n\t\t   Down   Select next item\n\t\t   +\t  Expand selected item\n\t\t   -\t  Collapse selected item\n\t\t   M-+\t  Expand all items\n\t\t   M--\t  Collapse all items\n\t\t   s\t  Set option value or key attribute\n\t\t   S\t  Set global option value\n\t\t   w\t  Set window option value, if option is for pane and\n\t\t\t  window\n\t\t   d\t  Set an option or key to the default\n\t\t   D\t  Set tagged options and tagged keys to the default\n\t\t   u\t  Unset an option (set to default value if global) or\n\t\t\t  unbind a key\n\t\t   U\t  Unset tagged options and unbind tagged keys\n\t\t   C-s\t  Search by name\n\t\t   n\t  Repeat last search forwards\n\t\t   N\t  Repeat last search backwards\n\t\t   t\t  Toggle if item is tagged\n\t\t   T\t  Tag no items\n\t\t   C-t\t  Tag all items\n\t\t   f\t  Enter a format to filter items\n\t\t   v\t  Toggle option information\n\t\t   q\t  Exit mode\n\n\t     -f specifies an initial filter: the filter is a format - if it\n\t     evaluates to zero, the item in the list is not shown, otherwise\n\t     it is shown.  If a filter would lead to an empty list, it is\n\t     ignored.  -F specifies the format for each item in the tree.  -N\n\t     starts without the option information.  This command works only\n\t     if at least one client is attached.\n\n     display-panes [-bN] [-d duration] [-t target-client] [template]\n\t\t   (alias: displayp)\n\t     Display a visible indicator of each pane shown by target-client.\n\t     See the display-panes-colour and display-panes-active-colour\n\t     session options.  The indicator is closed when a key is pressed\n\t     (unless -N is given) or duration milliseconds have passed.  If -d\n\t     is not given, display-panes-time is used.\tA duration of zero\n\t     means the indicator stays until a key is pressed.\tWhile the\n\t     indicator is on screen, a pane may be chosen with the ‘0’ to ‘9’\n\t     keys, which will cause template to be executed as a command with\n\t     ‘%%’ substituted by the pane ID.  The default template is\n\t     \"select-pane -t '%%'\".  With -b, other commands are not blocked\n\t     from running until the indicator is closed.\n\n     find-window [-iCNrTZ] [-t target-pane] match-string\n\t\t   (alias: findw)\n\t     Search for a fnmatch(3) pattern or, with -r, regular expression\n\t     match-string in window names, titles, and visible content (but\n\t     not history).  The flags control matching behavior: -C matches\n\t     only visible window contents, -N matches only the window name and\n\t     -T matches only the window title.\t-i makes the search ignore\n\t     case.  The default is -CNT.  -Z zooms the pane.\n\n\t     This command works only if at least one client is attached.\n\n     join-pane [-bdfhv] [-l size] [-s src-pane] [-t dst-pane]\n\t\t   (alias: joinp)\n\t     Like split-window, but instead of splitting dst-pane and creating\n\t     a new pane, split it and move src-pane into the space.  This can\n\t     be used to reverse break-pane.  The -b option causes src-pane to\n\t     be joined to left of or above dst-pane.\n\n\t     If -s is omitted and a marked pane is present (see select-pane\n\t     -m), the marked pane is used rather than the current pane.\n\n     kill-pane [-a] [-t target-pane]\n\t\t   (alias: killp)\n\t     Destroy the given pane.  If no panes remain in the containing\n\t     window, it is also destroyed.  The -a option kills all but the\n\t     pane given with -t.\n\n     kill-window [-a] [-t target-window]\n\t\t   (alias: killw)\n\t     Kill the current window or the window at target-window, removing\n\t     it from any sessions to which it is linked.  The -a option kills\n\t     all but the window given with -t.\n\n     last-pane [-deZ] [-t target-window]\n\t\t   (alias: lastp)\n\t     Select the last (previously selected) pane.  -Z keeps the window\n\t     zoomed if it was zoomed.  -e enables or -d disables input to the\n\t     pane.\n\n     last-window [-t target-session]\n\t\t   (alias: last)\n\t     Select the last (previously selected) window.  If no\n\t     target-session is specified, select the last window of the\n\t     current session.\n\n     link-window [-abdk] [-s src-window] [-t dst-window]\n\t\t   (alias: linkw)\n\t     Link the window at src-window to the specified dst-window.  If\n\t     dst-window is specified and no such window exists, the src-window\n\t     is linked there.  With -a or -b the window is moved to the next\n\t     index after or before dst-window (existing windows are moved if\n\t     necessary).  If -k is given and dst-window exists, it is killed,\n\t     otherwise an error is generated.  If -d is given, the newly\n\t     linked window is not selected.\n\n     list-panes [-as] [-F format] [-f filter] [-t target]\n\t\t   (alias: lsp)\n\t     If -a is given, target is ignored and all panes on the server are\n\t     listed.  If -s is given, target is a session (or the current\n\t     session).\tIf neither is given, target is a window (or the\n\t     current window).  -F specifies the format of each line and -f a\n\t     filter.  Only panes for which the filter is true are shown.  See\n\t     the FORMATS section.\n\n     list-windows [-a] [-F format] [-f filter] [-t target-session]\n\t\t   (alias: lsw)\n\t     If -a is given, list all windows on the server.  Otherwise, list\n\t     windows in the current session or in target-session.  -F\n\t     specifies the format of each line and -f a filter.  Only windows\n\t     for which the filter is true are shown.  See the FORMATS section.\n\n     move-pane [-bdfhv] [-l size] [-s src-pane] [-t dst-pane]\n\t\t   (alias: movep)\n\t     Does the same as join-pane.\n\n     move-window [-abrdk] [-s src-window] [-t dst-window]\n\t\t   (alias: movew)\n\t     This is similar to link-window, except the window at src-window\n\t     is moved to dst-window.  With -r, all windows in the session are\n\t     renumbered in sequential order, respecting the base-index option.\n\n     new-window [-abdkPS] [-c start-directory] [-e environment] [-F format]\n\t     [-n window-name] [-t target-window] [shell-command]\n\t\t   (alias: neww)\n\t     Create a new window.  With -a or -b, the new window is inserted\n\t     at the next index after or before the specified target-window,\n\t     moving windows up if necessary; otherwise target-window is the\n\t     new window location.\n\n\t     If -d is given, the session does not make the new window the\n\t     current window.  target-window represents the window to be\n\t     created; if the target already exists an error is shown, unless\n\t     the -k flag is used, in which case it is destroyed.  If -S is\n\t     given and a window named window-name already exists, it is\n\t     selected (unless -d is also given in which case the command does\n\t     nothing).\n\n\t     shell-command is the command to execute.  If shell-command is not\n\t     specified, the value of the default-command option is used.  -c\n\t     specifies the working directory in which the new window is\n\t     created.\n\n\t     When the shell command completes, the window closes.  See the\n\t     remain-on-exit option to change this behaviour.\n\n\t     -e takes the form ‘VARIABLE=value’ and sets an environment\n\t     variable for the newly created window; it may be specified\n\t     multiple times.\n\n\t     The TERM environment variable must be set to ‘screen’ or ‘tmux’\n\t     for all programs running inside tmux.  New windows will\n\t     automatically have ‘TERM=screen’ added to their environment, but\n\t     care must be taken not to reset this in shell start-up files or\n\t     by the -e option.\n\n\t     The -P option prints information about the new window after it\n\t     has been created.\tBy default, it uses the format\n\t     ‘#{session_name}:#{window_index}’ but a different format may be\n\t     specified with -F.\n\n     next-layout [-t target-window]\n\t\t   (alias: nextl)\n\t     Move a window to the next layout and rearrange the panes to fit.\n\n     next-window [-a] [-t target-session]\n\t\t   (alias: next)\n\t     Move to the next window in the session.  If -a is used, move to\n\t     the next window with an alert.\n\n     pipe-pane [-IOo] [-t target-pane] [shell-command]\n\t\t   (alias: pipep)\n\t     Pipe output sent by the program in target-pane to a shell command\n\t     or vice versa.  A pane may only be connected to one command at a\n\t     time, any existing pipe is closed before shell-command is\n\t     executed.\tThe shell-command string may contain the special\n\t     character sequences supported by the status-left option.  If no\n\t     shell-command is given, the current pipe (if any) is closed.\n\n\t     -I and -O specify which of the shell-command output streams are\n\t     connected to the pane: with -I stdout is connected (so anything\n\t     shell-command prints is written to the pane as if it were typed);\n\t     with -O stdin is connected (so any output in the pane is piped to\n\t     shell-command).  Both may be used together and if neither are\n\t     specified, -O is used.\n\n\t     The -o option only opens a new pipe if no previous pipe exists,\n\t     allowing a pipe to be toggled with a single key, for example:\n\n\t\t   bind-key C-p pipe-pane -o 'cat >>~/output.#I-#P'\n\n     previous-layout [-t target-window]\n\t\t   (alias: prevl)\n\t     Move to the previous layout in the session.\n\n     previous-window [-a] [-t target-session]\n\t\t   (alias: prev)\n\t     Move to the previous window in the session.  With -a, move to the\n\t     previous window with an alert.\n\n     rename-window [-t target-window] new-name\n\t\t   (alias: renamew)\n\t     Rename the current window, or the window at target-window if\n\t     specified, to new-name.\n\n     resize-pane [-DLMRTUZ] [-t target-pane] [-x width] [-y height]\n\t     [adjustment]\n\t\t   (alias: resizep)\n\t     Resize a pane, up, down, left or right by adjustment with -U, -D,\n\t     -L or -R, or to an absolute size with -x or -y.  The adjustment\n\t     is given in lines or columns (the default is 1); -x and -y may be\n\t     a given as a number of lines or columns or followed by ‘%’ for a\n\t     percentage of the window size (for example ‘-x 10%’).  With -Z,\n\t     the active pane is toggled between zoomed (occupying the whole of\n\t     the window) and unzoomed (its normal position in the layout).\n\n\t     -M begins mouse resizing (only valid if bound to a mouse key\n\t     binding, see MOUSE SUPPORT).\n\n\t     -T trims all lines below the current cursor position and moves\n\t     lines out of the history to replace them.\n\n     resize-window [-aADLRU] [-t target-window] [-x width] [-y height]\n\t     [adjustment]\n\t\t   (alias: resizew)\n\t     Resize a window, up, down, left or right by adjustment with -U,\n\t     -D, -L or -R, or to an absolute size with -x or -y.  The\n\t     adjustment is given in lines or cells (the default is 1).\t-A\n\t     sets the size of the largest session containing the window; -a\n\t     the size of the smallest.\tThis command will automatically set\n\t     window-size to manual in the window options.\n\n     respawn-pane [-k] [-c start-directory] [-e environment] [-t target-pane]\n\t     [shell-command]\n\t\t   (alias: respawnp)\n\t     Reactivate a pane in which the command has exited (see the\n\t     remain-on-exit window option).  If shell-command is not given,\n\t     the command used when the pane was created or last respawned is\n\t     executed.\tThe pane must be already inactive, unless -k is given,\n\t     in which case any existing command is killed.  -c specifies a new\n\t     working directory for the pane.  The -e option has the same\n\t     meaning as for the new-window command.\n\n     respawn-window [-k] [-c start-directory] [-e environment] [-t\n\t     target-window] [shell-command]\n\t\t   (alias: respawnw)\n\t     Reactivate a window in which the command has exited (see the\n\t     remain-on-exit window option).  If shell-command is not given,\n\t     the command used when the window was created or last respawned is\n\t     executed.\tThe window must be already inactive, unless -k is\n\t     given, in which case any existing command is killed.  -c\n\t     specifies a new working directory for the window.\tThe -e option\n\t     has the same meaning as for the new-window command.\n\n     rotate-window [-DUZ] [-t target-window]\n\t\t   (alias: rotatew)\n\t     Rotate the positions of the panes within a window, either upward\n\t     (numerically lower) with -U or downward (numerically higher).  -Z\n\t     keeps the window zoomed if it was zoomed.\n\n     select-layout [-Enop] [-t target-pane] [layout-name]\n\t\t   (alias: selectl)\n\t     Choose a specific layout for a window.  If layout-name is not\n\t     given, the last preset layout used (if any) is reapplied.\t-n and\n\t     -p are equivalent to the next-layout and previous-layout\n\t     commands.\t-o applies the last set layout if possible (undoes the\n\t     most recent layout change).  -E spreads the current pane and any\n\t     panes next to it out evenly.\n\n     select-pane [-DdeLlMmRUZ] [-T title] [-t target-pane]\n\t\t   (alias: selectp)\n\t     Make pane target-pane the active pane in its window.  If one of\n\t     -D, -L, -R, or -U is used, respectively the pane below, to the\n\t     left, to the right, or above the target pane is used.  -Z keeps\n\t     the window zoomed if it was zoomed.  -l is the same as using the\n\t     last-pane command.  -e enables or -d disables input to the pane.\n\t     -T sets the pane title.\n\n\t     -m and -M are used to set and clear the marked pane.  There is\n\t     one marked pane at a time, setting a new marked pane clears the\n\t     last.  The marked pane is the default target for -s to join-pane,\n\t     move-pane, swap-pane and swap-window.\n\n     select-window [-lnpT] [-t target-window]\n\t\t   (alias: selectw)\n\t     Select the window at target-window.  -l, -n and -p are equivalent\n\t     to the last-window, next-window and previous-window commands.  If\n\t     -T is given and the selected window is already the current\n\t     window, the command behaves like last-window.\n\n     split-window [-bdfhIvPZ] [-c start-directory] [-e environment] [-l size]\n\t     [-t target-pane] [shell-command] [-F format]\n\t\t   (alias: splitw)\n\t     Create a new pane by splitting target-pane: -h does a horizontal\n\t     split and -v a vertical split; if neither is specified, -v is\n\t     assumed.  The -l option specifies the size of the new pane in\n\t     lines (for vertical split) or in columns (for horizontal split);\n\t     size may be followed by ‘%’ to specify a percentage of the\n\t     available space.  The -b option causes the new pane to be created\n\t     to the left of or above target-pane.  The -f option creates a new\n\t     pane spanning the full window height (with -h) or full window\n\t     width (with -v), instead of splitting the active pane.  -Z zooms\n\t     if the window is not zoomed, or keeps it zoomed if already\n\t     zoomed.\n\n\t     An empty shell-command ('') will create a pane with no command\n\t     running in it.  Output can be sent to such a pane with the\n\t     display-message command.  The -I flag (if shell-command is not\n\t     specified or empty) will create an empty pane and forward any\n\t     output from stdin to it.  For example:\n\n\t\t   $ make 2>&1|tmux splitw -dI &\n\n\t     All other options have the same meaning as for the new-window\n\t     command.\n\n     swap-pane [-dDUZ] [-s src-pane] [-t dst-pane]\n\t\t   (alias: swapp)\n\t     Swap two panes.  If -U is used and no source pane is specified\n\t     with -s, dst-pane is swapped with the previous pane (before it\n\t     numerically); -D swaps with the next pane (after it numerically).\n\t     -d instructs tmux not to change the active pane and -Z keeps the\n\t     window zoomed if it was zoomed.\n\n\t     If -s is omitted and a marked pane is present (see select-pane\n\t     -m), the marked pane is used rather than the current pane.\n\n     swap-window [-d] [-s src-window] [-t dst-window]\n\t\t   (alias: swapw)\n\t     This is similar to link-window, except the source and destination\n\t     windows are swapped.  It is an error if no window exists at\n\t     src-window.  If -d is given, the new window does not become the\n\t     current window.\n\n\t     If -s is omitted and a marked pane is present (see select-pane\n\t     -m), the window containing the marked pane is used rather than\n\t     the current window.\n\n     unlink-window [-k] [-t target-window]\n\t\t   (alias: unlinkw)\n\t     Unlink target-window.  Unless -k is given, a window may be\n\t     unlinked only if it is linked to multiple sessions - windows may\n\t     not be linked to no sessions; if -k is specified and the window\n\t     is linked to only one session, it is unlinked and destroyed.\n",
        "     tmux allows a command to be bound to most keys, with or without a prefix\n     key.  When specifying keys, most represent themselves (for example ‘A’ to\n     ‘Z’).  Ctrl keys may be prefixed with ‘C-’ or ‘^’, Shift keys with ‘S-’\n     and Alt (meta) with ‘M-’.\tIn addition, the following special key names\n     are accepted: Up, Down, Left, Right, BSpace, BTab, DC (Delete), End,\n     Enter, Escape, F1 to F12, Home, IC (Insert), NPage/PageDown/PgDn,\n     PPage/PageUp/PgUp, Space, and Tab.  Note that to bind the ‘\"’ or ‘'’\n     keys, quotation marks are necessary, for example:\n\n\t   bind-key '\"' split-window\n\t   bind-key \"'\" new-window\n\n     A command bound to the Any key will execute for all keys which do not\n     have a more specific binding.\n\n     Commands related to key bindings are as follows:\n\n     bind-key [-nr] [-N note] [-T key-table] key command [argument ...]\n\t\t   (alias: bind)\n\t     Bind key key to command.  Keys are bound in a key table.  By\n\t     default (without -T), the key is bound in the prefix key table.\n\t     This table is used for keys pressed after the prefix key (for\n\t     example, by default ‘c’ is bound to new-window in the prefix\n\t     table, so ‘C-b c’ creates a new window).  The root table is used\n\t     for keys pressed without the prefix key: binding ‘c’ to\n\t     new-window in the root table (not recommended) means a plain ‘c’\n\t     will create a new window.\t-n is an alias for -T root.  Keys may\n\t     also be bound in custom key tables and the switch-client -T\n\t     command used to switch to them from a key binding.  The -r flag\n\t     indicates this key may repeat, see the repeat-time option.  -N\n\t     attaches a note to the key (shown with list-keys -N).\n\n\t     To view the default bindings and possible commands, see the\n\t     list-keys command.\n\n     list-keys [-1aN] [-P prefix-string -T key-table] [key]\n\t\t   (alias: lsk)\n\t     List key bindings.  There are two forms: the default lists keys\n\t     as bind-key commands; -N lists only keys with attached notes and\n\t     shows only the key and note for each key.\n\n\t     With the default form, all key tables are listed by default.  -T\n\t     lists only keys in key-table.\n\n\t     With the -N form, only keys in the root and prefix key tables are\n\t     listed by default; -T also lists only keys in key-table.  -P\n\t     specifies a prefix to print before each key and -1 lists only the\n\t     first matching key.  -a lists the command for keys that do not\n\t     have a note rather than skipping them.\n\n     send-keys [-FHKlMRX] [-c target-client] [-N repeat-count] [-t\n\t     target-pane] key ...\n\t\t   (alias: send)\n\t     Send a key or keys to a window or client.\tEach argument key is\n\t     the name of the key (such as ‘C-a’ or ‘NPage’) to send; if the\n\t     string is not recognised as a key, it is sent as a series of\n\t     characters.  If -K is given, keys are sent to target-client, so\n\t     they are looked up in the client's key table, rather than to\n\t     target-pane.  All arguments are sent sequentially from first to\n\t     last.  If no keys are given and the command is bound to a key,\n\t     then that key is used.\n\n\t     The -l flag disables key name lookup and processes the keys as\n\t     literal UTF-8 characters.\tThe -H flag expects each key to be a\n\t     hexadecimal number for an ASCII character.\n\n\t     The -R flag causes the terminal state to be reset.\n\n\t     -M passes through a mouse event (only valid if bound to a mouse\n\t     key binding, see MOUSE SUPPORT).\n\n\t     -X is used to send a command into copy mode - see the WINDOWS AND\n\t     PANES section.  -N specifies a repeat count and -F expands\n\t     formats in arguments where appropriate.\n\n     send-prefix [-2] [-t target-pane]\n\t     Send the prefix key, or with -2 the secondary prefix key, to a\n\t     window as if it was pressed.\n\n     unbind-key [-anq] [-T key-table] key\n\t\t   (alias: unbind)\n\t     Unbind the command bound to key.  -n and -T are the same as for\n\t     bind-key.\tIf -a is present, all key bindings are removed.  The\n\t     -q option prevents errors being returned.\n",
        "     The appearance and behaviour of tmux may be modified by changing the\n     value of various options.\tThere are four types of option: server\n     options, session options, window options, and pane options.\n\n     The tmux server has a set of global server options which do not apply to\n     any particular window or session or pane.\tThese are altered with the\n     set-option -s command, or displayed with the show-options -s command.\n\n     In addition, each individual session may have a set of session options,\n     and there is a separate set of global session options.  Sessions which do\n     not have a particular option configured inherit the value from the global\n     session options.  Session options are set or unset with the set-option\n     command and may be listed with the show-options command.  The available\n     server and session options are listed under the set-option command.\n\n     Similarly, a set of window options is attached to each window and a set\n     of pane options to each pane.  Pane options inherit from window options.\n     This means any pane option may be set as a window option to apply the\n     option to all panes in the window without the option set, for example\n     these commands will set the background colour to red for all panes except\n     pane 0:\n\n\t   set -w window-style bg=red\n\t   set -pt:.0 window-style bg=blue\n\n     There is also a set of global window options from which any unset window\n     or pane options are inherited.  Window and pane options are altered with\n     set-option -w and -p commands and displayed with show-option -w and -p.\n\n     tmux also supports user options which are prefixed with a ‘@’.  User\n     options may have any name, so long as they are prefixed with ‘@’, and be\n     set to any string.  For example:\n\n\t   $ tmux set -wq @foo \"abc123\"\n\t   $ tmux show -wv @foo\n\t   abc123\n\n     Commands which set options are as follows:\n\n     set-option [-aFgopqsuUw] [-t target-pane] option value\n\t\t   (alias: set)\n\t     Set a pane option with -p, a window option with -w, a server\n\t     option with -s, otherwise a session option.  If the option is not\n\t     a user option, -w or -s may be unnecessary - tmux will infer the\n\t     type from the option name, assuming -w for pane options.  If -g\n\t     is given, the global session or window option is set.\n\n\t     -F expands formats in the option value.  The -u flag unsets an\n\t     option, so a session inherits the option from the global options\n\t     (or with -g, restores a global option to the default).  -U unsets\n\t     an option (like -u) but if the option is a pane option also\n\t     unsets the option on any panes in the window.  value depends on\n\t     the option and may be a number, a string, or a flag (on, off, or\n\t     omitted to toggle).\n\n\t     The -o flag prevents setting an option that is already set and\n\t     the -q flag suppresses errors about unknown or ambiguous options.\n\n\t     With -a, and if the option expects a string or a style, value is\n\t     appended to the existing setting.\tFor example:\n\n\t\t   set -g status-left \"foo\"\n\t\t   set -ag status-left \"bar\"\n\n\t     Will result in ‘foobar’.  And:\n\n\t\t   set -g status-style \"bg=red\"\n\t\t   set -ag status-style \"fg=blue\"\n\n\t     Will result in a red background and blue foreground.  Without -a,\n\t     the result would be the default background and a blue foreground.\n\n     show-options [-AgHpqsvw] [-t target-pane] [option]\n\t\t   (alias: show)\n\t     Show the pane options (or a single option if option is provided)\n\t     with -p, the window options with -w, the server options with -s,\n\t     otherwise the session options.  If the option is not a user\n\t     option, -w or -s may be unnecessary - tmux will infer the type\n\t     from the option name, assuming -w for pane options.  Global\n\t     session or window options are listed if -g is used.  -v shows\n\t     only the option value, not the name.  If -q is set, no error will\n\t     be returned if option is unset.  -H includes hooks (omitted by\n\t     default).\t-A includes options inherited from a parent set of\n\t     options, such options are marked with an asterisk.\n\n     Available server options are:\n\n     backspace key\n\t     Set the key sent by tmux for backspace.\n\n     buffer-limit number\n\t     Set the number of buffers; as new buffers are added to the top of\n\t     the stack, old ones are removed from the bottom if necessary to\n\t     maintain this maximum length.\n\n     command-alias[] name=value\n\t     This is an array of custom aliases for commands.  If an unknown\n\t     command matches name, it is replaced with value.  For example,\n\t     after:\n\n\t\t   set -s command-alias[100] zoom='resize-pane -Z'\n\n\t     Using:\n\n\t\t   zoom -t:.1\n\n\t     Is equivalent to:\n\n\t\t   resize-pane -Z -t:.1\n\n\t     Note that aliases are expanded when a command is parsed rather\n\t     than when it is executed, so binding an alias with bind-key will\n\t     bind the expanded form.\n\n     copy-command shell-command\n\t     Give the command to pipe to if the copy-pipe copy mode command is\n\t     used without arguments.\n\n     default-terminal terminal\n\t     Set the default terminal for new windows created in this session\n\t     - the default value of the TERM environment variable.  For tmux\n\t     to work correctly, this must be set to ‘screen’, ‘tmux’ or a\n\t     derivative of them.\n\n     escape-time time\n\t     Set the time in milliseconds for which tmux waits after an escape\n\t     is input to determine if it is part of a function or meta key\n\t     sequences.\n\n     editor shell-command\n\t     Set the command used when tmux runs an editor.\n\n     exit-empty [on | off]\n\t     If enabled (the default), the server will exit when there are no\n\t     active sessions.\n\n     exit-unattached [on | off]\n\t     If enabled, the server will exit when there are no attached\n\t     clients.\n\n     extended-keys [on | off | always]\n\t     Controls how modified keys (keys pressed together with Control,\n\t     Meta, or Shift) are reported.  This is the equivalent of the\n\t     modifyOtherKeys xterm(1) resource.\n\n\t     When set to on, the program inside the pane can request one of\n\t     two modes: mode 1 which changes the sequence for only keys which\n\t     lack an existing well-known representation; or mode 2 which\n\t     changes the sequence for all keys.  When set to always, modes 1\n\t     and 2 can still be requested by applications, but mode 1 will be\n\t     forced instead of the standard mode.  When set to off, this\n\t     feature is disabled and only standard keys are reported.\n\n\t     tmux will always request extended keys itself if the terminal\n\t     supports them.  See also the extkeys feature for the\n\t     terminal-features option, the extended-keys-format option and the\n\t     pane_key_mode variable.\n\n     extended-keys-format [csi-u | xterm]\n\t     Selects one of the two possible formats for reporting modified\n\t     keys to applications.  This is the equivalent of the\n\t     formatOtherKeys xterm(1) resource.  For example, C-S-a will be\n\t     reported as ‘^[[27;6;65~’ when set to xterm, and as ‘^[[65;6u’\n\t     when set to csi-u.\n\n     focus-events [on | off]\n\t     When enabled, focus events are requested from the terminal if\n\t     supported and passed through to applications running in tmux.\n\t     Attached clients should be detached and attached again after\n\t     changing this option.\n\n     history-file path\n\t     If not empty, a file to which tmux will write command prompt\n\t     history on exit and load it from on start.\n\n     message-limit number\n\t     Set the number of error or information messages to save in the\n\t     message log for each client.\n\n     prompt-history-limit number\n\t     Set the number of history items to save in the history file for\n\t     each type of command prompt.\n\n     set-clipboard [on | external | off]\n\t     Attempt to set the terminal clipboard content using the xterm(1)\n\t     escape sequence, if there is an Ms entry in the terminfo(5)\n\t     description (see the TERMINFO EXTENSIONS section).\n\n\t     If set to on, tmux will both accept the escape sequence to create\n\t     a buffer and attempt to set the terminal clipboard.  If set to\n\t     external, tmux will attempt to set the terminal clipboard but\n\t     ignore attempts by applications to set tmux buffers.  If off,\n\t     tmux will neither accept the clipboard escape sequence nor\n\t     attempt to set the clipboard.\n\n\t     Note that this feature needs to be enabled in xterm(1) by setting\n\t     the resource:\n\n\t\t   disallowedWindowOps: 20,21,SetXprop\n\n\t     Or changing this property from the xterm(1) interactive menu when\n\t     required.\n\n     terminal-features[] string\n\t     Set terminal features for terminal types read from terminfo(5).\n\t     tmux has a set of named terminal features.  Each will apply\n\t     appropriate changes to the terminfo(5) entry in use.\n\n\t     tmux can detect features for a few common terminals; this option\n\t     can be used to easily tell tmux about features supported by\n\t     terminals it cannot detect.  The terminal-overrides option allows\n\t     individual terminfo(5) capabilities to be set instead,\n\t     terminal-features is intended for classes of functionality\n\t     supported in a standard way but not reported by terminfo(5).\n\t     Care must be taken to configure this only with features the\n\t     terminal actually supports.\n\n\t     This is an array option where each entry is a colon-separated\n\t     string made up of a terminal type pattern (matched using\n\t     fnmatch(3)) followed by a list of terminal features.  The\n\t     available features are:\n\n\t     256     Supports 256 colours with the SGR escape sequences.\n\n\t     clipboard\n\t\t     Allows setting the system clipboard.\n\n\t     ccolour\n\t\t     Allows setting the cursor colour.\n\n\t     cstyle  Allows setting the cursor style.\n\n\t     extkeys\n\t\t     Supports extended keys.\n\n\t     focus   Supports focus reporting.\n\n\t     hyperlinks\n\t\t     Supports OSC 8 hyperlinks.\n\n\t     ignorefkeys\n\t\t     Ignore function keys from terminfo(5) and use the tmux\n\t\t     internal set only.\n\n\t     margins\n\t\t     Supports DECSLRM margins.\n\n\t     mouse   Supports xterm(1) mouse sequences.\n\n\t     osc7    Supports the OSC 7 working directory extension.\n\n\t     overline\n\t\t     Supports the overline SGR attribute.\n\n\t     rectfill\n\t\t     Supports the DECFRA rectangle fill escape sequence.\n\n\t     RGB     Supports RGB colour with the SGR escape sequences.\n\n\t     sixel   Supports SIXEL graphics.\n\n\t     strikethrough\n\t\t     Supports the strikethrough SGR escape sequence.\n\n\t     sync    Supports synchronized updates.\n\n\t     title   Supports xterm(1) title setting.\n\n\t     usstyle\n\t\t     Allows underscore style and colour to be set.\n\n     terminal-overrides[] string\n\t     Allow terminal descriptions read using terminfo(5) to be\n\t     overridden.  Each entry is a colon-separated string made up of a\n\t     terminal type pattern (matched using fnmatch(3)) and a set of\n\t     name=value entries.\n\n\t     For example, to set the ‘clear’ terminfo(5) entry to ‘\\e[H\\e[2J’\n\t     for all terminal types matching ‘rxvt*’:\n\n\t\t   rxvt*:clear=\\e[H\\e[2J\n\n\t     The terminal entry value is passed through strunvis(3) before\n\t     interpretation.\n\n     user-keys[] key\n\t     Set list of user-defined key escape sequences.  Each item is\n\t     associated with a key named ‘User0’, ‘User1’, and so on.\n\n\t     For example:\n\n\t\t   set -s user-keys[0] \"\\e[5;30012~\"\n\t\t   bind User0 resize-pane -L 3\n\n     Available session options are:\n\n     activity-action [any | none | current | other]\n\t     Set action on window activity when monitor-activity is on.  any\n\t     means activity in any window linked to a session causes a bell or\n\t     message (depending on visual-activity) in the current window of\n\t     that session, none means all activity is ignored (equivalent to\n\t     monitor-activity being off), current means only activity in\n\t     windows other than the current window are ignored and other means\n\t     activity in the current window is ignored but not those in other\n\t     windows.\n\n     assume-paste-time milliseconds\n\t     If keys are entered faster than one in milliseconds, they are\n\t     assumed to have been pasted rather than typed and tmux key\n\t     bindings are not processed.  The default is one millisecond and\n\t     zero disables.\n\n     base-index index\n\t     Set the base index from which an unused index should be searched\n\t     when a new window is created.  The default is zero.\n\n     bell-action [any | none | current | other]\n\t     Set action on a bell in a window when monitor-bell is on.\tThe\n\t     values are the same as those for activity-action.\n\n     default-command shell-command\n\t     Set the command used for new windows (if not specified when the\n\t     window is created) to shell-command, which may be any sh(1)\n\t     command.  The default is an empty string, which instructs tmux to\n\t     create a login shell using the value of the default-shell option.\n\n     default-shell path\n\t     Specify the default shell.  This is used as the login shell for\n\t     new windows when the default-command option is set to empty, and\n\t     must be the full path of the executable.  When started tmux tries\n\t     to set a default value from the first suitable of the SHELL\n\t     environment variable, the shell returned by getpwuid(3), or\n\t     /bin/sh.  This option should be configured when tmux is used as a\n\t     login shell.\n\n     default-size XxY\n\t     Set the default size of new windows when the window-size option\n\t     is set to manual or when a session is created with new-session\n\t     -d.  The value is the width and height separated by an ‘x’\n\t     character.  The default is 80x24.\n\n     destroy-unattached [off | on | keep-last | keep-group]\n\t     If on, destroy the session after the last client has detached.\n\t     If off (the default), leave the session orphaned.\tIf keep-last,\n\t     destroy the session only if it is in a group and has other\n\t     sessions in that group.  If keep-group, destroy the session\n\t     unless it is in a group and is the only session in that group.\n\n     detach-on-destroy [off | on | no-detached | previous | next]\n\t     If on (the default), the client is detached when the session it\n\t     is attached to is destroyed.  If off, the client is switched to\n\t     the most recently active of the remaining sessions.  If\n\t     no-detached, the client is detached only if there are no detached\n\t     sessions; if detached sessions exist, the client is switched to\n\t     the most recently active.\tIf previous or next, the client is\n\t     switched to the previous or next session in alphabetical order.\n\n     display-panes-active-colour colour\n\t     Set the colour used by the display-panes command to show the\n\t     indicator for the active pane.\n\n     display-panes-colour colour\n\t     Set the colour used by the display-panes command to show the\n\t     indicators for inactive panes.\n\n     display-panes-time time\n\t     Set the time in milliseconds for which the indicators shown by\n\t     the display-panes command appear.\n\n     display-time time\n\t     Set the amount of time for which status line messages and other\n\t     on-screen indicators are displayed.  If set to 0, messages and\n\t     indicators are displayed until a key is pressed.  time is in\n\t     milliseconds.\n\n     history-limit lines\n\t     Set the maximum number of lines held in window history.  This\n\t     setting applies only to new windows - existing window histories\n\t     are not resized and retain the limit at the point they were\n\t     created.\n\n     key-table key-table\n\t     Set the default key table to key-table instead of root.\n\n     lock-after-time number\n\t     Lock the session (like the lock-session command) after number\n\t     seconds of inactivity.  The default is not to lock (set to 0).\n\n     lock-command shell-command\n\t     Command to run when locking each client.  The default is to run\n\t     lock(1) with -np.\n\n     menu-style style\n\t     Set the menu style.  See the STYLES section on how to specify\n\t     style.  Attributes are ignored.\n\n     menu-selected-style style\n\t     Set the selected menu item style.\tSee the STYLES section on how\n\t     to specify style.\tAttributes are ignored.\n\n     menu-border-style style\n\t     Set the menu border style.  See the STYLES section on how to\n\t     specify style.  Attributes are ignored.\n\n     menu-border-lines type\n\t     Set the type of characters used for drawing menu borders.\tSee\n\t     popup-border-lines for possible values for border-lines.\n\n     message-command-style style\n\t     Set status line message command style.  This is used for the\n\t     command prompt with vi(1) keys when in command mode.  For how to\n\t     specify style, see the STYLES section.\n\n     message-line [0 | 1 | 2 | 3 | 4]\n\t     Set line on which status line messages and the command prompt are\n\t     shown.\n\n     message-style style\n\t     Set status line message style.  This is used for messages and for\n\t     the command prompt.  For how to specify style, see the STYLES\n\t     section.\n\n     mouse [on | off]\n\t     If on, tmux captures the mouse and allows mouse events to be\n\t     bound as key bindings.  See the MOUSE SUPPORT section for\n\t     details.\n\n     prefix key\n\t     Set the key accepted as a prefix key.  In addition to the\n\t     standard keys described under KEY BINDINGS, prefix can be set to\n\t     the special key ‘None’ to set no prefix.\n\n     prefix2 key\n\t     Set a secondary key accepted as a prefix key.  Like prefix,\n\t     prefix2 can be set to ‘None’.\n\n     prefix-timeout time\n\t     Set the time in milliseconds for which tmux waits after prefix is\n\t     input before dismissing it.  Can be set to zero to disable any\n\t     timeout.\n\n     renumber-windows [on | off]\n\t     If on, when a window is closed in a session, automatically\n\t     renumber the other windows in numerical order.  This respects the\n\t     base-index option if it has been set.  If off, do not renumber\n\t     the windows.\n\n     repeat-time time\n\t     Allow multiple commands to be entered without pressing the\n\t     prefix-key again in the specified time milliseconds (the default\n\t     is 500).  Whether a key repeats may be set when it is bound using\n\t     the -r flag to bind-key.  Repeat is enabled for the default keys\n\t     bound to the resize-pane command.\n\n     set-titles [on | off]\n\t     Attempt to set the client terminal title using the tsl and fsl\n\t     terminfo(5) entries if they exist.  tmux automatically sets these\n\t     to the \\e]0;...\\007 sequence if the terminal appears to be\n\t     xterm(1).\tThis option is off by default.\n\n     set-titles-string string\n\t     String used to set the client terminal title if set-titles is on.\n\t     Formats are expanded, see the FORMATS section.\n\n     silence-action [any | none | current | other]\n\t     Set action on window silence when monitor-silence is on.  The\n\t     values are the same as those for activity-action.\n\n     status [off | on | 2 | 3 | 4 | 5]\n\t     Show or hide the status line or specify its size.\tUsing on gives\n\t     a status line one row in height; 2, 3, 4 or 5 more rows.\n\n     status-format[] format\n\t     Specify the format to be used for each line of the status line.\n\t     The default builds the top status line from the various\n\t     individual status options below.\n\n     status-interval interval\n\t     Update the status line every interval seconds.  By default,\n\t     updates will occur every 15 seconds.  A setting of zero disables\n\t     redrawing at interval.\n\n     status-justify [left | centre | right | absolute-centre]\n\t     Set the position of the window list in the status line: left,\n\t     centre or right.  centre puts the window list in the relative\n\t     centre of the available free space; absolute-centre uses the\n\t     centre of the entire horizontal space.\n\n     status-keys [vi | emacs]\n\t     Use vi or emacs-style key bindings in the status line, for\n\t     example at the command prompt.  The default is emacs, unless the\n\t     VISUAL or EDITOR environment variables are set and contain the\n\t     string ‘vi’.\n\n     status-left string\n\t     Display string (by default the session name) to the left of the\n\t     status line.  string will be passed through strftime(3).  Also\n\t     see the FORMATS and STYLES sections.\n\n\t     For details on how the names and titles can be set see the NAMES\n\t     AND TITLES section.\n\n\t     Examples are:\n\n\t\t   #(sysctl vm.loadavg)\n\t\t   #[fg=yellow,bold]#(apm -l)%%#[default] [#S]\n\n\t     The default is ‘[#S] ’.\n\n     status-left-length length\n\t     Set the maximum length of the left component of the status line.\n\t     The default is 10.\n\n     status-left-style style\n\t     Set the style of the left part of the status line.  For how to\n\t     specify style, see the STYLES section.\n\n     status-position [top | bottom]\n\t     Set the position of the status line.\n\n     status-right string\n\t     Display string to the right of the status line.  By default, the\n\t     current pane title in double quotes, the date and the time are\n\t     shown.  As with status-left, string will be passed to strftime(3)\n\t     and character pairs are replaced.\n\n     status-right-length length\n\t     Set the maximum length of the right component of the status line.\n\t     The default is 40.\n\n     status-right-style style\n\t     Set the style of the right part of the status line.  For how to\n\t     specify style, see the STYLES section.\n\n     status-style style\n\t     Set status line style.  For how to specify style, see the STYLES\n\t     section.\n\n     update-environment[] variable\n\t     Set list of environment variables to be copied into the session\n\t     environment when a new session is created or an existing session\n\t     is attached.  Any variables that do not exist in the source\n\t     environment are set to be removed from the session environment\n\t     (as if -r was given to the set-environment command).\n\n     visual-activity [on | off | both]\n\t     If on, display a message instead of sending a bell when activity\n\t     occurs in a window for which the monitor-activity window option\n\t     is enabled.  If set to both, a bell and a message are produced.\n\n     visual-bell [on | off | both]\n\t     If on, a message is shown on a bell in a window for which the\n\t     monitor-bell window option is enabled instead of it being passed\n\t     through to the terminal (which normally makes a sound).  If set\n\t     to both, a bell and a message are produced.  Also see the\n\t     bell-action option.\n\n     visual-silence [on | off | both]\n\t     If monitor-silence is enabled, prints a message after the\n\t     interval has expired on a given window instead of sending a bell.\n\t     If set to both, a bell and a message are produced.\n\n     word-separators string\n\t     Sets the session's conception of what characters are considered\n\t     word separators, for the purposes of the next and previous word\n\t     commands in copy mode.\n\n     Available window options are:\n\n     aggressive-resize [on | off]\n\t     Aggressively resize the chosen window.  This means that tmux will\n\t     resize the window to the size of the smallest or largest session\n\t     (see the window-size option) for which it is the current window,\n\t     rather than the session to which it is attached.  The window may\n\t     resize when the current window is changed on another session;\n\t     this option is good for full-screen programs which support\n\t     SIGWINCH and poor for interactive programs such as shells.\n\n     automatic-rename [on | off]\n\t     Control automatic window renaming.  When this setting is enabled,\n\t     tmux will rename the window automatically using the format\n\t     specified by automatic-rename-format.  This flag is automatically\n\t     disabled for an individual window when a name is specified at\n\t     creation with new-window or new-session, or later with\n\t     rename-window, or with a terminal escape sequence.  It may be\n\t     switched off globally with:\n\n\t\t   set-option -wg automatic-rename off\n\n     automatic-rename-format format\n\t     The format (see FORMATS) used when the automatic-rename option is\n\t     enabled.\n\n     clock-mode-colour colour\n\t     Set clock colour.\n\n     clock-mode-style [12 | 24]\n\t     Set clock hour format.\n\n     fill-character character\n\t     Set the character used to fill areas of the terminal unused by a\n\t     window.\n\n     main-pane-height height\n     main-pane-width width\n\t     Set the width or height of the main (left or top) pane in the\n\t     main-horizontal, main-horizontal-mirrored, main-vertical, or\n\t     main-vertical-mirrored layouts.  If suffixed by ‘%’, this is a\n\t     percentage of the window size.\n\n     copy-mode-match-style style\n\t     Set the style of search matches in copy mode.  For how to specify\n\t     style, see the STYLES section.\n\n     copy-mode-mark-style style\n\t     Set the style of the line containing the mark in copy mode.  For\n\t     how to specify style, see the STYLES section.\n\n     copy-mode-current-match-style style\n\t     Set the style of the current search match in copy mode.  For how\n\t     to specify style, see the STYLES section.\n\n     mode-keys [vi | emacs]\n\t     Use vi or emacs-style key bindings in copy mode.  The default is\n\t     emacs, unless VISUAL or EDITOR contains ‘vi’.\n\n     mode-style style\n\t     Set window modes style.  For how to specify style, see the STYLES\n\t     section.\n\n     monitor-activity [on | off]\n\t     Monitor for activity in the window.  Windows with activity are\n\t     highlighted in the status line.\n\n     monitor-bell [on | off]\n\t     Monitor for a bell in the window.\tWindows with a bell are\n\t     highlighted in the status line.\n\n     monitor-silence [interval]\n\t     Monitor for silence (no activity) in the window within interval\n\t     seconds.  Windows that have been silent for the interval are\n\t     highlighted in the status line.  An interval of zero disables the\n\t     monitoring.\n\n     other-pane-height height\n\t     Set the height of the other panes (not the main pane) in the\n\t     main-horizontal and main-horizontal-mirrored layouts.  If this\n\t     option is set to 0 (the default), it will have no effect.\tIf\n\t     both the main-pane-height and other-pane-height options are set,\n\t     the main pane will grow taller to make the other panes the\n\t     specified height, but will never shrink to do so.\tIf suffixed by\n\t     ‘%’, this is a percentage of the window size.\n\n     other-pane-width width\n\t     Like other-pane-height, but set the width of other panes in the\n\t     main-vertical and main-vertical-mirrored layouts.\n\n     pane-active-border-style style\n\t     Set the pane border style for the currently active pane.  For how\n\t     to specify style, see the STYLES section.\tAttributes are\n\t     ignored.\n\n     pane-base-index index\n\t     Like base-index, but set the starting index for pane numbers.\n\n     pane-border-format format\n\t     Set the text shown in pane border status lines.\n\n     pane-border-indicators [off | colour | arrows | both]\n\t     Indicate active pane by colouring only half of the border in\n\t     windows with exactly two panes, by displaying arrow markers, by\n\t     drawing both or neither.\n\n     pane-border-lines type\n\t     Set the type of characters used for drawing pane borders.\ttype\n\t     may be one of:\n\n\t     single  single lines using ACS or UTF-8 characters\n\n\t     double  double lines using UTF-8 characters\n\n\t     heavy   heavy lines using UTF-8 characters\n\n\t     simple  simple ASCII characters\n\n\t     number  the pane number\n\n\t     ‘double’ and ‘heavy’ will fall back to standard ACS line drawing\n\t     when UTF-8 is not supported.\n\n     pane-border-status [off | top | bottom]\n\t     Turn pane border status lines off or set their position.\n\n     pane-border-style style\n\t     Set the pane border style for panes aside from the active pane.\n\t     For how to specify style, see the STYLES section.\tAttributes are\n\t     ignored.\n\n     popup-style style\n\t     Set the popup style.  See the STYLES section on how to specify\n\t     style.  Attributes are ignored.\n\n     popup-border-style style\n\t     Set the popup border style.  See the STYLES section on how to\n\t     specify style.  Attributes are ignored.\n\n     popup-border-lines type\n\t     Set the type of characters used for drawing popup borders.  type\n\t     may be one of:\n\n\t     single  single lines using ACS or UTF-8 characters (default)\n\n\t     rounded\n\t\t     variation of single with rounded corners using UTF-8\n\t\t     characters\n\n\t     double  double lines using UTF-8 characters\n\n\t     heavy   heavy lines using UTF-8 characters\n\n\t     simple  simple ASCII characters\n\n\t     padded  simple ASCII space character\n\n\t     none    no border\n\n\t     ‘double’ and ‘heavy’ will fall back to standard ACS line drawing\n\t     when UTF-8 is not supported.\n\n     window-status-activity-style style\n\t     Set status line style for windows with an activity alert.\tFor\n\t     how to specify style, see the STYLES section.\n\n     window-status-bell-style style\n\t     Set status line style for windows with a bell alert.  For how to\n\t     specify style, see the STYLES section.\n\n     window-status-current-format string\n\t     Like window-status-format, but is the format used when the window\n\t     is the current window.\n\n     window-status-current-style style\n\t     Set status line style for the currently active window.  For how\n\t     to specify style, see the STYLES section.\n\n     window-status-format string\n\t     Set the format in which the window is displayed in the status\n\t     line window list.\tSee the FORMATS and STYLES sections.\n\n     window-status-last-style style\n\t     Set status line style for the last active window.\tFor how to\n\t     specify style, see the STYLES section.\n\n     window-status-separator string\n\t     Sets the separator drawn between windows in the status line.  The\n\t     default is a single space character.\n\n     window-status-style style\n\t     Set status line style for a single window.  For how to specify\n\t     style, see the STYLES section.\n\n     window-size largest | smallest | manual | latest\n\t     Configure how tmux determines the window size.  If set to\n\t     largest, the size of the largest attached session is used; if\n\t     smallest, the size of the smallest.  If manual, the size of a new\n\t     window is set from the default-size option and windows are\n\t     resized automatically.  With latest, tmux uses the size of the\n\t     client that had the most recent activity.\tSee also the\n\t     resize-window command and the aggressive-resize option.\n\n     wrap-search [on | off]\n\t     If this option is set, searches will wrap around the end of the\n\t     pane contents.  The default is on.\n\n     Available pane options are:\n\n     allow-passthrough [on | off | all]\n\t     Allow programs in the pane to bypass tmux using a terminal escape\n\t     sequence (\\ePtmux;...\\e\\\\).  If set to on, passthrough sequences\n\t     will be allowed only if the pane is visible.  If set to all, they\n\t     will be allowed even if the pane is invisible.\n\n     allow-rename [on | off]\n\t     Allow programs in the pane to change the window name using a\n\t     terminal escape sequence (\\ek...\\e\\\\).\n\n     allow-set-title [on | off]\n\t     Allow programs in the pane to change the title using the terminal\n\t     escape sequences (\\e]2;...\\e\\\\ or \\e]0;...\\e\\\\).\n\n     alternate-screen [on | off]\n\t     This option configures whether programs running inside the pane\n\t     may use the terminal alternate screen feature, which allows the\n\t     smcup and rmcup terminfo(5) capabilities.\tThe alternate screen\n\t     feature preserves the contents of the window when an interactive\n\t     application starts and restores it on exit, so that any output\n\t     visible before the application starts reappears unchanged after\n\t     it exits.\n\n     cursor-colour colour\n\t     Set the colour of the cursor.\n\n     pane-colours[] colour\n\t     The default colour palette.  Each entry in the array defines the\n\t     colour tmux uses when the colour with that index is requested.\n\t     The index may be from zero to 255.\n\n     cursor-style style\n\t     Set the style of the cursor.  Available styles are: default,\n\t     blinking-block, block, blinking-underline, underline,\n\t     blinking-bar, bar.\n\n     remain-on-exit [on | off | failed]\n\t     A pane with this flag set is not destroyed when the program\n\t     running in it exits.  If set to failed, then only when the\n\t     program exit status is not zero.  The pane may be reactivated\n\t     with the respawn-pane command.\n\n     remain-on-exit-format string\n\t     Set the text shown at the bottom of exited panes when\n\t     remain-on-exit is enabled.\n\n     scroll-on-clear [on | off]\n\t     When the entire screen is cleared and this option is on, scroll\n\t     the contents of the screen into history before clearing it.\n\n     synchronize-panes [on | off]\n\t     Duplicate input to all other panes in the same window where this\n\t     option is also on (only for panes that are not in any mode).\n\n     window-active-style style\n\t     Set the pane style when it is the active pane.  For how to\n\t     specify style, see the STYLES section.\n\n     window-style style\n\t     Set the pane style.  For how to specify style, see the STYLES\n\t     section.\n",
        "     tmux allows commands to run on various triggers, called hooks.  Most tmux\n     commands have an after hook and there are a number of hooks not\n     associated with commands.\n\n     Hooks are stored as array options, members of the array are executed in\n     order when the hook is triggered.\tLike options different hooks may be\n     global or belong to a session, window or pane.  Hooks may be configured\n     with the set-hook or set-option commands and displayed with show-hooks or\n     show-options -H.  The following two commands are equivalent:\n\n\t    set-hook -g pane-mode-changed[42] 'set -g status-left-style bg=red'\n\t    set-option -g pane-mode-changed[42] 'set -g status-left-style bg=red'\n\n     Setting a hook without specifying an array index clears the hook and sets\n     the first member of the array.\n\n     A command's after hook is run after it completes, except when the command\n     is run as part of a hook itself.  They are named with an ‘after-’ prefix.\n     For example, the following command adds a hook to select the even-\n     vertical layout after every split-window:\n\n\t   set-hook -g after-split-window \"selectl even-vertical\"\n\n     If a command fails, the ‘command-error’ hook will be fired.  For example,\n     this could be used to write to a log file:\n\n\t   set-hook -g command-error \"run-shell \\\"echo 'a tmux command failed' >>/tmp/log\\\"\"\n\n     All the notifications listed in the CONTROL MODE section are hooks\n     (without any arguments), except %exit.  The following additional hooks\n     are available:\n\n     alert-activity\t     Run when a window has activity.  See\n\t\t\t     monitor-activity.\n\n     alert-bell \t     Run when a window has received a bell.  See\n\t\t\t     monitor-bell.\n\n     alert-silence\t     Run when a window has been silent.  See\n\t\t\t     monitor-silence.\n\n     client-active\t     Run when a client becomes the latest active\n\t\t\t     client of its session.\n\n     client-attached\t     Run when a client is attached.\n\n     client-detached\t     Run when a client is detached\n\n     client-focus-in\t     Run when focus enters a client\n\n     client-focus-out\t     Run when focus exits a client\n\n     client-resized\t     Run when a client is resized.\n\n     client-session-changed  Run when a client's attached session is changed.\n\n     command-error\t     Run when a command fails.\n\n     pane-died\t\t     Run when the program running in a pane exits, but\n\t\t\t     remain-on-exit is on so the pane has not closed.\n\n     pane-exited\t     Run when the program running in a pane exits.\n\n     pane-focus-in\t     Run when the focus enters a pane, if the\n\t\t\t     focus-events option is on.\n\n     pane-focus-out\t     Run when the focus exits a pane, if the\n\t\t\t     focus-events option is on.\n\n     pane-set-clipboard      Run when the terminal clipboard is set using the\n\t\t\t     xterm(1) escape sequence.\n\n     session-created\t     Run when a new session created.\n\n     session-closed\t     Run when a session closed.\n\n     session-renamed\t     Run when a session is renamed.\n\n     window-linked\t     Run when a window is linked into a session.\n\n     window-renamed\t     Run when a window is renamed.\n\n     window-resized\t     Run when a window is resized.  This may be after\n\t\t\t     the client-resized hook is run.\n\n     window-unlinked\t     Run when a window is unlinked from a session.\n\n     Hooks are managed with these commands:\n\n     set-hook [-agpRuw] [-t target-pane] hook-name command\n\t     Without -R, sets (or with -u unsets) hook hook-name to command.\n\t     The flags are the same as for set-option.\n\n\t     With -R, run hook-name immediately.\n\n     show-hooks [-gpw] [-t target-pane]\n\t     Shows hooks.  The flags are the same as for show-options.\n",
        "     If the mouse option is on (the default is off), tmux allows mouse events\n     to be bound as keys.  The name of each key is made up of a mouse event\n     (such as ‘MouseUp1’) and a location suffix, one of the following:\n\n\t   Pane \t    the contents of a pane\n\t   Border\t    a pane border\n\t   Status\t    the status line window list\n\t   StatusLeft\t    the left part of the status line\n\t   StatusRight\t    the right part of the status line\n\t   StatusDefault    any other part of the status line\n\n     The following mouse events are available:\n\n\t   WheelUp\t WheelDown\n\t   MouseDown1\t MouseUp1      MouseDrag1   MouseDragEnd1\n\t   MouseDown2\t MouseUp2      MouseDrag2   MouseDragEnd2\n\t   MouseDown3\t MouseUp3      MouseDrag3   MouseDragEnd3\n\t   SecondClick1  SecondClick2  SecondClick3\n\t   DoubleClick1  DoubleClick2  DoubleClick3\n\t   TripleClick1  TripleClick2  TripleClick3\n\n     The ‘SecondClick’ events are fired for the second click of a double\n     click, even if there may be a third click which will fire ‘TripleClick’\n     instead of ‘DoubleClick’.\n\n     Each should be suffixed with a location, for example ‘MouseDown1Status’.\n\n     The special token ‘{mouse}’ or ‘=’ may be used as target-window or\n     target-pane in commands bound to mouse key bindings.  It resolves to the\n     window or pane over which the mouse event took place (for example, the\n     window in the status line over which button 1 was released for a\n     ‘MouseUp1Status’ binding, or the pane over which the wheel was scrolled\n     for a ‘WheelDownPane’ binding).\n\n     The send-keys -M flag may be used to forward a mouse event to a pane.\n\n     The default key bindings allow the mouse to be used to select and resize\n     panes, to copy text and to change window using the status line.  These\n     take effect if the mouse option is turned on.\n",
        "     Certain commands accept the -F flag with a format argument.  This is a\n     string which controls the output format of the command.  Format variables\n     are enclosed in ‘#{’ and ‘}’, for example ‘#{session_name}’.  The\n     possible variables are listed in the table below, or the name of a tmux\n     option may be used for an option's value.\tSome variables have a shorter\n     alias such as ‘#S’; ‘##’ is replaced by a single ‘#’, ‘#,’ by a ‘,’ and\n     ‘#}’ by a ‘}’.\n\n     Conditionals are available by prefixing with ‘?’ and separating two\n     alternatives with a comma; if the specified variable exists and is not\n     zero, the first alternative is chosen, otherwise the second is used.  For\n     example ‘#{?session_attached,attached,not attached}’ will include the\n     string ‘attached’ if the session is attached and the string ‘not\n     attached’ if it is unattached, or ‘#{?automatic-rename,yes,no}’ will\n     include ‘yes’ if automatic-rename is enabled, or ‘no’ if not.\n     Conditionals can be nested arbitrarily.  Inside a conditional, ‘,’ and\n     ‘}’ must be escaped as ‘#,’ and ‘#}’, unless they are part of a ‘#{...}’\n     replacement.  For example:\n\n\t   #{?pane_in_mode,#[fg=white#,bg=red],#[fg=red#,bg=white]}#W .\n\n     String comparisons may be expressed by prefixing two comma-separated\n     alternatives by ‘==’, ‘!=’, ‘<’, ‘>’, ‘<=’ or ‘>=’ and a colon.  For\n     example ‘#{==:#{host},myhost}’ will be replaced by ‘1’ if running on\n     ‘myhost’, otherwise by ‘0’.  ‘||’ and ‘&&’ evaluate to true if either or\n     both of two comma-separated alternatives are true, for example\n     ‘#{||:#{pane_in_mode},#{alternate_on}}’.\n\n     An ‘m’ specifies an fnmatch(3) or regular expression comparison.  The\n     first argument is the pattern and the second the string to compare.  An\n     optional argument specifies flags: ‘r’ means the pattern is a regular\n     expression instead of the default fnmatch(3) pattern, and ‘i’ means to\n     ignore case.  For example: ‘#{m:*foo*,#{host}}’ or ‘#{m/ri:^A,MYVAR}’.  A\n     ‘C’ performs a search for an fnmatch(3) pattern or regular expression in\n     the pane content and evaluates to zero if not found, or a line number if\n     found.  Like ‘m’, an ‘r’ flag means search for a regular expression and\n     ‘i’ ignores case.\tFor example: ‘#{C/r:^Start}’\n\n     Numeric operators may be performed by prefixing two comma-separated\n     alternatives with an ‘e’ and an operator.\tAn optional ‘f’ flag may be\n     given after the operator to use floating point numbers, otherwise\n     integers are used.  This may be followed by a number giving the number of\n     decimal places to use for the result.  The available operators are:\n     addition ‘+’, subtraction ‘-’, multiplication ‘*’, division ‘/’, modulus\n     ‘m’ or ‘%’ (note that ‘%’ must be escaped as ‘%%’ in formats which are\n     also expanded by strftime(3)) and numeric comparison operators ‘==’,\n     ‘!=’, ‘<’, ‘<=’, ‘>’ and ‘>=’.  For example, ‘#{e|*|f|4:5.5,3}’\n     multiplies 5.5 by 3 for a result with four decimal places and\n     ‘#{e|%%:7,3}’ returns the modulus of 7 and 3.  ‘a’ replaces a numeric\n     argument by its ASCII equivalent, so ‘#{a:98}’ results in ‘b’.  ‘c’\n     replaces a tmux colour by its six-digit hexadecimal RGB value.\n\n     A limit may be placed on the length of the resultant string by prefixing\n     it by an ‘=’, a number and a colon.  Positive numbers count from the\n     start of the string and negative from the end, so ‘#{=5:pane_title}’ will\n     include at most the first five characters of the pane title, or\n     ‘#{=-5:pane_title}’ the last five characters.  A suffix or prefix may be\n     given as a second argument - if provided then it is appended or prepended\n     to the string if the length has been trimmed, for example\n     ‘#{=/5/...:pane_title}’ will append ‘...’ if the pane title is more than\n     five characters.  Similarly, ‘p’ pads the string to a given width, for\n     example ‘#{p10:pane_title}’ will result in a width of at least 10\n     characters.  A positive width pads on the left, a negative on the right.\n     ‘n’ expands to the length of the variable and ‘w’ to its width when\n     displayed, for example ‘#{n:window_name}’.\n\n     Prefixing a time variable with ‘t:’ will convert it to a string, so if\n     ‘#{window_activity}’ gives ‘1445765102’, ‘#{t:window_activity}’ gives\n     ‘Sun Oct 25 09:25:02 2015’.  Adding ‘p (’ ‘`t/p`’) will use shorter but\n     less accurate time format for times in the past.  A custom format may be\n     given using an ‘f’ suffix (note that ‘%’ must be escaped as ‘%%’ if the\n     format is separately being passed through strftime(3), for example in the\n     status-left option): ‘#{t/f/%%H#:%%M:window_activity}’, see strftime(3).\n\n     The ‘b:’ and ‘d:’ prefixes are basename(3) and dirname(3) of the variable\n     respectively.  ‘q:’ will escape sh(1) special characters or with a ‘h’\n     suffix, escape hash characters (so ‘#’ becomes ‘##’).  ‘E:’ will expand\n     the format twice, for example ‘#{E:status-left}’ is the result of\n     expanding the content of the status-left option rather than the option\n     itself.  ‘T:’ is like ‘E:’ but also expands strftime(3) specifiers.\n     ‘S:’, ‘W:’, ‘P:’ or ‘L:’ will loop over each session, window, pane or\n     client and insert the format once for each.  For windows and panes, two\n     comma-separated formats may be given: the second is used for the current\n     window or active pane.  For example, to get a list of windows formatted\n     like the status line:\n\n\t   #{W:#{E:window-status-format} ,#{E:window-status-current-format} }\n\n     ‘N:’ checks if a window (without any suffix or with the ‘w’ suffix) or a\n     session (with the ‘s’ suffix) name exists, for example ‘`N/w:foo`’ is\n     replaced with 1 if a window named ‘foo’ exists.\n\n     A prefix of the form ‘s/foo/bar/:’ will substitute ‘foo’ with ‘bar’\n     throughout.  The first argument may be an extended regular expression and\n     a final argument may be ‘i’ to ignore case, for example ‘s/a(.)/\\1x/i:’\n     would change ‘abABab’ into ‘bxBxbx’.  A different delimiter character may\n     also be used, to avoid collisions with literal slashes in the pattern.\n     For example, ‘s|foo/|bar/|:’ will substitute ‘foo/’ with ‘bar/’\n     throughout.\n\n     In addition, the last line of a shell command's output may be inserted\n     using ‘#()’.  For example, ‘#(uptime)’ will insert the system's uptime.\n     When constructing formats, tmux does not wait for ‘#()’ commands to\n     finish; instead, the previous result from running the same command is\n     used, or a placeholder if the command has not been run before.  If the\n     command hasn't exited, the most recent line of output will be used, but\n     the status line will not be updated more than once a second.  Commands\n     are executed using /bin/sh and with the tmux global environment set (see\n     the GLOBAL AND SESSION ENVIRONMENT section).\n\n     An ‘l’ specifies that a string should be interpreted literally and not\n     expanded.\tFor example ‘#{l:#{?pane_in_mode,yes,no}}’ will be replaced by\n     ‘#{?pane_in_mode,yes,no}’.\n\n     The following variables are available, where appropriate:\n\n     Variable name\t    Alias    Replaced with\n     active_window_index\t     Index of active window in session\n     alternate_on\t\t     1 if pane is in alternate screen\n     alternate_saved_x\t\t     Saved cursor X in alternate screen\n     alternate_saved_y\t\t     Saved cursor Y in alternate screen\n     buffer_created\t\t     Time buffer created\n     buffer_name\t\t     Name of buffer\n     buffer_sample\t\t     Sample of start of buffer\n     buffer_size\t\t     Size of the specified buffer in bytes\n     client_activity\t\t     Time client last had activity\n     client_cell_height \t     Height of each client cell in pixels\n     client_cell_width\t\t     Width of each client cell in pixels\n     client_control_mode\t     1 if client is in control mode\n     client_created\t\t     Time client created\n     client_discarded\t\t     Bytes discarded when client behind\n     client_flags\t\t     List of client flags\n     client_height\t\t     Height of client\n     client_key_table\t\t     Current key table\n     client_last_session\t     Name of the client's last session\n     client_name\t\t     Name of client\n     client_pid \t\t     PID of client process\n     client_prefix\t\t     1 if prefix key has been pressed\n     client_readonly\t\t     1 if client is read-only\n     client_session\t\t     Name of the client's session\n     client_termfeatures\t     Terminal features of client, if any\n     client_termname\t\t     Terminal name of client\n     client_termtype\t\t     Terminal type of client, if available\n     client_tty \t\t     Pseudo terminal of client\n     client_uid \t\t     UID of client process\n     client_user\t\t     User of client process\n     client_utf8\t\t     1 if client supports UTF-8\n     client_width\t\t     Width of client\n     client_written\t\t     Bytes written to client\n     command\t\t\t     Name of command in use, if any\n     command_list_alias \t     Command alias if listing commands\n     command_list_name\t\t     Command name if listing commands\n     command_list_usage \t     Command usage if listing commands\n     config_files\t\t     List of configuration files loaded\n     copy_cursor_hyperlink\t     Hyperlink under cursor in copy mode\n     copy_cursor_line\t\t     Line the cursor is on in copy mode\n     copy_cursor_word\t\t     Word under cursor in copy mode\n     copy_cursor_x\t\t     Cursor X position in copy mode\n     copy_cursor_y\t\t     Cursor Y position in copy mode\n     current_file\t\t     Current configuration file\n     cursor_character\t\t     Character at cursor in pane\n     cursor_flag\t\t     Pane cursor flag\n     cursor_x\t\t\t     Cursor X position in pane\n     cursor_y\t\t\t     Cursor Y position in pane\n     history_bytes\t\t     Number of bytes in window history\n     history_limit\t\t     Maximum window history lines\n     history_size\t\t     Size of history in lines\n     hook\t\t\t     Name of running hook, if any\n     hook_client\t\t     Name of client where hook was run, if any\n     hook_pane\t\t\t     ID of pane where hook was run, if any\n     hook_session\t\t     ID of session where hook was run, if any\n     hook_session_name\t\t     Name of session where hook was run, if\n\t\t\t\t     any\n     hook_window\t\t     ID of window where hook was run, if any\n     hook_window_name\t\t     Name of window where hook was run, if any\n     host\t\t    #H\t     Hostname of local host\n     host_short \t    #h\t     Hostname of local host (no domain name)\n     insert_flag\t\t     Pane insert flag\n     keypad_cursor_flag \t     Pane keypad cursor flag\n     keypad_flag\t\t     Pane keypad flag\n     last_window_index\t\t     Index of last window in session\n     line\t\t\t     Line number in the list\n     mouse_all_flag\t\t     Pane mouse all flag\n     mouse_any_flag\t\t     Pane mouse any flag\n     mouse_button_flag\t\t     Pane mouse button flag\n     mouse_hyperlink\t\t     Hyperlink under mouse, if any\n     mouse_line \t\t     Line under mouse, if any\n     mouse_sgr_flag\t\t     Pane mouse SGR flag\n     mouse_standard_flag\t     Pane mouse standard flag\n     mouse_status_line\t\t     Status line on which mouse event took\n\t\t\t\t     place\n     mouse_status_range \t     Range type or argument of mouse event on\n\t\t\t\t     status line\n     mouse_utf8_flag\t\t     Pane mouse UTF-8 flag\n     mouse_word \t\t     Word under mouse, if any\n     mouse_x\t\t\t     Mouse X position, if any\n     mouse_y\t\t\t     Mouse Y position, if any\n     next_session_id\t\t     Unique session ID for next new session\n     origin_flag\t\t     Pane origin flag\n     pane_active\t\t     1 if active pane\n     pane_at_bottom\t\t     1 if pane is at the bottom of window\n     pane_at_left\t\t     1 if pane is at the left of window\n     pane_at_right\t\t     1 if pane is at the right of window\n     pane_at_top\t\t     1 if pane is at the top of window\n     pane_bg\t\t\t     Pane background colour\n     pane_bottom\t\t     Bottom of pane\n     pane_current_command\t     Current command if available\n     pane_current_path\t\t     Current path if available\n     pane_dead\t\t\t     1 if pane is dead\n     pane_dead_signal\t\t     Exit signal of process in dead pane\n     pane_dead_status\t\t     Exit status of process in dead pane\n     pane_dead_time\t\t     Exit time of process in dead pane\n     pane_fg\t\t\t     Pane foreground colour\n     pane_format\t\t     1 if format is for a pane\n     pane_height\t\t     Height of pane\n     pane_id\t\t    #D\t     Unique pane ID\n     pane_in_mode\t\t     1 if pane is in a mode\n     pane_index \t    #P\t     Index of pane\n     pane_input_off\t\t     1 if input to pane is disabled\n     pane_key_mode\t\t     Extended key reporting mode in this pane\n     pane_last\t\t\t     1 if last pane\n     pane_left\t\t\t     Left of pane\n     pane_marked\t\t     1 if this is the marked pane\n     pane_marked_set\t\t     1 if a marked pane is set\n     pane_mode\t\t\t     Name of pane mode, if any\n     pane_path\t\t\t     Path of pane (can be set by application)\n     pane_pid\t\t\t     PID of first process in pane\n     pane_pipe\t\t\t     1 if pane is being piped\n     pane_right \t\t     Right of pane\n     pane_search_string \t     Last search string in copy mode\n     pane_start_command \t     Command pane started with\n     pane_start_path\t\t     Path pane started with\n     pane_synchronized\t\t     1 if pane is synchronized\n     pane_tabs\t\t\t     Pane tab positions\n     pane_title \t    #T\t     Title of pane (can be set by application)\n     pane_top\t\t\t     Top of pane\n     pane_tty\t\t\t     Pseudo terminal of pane\n     pane_unseen_changes\t     1 if there were changes in pane while in\n\t\t\t\t     mode\n     pane_width \t\t     Width of pane\n     pid\t\t\t     Server PID\n     rectangle_toggle\t\t     1 if rectangle selection is activated\n     scroll_position\t\t     Scroll position in copy mode\n     scroll_region_lower\t     Bottom of scroll region in pane\n     scroll_region_upper\t     Top of scroll region in pane\n     search_count\t\t     Count of search results\n     search_count_partial\t     1 if search count is partial count\n     search_match\t\t     Search match if any\n     search_present\t\t     1 if search started in copy mode\n     selection_active\t\t     1 if selection started and changes with\n\t\t\t\t     the cursor in copy mode\n     selection_end_x\t\t     X position of the end of the selection\n     selection_end_y\t\t     Y position of the end of the selection\n     selection_present\t\t     1 if selection started in copy mode\n     selection_start_x\t\t     X position of the start of the selection\n     selection_start_y\t\t     Y position of the start of the selection\n     server_sessions\t\t     Number of sessions\n     session_activity\t\t     Time of session last activity\n     session_alerts\t\t     List of window indexes with alerts\n     session_attached\t\t     Number of clients session is attached to\n     session_attached_list\t     List of clients session is attached to\n     session_created\t\t     Time session created\n     session_format\t\t     1 if format is for a session\n     session_group\t\t     Name of session group\n     session_group_attached\t     Number of clients sessions in group are\n\t\t\t\t     attached to\n     session_group_attached_list\n\t\t\t\t     List of clients sessions in group are\n\t\t\t\t     attached to\n     session_group_list \t     List of sessions in group\n     session_group_many_attached\n\t\t\t\t     1 if multiple clients attached to\n\t\t\t\t     sessions in group\n     session_group_size \t     Size of session group\n     session_grouped\t\t     1 if session in a group\n     session_id \t\t     Unique session ID\n     session_last_attached\t     Time session last attached\n     session_many_attached\t     1 if multiple clients attached\n     session_marked\t\t     1 if this session contains the marked\n\t\t\t\t     pane\n     session_name\t    #S\t     Name of session\n     session_path\t\t     Working directory of session\n     session_stack\t\t     Window indexes in most recent order\n     session_windows\t\t     Number of windows in session\n     socket_path\t\t     Server socket path\n     start_time \t\t     Server start time\n     uid\t\t\t     Server UID\n     user\t\t\t     Server user\n     version\t\t\t     Server version\n     window_active\t\t     1 if window active\n     window_active_clients\t     Number of clients viewing this window\n     window_active_clients_list\n\t\t\t\t     List of clients viewing this window\n     window_active_sessions\t     Number of sessions on which this window\n\t\t\t\t     is active\n     window_active_sessions_list\n\t\t\t\t     List of sessions on which this window is\n\t\t\t\t     active\n     window_activity\t\t     Time of window last activity\n     window_activity_flag\t     1 if window has activity\n     window_bell_flag\t\t     1 if window has bell\n     window_bigger\t\t     1 if window is larger than client\n     window_cell_height \t     Height of each cell in pixels\n     window_cell_width\t\t     Width of each cell in pixels\n     window_end_flag\t\t     1 if window has the highest index\n     window_flags\t    #F\t     Window flags with # escaped as ##\n     window_format\t\t     1 if format is for a window\n     window_height\t\t     Height of window\n     window_id\t\t\t     Unique window ID\n     window_index\t    #I\t     Index of window\n     window_last_flag\t\t     1 if window is the last used\n     window_layout\t\t     Window layout description, ignoring\n\t\t\t\t     zoomed window panes\n     window_linked\t\t     1 if window is linked across sessions\n     window_linked_sessions\t     Number of sessions this window is linked\n\t\t\t\t     to\n     window_linked_sessions_list\n\t\t\t\t     List of sessions this window is linked to\n     window_marked_flag \t     1 if window contains the marked pane\n     window_name\t    #W\t     Name of window\n     window_offset_x\t\t     X offset into window if larger than\n\t\t\t\t     client\n     window_offset_y\t\t     Y offset into window if larger than\n\t\t\t\t     client\n     window_panes\t\t     Number of panes in window\n     window_raw_flags\t\t     Window flags with nothing escaped\n     window_silence_flag\t     1 if window has silence alert\n     window_stack_index \t     Index in session most recent stack\n     window_start_flag\t\t     1 if window has the lowest index\n     window_visible_layout\t     Window layout description, respecting\n\t\t\t\t     zoomed window panes\n     window_width\t\t     Width of window\n     window_zoomed_flag \t     1 if window is zoomed\n     wrap_flag\t\t\t     Pane wrap flag\n",
        "     tmux offers various options to specify the colour and attributes of\n     aspects of the interface, for example status-style for the status line.\n     In addition, embedded styles may be specified in format options, such as\n     status-left, by enclosing them in ‘#[’ and ‘]’.\n\n     A style may be the single term ‘default’ to specify the default style\n     (which may come from an option, for example status-style in the status\n     line) or a space or comma separated list of the following:\n\n     fg=colour\n\t     Set the foreground colour.  The colour is one of: black, red,\n\t     green, yellow, blue, magenta, cyan, white; if supported the\n\t     bright variants brightred, brightgreen, brightyellow; colour0 to\n\t     colour255 from the 256-colour set; default for the default\n\t     colour; terminal for the terminal default colour; or a\n\t     hexadecimal RGB string such as ‘#ffffff’.\n\n     bg=colour\n\t     Set the background colour.\n\n     us=colour\n\t     Set the underscore colour.\n\n     none    Set no attributes (turn off any active attributes).\n\n     acs, bright (or bold), dim, underscore, blink, reverse, hidden, italics,\n\t     overline, strikethrough, double-underscore, curly-underscore,\n\t     dotted-underscore, dashed-underscore\n\t     Set an attribute.\tAny of the attributes may be prefixed with\n\t     ‘no’ to unset.  acs is the terminal alternate character set.\n\n     align=left (or noalign), align=centre, align=right\n\t     Align text to the left, centre or right of the available space if\n\t     appropriate.\n\n     fill=colour\n\t     Fill the available space with a background colour if appropriate.\n\n     list=on, list=focus, list=left-marker, list=right-marker, nolist\n\t     Mark the position of the various window list components in the\n\t     status-format option: list=on marks the start of the list;\n\t     list=focus is the part of the list that should be kept in focus\n\t     if the entire list won't fit in the available space (typically\n\t     the current window); list=left-marker and list=right-marker mark\n\t     the text to be used to mark that text has been trimmed from the\n\t     left or right of the list if there is not enough space.\n\n     push-default, pop-default\n\t     Store the current colours and attributes as the default or reset\n\t     to the previous default.  A push-default affects any subsequent\n\t     use of the default term until a pop-default.  Only one default\n\t     may be pushed (each push-default replaces the previous saved\n\t     default).\n\n     range=left, range=right, range=session|X, range=window|X, range=pane|X,\n\t     range=user|X, norange\n\t     Mark a range for mouse events in the status-format option.  When\n\t     a mouse event occurs in the range=left or range=right range, the\n\t     ‘StatusLeft’ and ‘StatusRight’ key bindings are triggered.\n\n\t     range=session|X, range=window|X and range=pane|X are ranges for a\n\t     session, window or pane.  These trigger the ‘Status’ mouse key\n\t     with the target session, window or pane given by the ‘X’\n\t     argument.\t‘X’ is a session ID, window index in the current\n\t     session or a pane ID.  For these, the mouse_status_range format\n\t     variable will be set to ‘session’, ‘window’ or ‘pane’.\n\n\t     range=user|X is a user-defined range; it triggers the ‘Status’\n\t     mouse key.  The argument ‘X’ will be available in the\n\t     mouse_status_range format variable.  ‘X’ must be at most 15 bytes\n\t     in length.\n\n     Examples are:\n\n\t   fg=yellow bold underscore blink\n\t   bg=black,fg=default,noreverse\n",
        "     tmux distinguishes between names and titles.  Windows and sessions have\n     names, which may be used to specify them in targets and are displayed in\n     the status line and various lists: the name is the tmux identifier for a\n     window or session.  Only panes have titles.  A pane's title is typically\n     set by the program running inside the pane using an escape sequence (like\n     it would set the xterm(1) window title in X(7)).  Windows themselves do\n     not have titles - a window's title is the title of its active pane.  tmux\n     itself may set the title of the terminal in which the client is running,\n     see the set-titles option.\n\n     A session's name is set with the new-session and rename-session commands.\n     A window's name is set with one of:\n\n     1.      A command argument (such as -n for new-window or new-session).\n\n     2.      An escape sequence (if the allow-rename option is turned on):\n\n\t\t   $ printf '\\033kWINDOW_NAME\\033\\\\'\n\n     3.      Automatic renaming, which sets the name to the active command in\n\t     the window's active pane.\tSee the automatic-rename option.\n\n     When a pane is first created, its title is the hostname.  A pane's title\n     can be set via the title setting escape sequence, for example:\n\n\t   $ printf '\\033]2;My Title\\033\\\\'\n\n     It can also be modified with the select-pane -T command.\n",
        "     When the server is started, tmux copies the environment into the global\n     environment; in addition, each session has a session environment.\tWhen a\n     window is created, the session and global environments are merged.  If a\n     variable exists in both, the value from the session environment is used.\n     The result is the initial environment passed to the new process.\n\n     The update-environment session option may be used to update the session\n     environment from the client when a new session is created or an old\n     reattached.  tmux also initialises the TMUX variable with some internal\n     information to allow commands to be executed from inside, and the TERM\n     variable with the correct terminal setting of ‘screen’.\n\n     Variables in both session and global environments may be marked as\n     hidden.  Hidden variables are not passed into the environment of new\n     processes and instead can only be used by tmux itself (for example in\n     formats, see the FORMATS section).\n\n     Commands to alter and view the environment are:\n\n     set-environment [-Fhgru] [-t target-session] name [value]\n\t\t   (alias: setenv)\n\t     Set or unset an environment variable.  If -g is used, the change\n\t     is made in the global environment; otherwise, it is applied to\n\t     the session environment for target-session.  If -F is present,\n\t     then value is expanded as a format.  The -u flag unsets a\n\t     variable.\t-r indicates the variable is to be removed from the\n\t     environment before starting a new process.  -h marks the variable\n\t     as hidden.\n\n     show-environment [-hgs] [-t target-session] [variable]\n\t\t   (alias: showenv)\n\t     Display the environment for target-session or the global\n\t     environment with -g.  If variable is omitted, all variables are\n\t     shown.  Variables removed from the environment are prefixed with\n\t     ‘-’.  If -s is used, the output is formatted as a set of Bourne\n\t     shell commands.  -h shows hidden variables (omitted by default).\n",
        "     tmux includes an optional status line which is displayed in the bottom\n     line of each terminal.\n\n     By default, the status line is enabled and one line in height (it may be\n     disabled or made multiple lines with the status session option) and\n     contains, from left-to-right: the name of the current session in square\n     brackets; the window list; the title of the active pane in double quotes;\n     and the time and date.\n\n     Each line of the status line is configured with the status-format option.\n     The default is made of three parts: configurable left and right sections\n     (which may contain dynamic content such as the time or output from a\n     shell command, see the status-left, status-left-length, status-right, and\n     status-right-length options below), and a central window list.  By\n     default, the window list shows the index, name and (if any) flag of the\n     windows present in the current session in ascending numerical order.  It\n     may be customised with the window-status-format and\n     window-status-current-format options.  The flag is one of the following\n     symbols appended to the window name:\n\n\t   Symbol    Meaning\n\t   *\t     Denotes the current window.\n\t   -\t     Marks the last window (previously selected).\n\t   #\t     Window activity is monitored and activity has been\n\t\t     detected.\n\t   !\t     Window bells are monitored and a bell has occurred in the\n\t\t     window.\n\t   ~\t     The window has been silent for the monitor-silence\n\t\t     interval.\n\t   M\t     The window contains the marked pane.\n\t   Z\t     The window's active pane is zoomed.\n\n     The # symbol relates to the monitor-activity window option.  The window\n     name is printed in inverted colours if an alert (bell, activity or\n     silence) is present.\n\n     The colour and attributes of the status line may be configured, the\n     entire status line using the status-style session option and individual\n     windows using the window-status-style window option.\n\n     The status line is automatically refreshed at interval if it has changed,\n     the interval may be controlled with the status-interval session option.\n\n     Commands related to the status line are as follows:\n\n     clear-prompt-history [-T prompt-type]\n\t\t   (alias: clearphist)\n\t     Clear status prompt history for prompt type prompt-type.  If -T\n\t     is omitted, then clear history for all types.  See command-prompt\n\t     for possible values for prompt-type.\n\n     command-prompt [-1bFikN] [-I inputs] [-p prompts] [-t target-client] [-T\n\t     prompt-type] [template]\n\t     Open the command prompt in a client.  This may be used from\n\t     inside tmux to execute commands interactively.\n\n\t     If template is specified, it is used as the command.  With -F,\n\t     template is expanded as a format.\n\n\t     If present, -I is a comma-separated list of the initial text for\n\t     each prompt.  If -p is given, prompts is a comma-separated list\n\t     of prompts which are displayed in order; otherwise a single\n\t     prompt is displayed, constructed from template if it is present,\n\t     or ‘:’ if not.\n\n\t     Before the command is executed, the first occurrence of the\n\t     string ‘%%’ and all occurrences of ‘%1’ are replaced by the\n\t     response to the first prompt, all ‘%2’ are replaced with the\n\t     response to the second prompt, and so on for further prompts.  Up\n\t     to nine prompt responses may be replaced (‘%1’ to ‘%9’).  ‘%%%’\n\t     is like ‘%%’ but any quotation marks are escaped.\n\n\t     -1 makes the prompt only accept one key press, in this case the\n\t     resulting input is a single character.  -k is like -1 but the key\n\t     press is translated to a key name.  -N makes the prompt only\n\t     accept numeric key presses.  -i executes the command every time\n\t     the prompt input changes instead of when the user exits the\n\t     command prompt.\n\n\t     -T tells tmux the prompt type.  This affects what completions are\n\t     offered when Tab is pressed.  Available types are: ‘command’,\n\t     ‘search’, ‘target’ and ‘window-target’.\n\n\t     The following keys have a special meaning in the command prompt,\n\t     depending on the value of the status-keys option:\n\n\t\t   Function\t\t\t\tvi\t  emacs\n\t\t   Cancel command prompt\t\tq\t  Escape\n\t\t   Delete from cursor to start of word\t\t  C-w\n\t\t   Delete entire command\t\td\t  C-u\n\t\t   Delete from cursor to end\t\tD\t  C-k\n\t\t   Execute command\t\t\tEnter\t  Enter\n\t\t   Get next command from history\t\t  Down\n\t\t   Get previous command from history\t\t  Up\n\t\t   Insert top paste buffer\t\tp\t  C-y\n\t\t   Look for completions \t\tTab\t  Tab\n\t\t   Move cursor left\t\t\th\t  Left\n\t\t   Move cursor right\t\t\tl\t  Right\n\t\t   Move cursor to end\t\t\t$\t  C-e\n\t\t   Move cursor to next word\t\tw\t  M-f\n\t\t   Move cursor to previous word \tb\t  M-b\n\t\t   Move cursor to start \t\t0\t  C-a\n\t\t   Transpose characters \t\t\t  C-t\n\n\t     With -b, the prompt is shown in the background and the invoking\n\t     client does not exit until it is dismissed.\n\n     confirm-before [-by] [-c confirm-key] [-p prompt] [-t target-client]\n\t     command\n\t\t   (alias: confirm)\n\t     Ask for confirmation before executing command.  If -p is given,\n\t     prompt is the prompt to display; otherwise a prompt is\n\t     constructed from command.\tIt may contain the special character\n\t     sequences supported by the status-left option.  With -b, the\n\t     prompt is shown in the background and the invoking client does\n\t     not exit until it is dismissed.  -y changes the default behaviour\n\t     (if Enter alone is pressed) of the prompt to run the command.  -c\n\t     changes the confirmation key to confirm-key; the default is ‘y’.\n\n     display-menu [-OM] [-b border-lines] [-c target-client] [-C\n\t     starting-choice] [-H selected-style] [-s style] [-S border-style]\n\t     [-t target-pane] [-T title] [-x position] [-y position] name key\n\t     command [argument ...]\n\t\t   (alias: menu)\n\t     Display a menu on target-client.  target-pane gives the target\n\t     for any commands run from the menu.\n\n\t     A menu is passed as a series of arguments: first the menu item\n\t     name, second the key shortcut (or empty for none) and third the\n\t     command to run when the menu item is chosen.  The name and\n\t     command are formats, see the FORMATS and STYLES sections.\tIf the\n\t     name begins with a hyphen (-), then the item is disabled (shown\n\t     dim) and may not be chosen.  The name may be empty for a\n\t     separator line, in which case both the key and command should be\n\t     omitted.\n\n\t     -b sets the type of characters used for drawing menu borders.\n\t     See popup-border-lines for possible values for border-lines.\n\n\t     -H sets the style for the selected menu item (see STYLES).\n\n\t     -s sets the style for the menu and -S sets the style for the menu\n\t     border (see STYLES).\n\n\t     -T is a format for the menu title (see FORMATS).\n\n\t     -C sets the menu item selected by default, if the menu is not\n\t     bound to a mouse key binding.\n\n\t     -x and -y give the position of the menu.  Both may be a row or\n\t     column number, or one of the following special values:\n\n\t\t   Value    Flag    Meaning\n\t\t   C\t    Both    The centre of the terminal\n\t\t   R\t    -x\t    The right side of the terminal\n\t\t   P\t    Both    The bottom left of the pane\n\t\t   M\t    Both    The mouse position\n\t\t   W\t    Both    The window position on the status line\n\t\t   S\t    -y\t    The line above or below the status line\n\n\t     Or a format, which is expanded including the following additional\n\t     variables:\n\n\t\t   Variable name\t\t Replaced with\n\t\t   popup_centre_x\t\t Centered in the client\n\t\t   popup_centre_y\t\t Centered in the client\n\t\t   popup_height \t\t Height of menu or popup\n\t\t   popup_mouse_bottom\t\t Bottom of at the mouse\n\t\t   popup_mouse_centre_x \t Horizontal centre at the\n\t\t\t\t\t\t mouse\n\t\t   popup_mouse_centre_y \t Vertical centre at the mouse\n\t\t   popup_mouse_top\t\t Top at the mouse\n\t\t   popup_mouse_x\t\t Mouse X position\n\t\t   popup_mouse_y\t\t Mouse Y position\n\t\t   popup_pane_bottom\t\t Bottom of the pane\n\t\t   popup_pane_left\t\t Left of the pane\n\t\t   popup_pane_right\t\t Right of the pane\n\t\t   popup_pane_top\t\t Top of the pane\n\t\t   popup_status_line_y\t\t Above or below the status\n\t\t\t\t\t\t line\n\t\t   popup_width\t\t\t Width of menu or popup\n\t\t   popup_window_status_line_x\t At the window position in\n\t\t\t\t\t\t status line\n\t\t   popup_window_status_line_y\t At the status line showing\n\t\t\t\t\t\t the window\n\n\t     Each menu consists of items followed by a key shortcut shown in\n\t     brackets.\tIf the menu is too large to fit on the terminal, it is\n\t     not displayed.  Pressing the key shortcut chooses the\n\t     corresponding item.  If the mouse is enabled and the menu is\n\t     opened from a mouse key binding, releasing the mouse button with\n\t     an item selected chooses that item and releasing the mouse button\n\t     without an item selected closes the menu.\t-O changes this\n\t     behaviour so that the menu does not close when the mouse button\n\t     is released without an item selected the menu is not closed and a\n\t     mouse button must be clicked to choose an item.\n\n\t     -M tells tmux the menu should handle mouse events; by default\n\t     only menus opened from mouse key bindings do so.\n\n\t     The following keys are available in menus:\n\n\t\t   Key\t  Function\n\t\t   Enter  Choose selected item\n\t\t   Up\t  Select previous item\n\t\t   Down   Select next item\n\t\t   q\t  Exit menu\n\n     display-message [-aIlNpv] [-c target-client] [-d delay] [-t target-pane]\n\t     [message]\n\t\t   (alias: display)\n\t     Display a message.  If -p is given, the output is printed to\n\t     stdout, otherwise it is displayed in the target-client status\n\t     line for up to delay milliseconds.  If delay is not given, the\n\t     display-time option is used; a delay of zero waits for a key\n\t     press.  ‘N’ ignores key presses and closes only after the delay\n\t     expires.  If -l is given, message is printed unchanged.\n\t     Otherwise, the format of message is described in the FORMATS\n\t     section; information is taken from target-pane if -t is given,\n\t     otherwise the active pane.\n\n\t     -v prints verbose logging as the format is parsed and -a lists\n\t     the format variables and their values.\n\n\t     -I forwards any input read from stdin to the empty pane given by\n\t     target-pane.\n\n     display-popup [-BCE] [-b border-lines] [-c target-client] [-d\n\t     start-directory] [-e environment] [-h height] [-s border-style]\n\t     [-S style] [-t target-pane] [-T title] [-w width] [-x position]\n\t     [-y position] [shell-command]\n\t\t   (alias: popup)\n\t     Display a popup running shell-command on target-client.  A popup\n\t     is a rectangular box drawn over the top of any panes.  Panes are\n\t     not updated while a popup is present.\n\n\t     -E closes the popup automatically when shell-command exits.  Two\n\t     -E closes the popup only if shell-command exited with success.\n\n\t     -x and -y give the position of the popup, they have the same\n\t     meaning as for the display-menu command.  -w and -h give the\n\t     width and height - both may be a percentage (followed by ‘%’).\n\t     If omitted, half of the terminal size is used.\n\n\t     -B does not surround the popup by a border.\n\n\t     -b sets the type of characters used for drawing popup borders.\n\t     When -B is specified, the -b option is ignored.  See\n\t     popup-border-lines for possible values for border-lines.\n\n\t     -s sets the style for the popup and -S sets the style for the\n\t     popup border (see STYLES).\n\n\t     -e takes the form ‘VARIABLE=value’ and sets an environment\n\t     variable for the popup; it may be specified multiple times.\n\n\t     -T is a format for the popup title (see FORMATS).\n\n\t     The -C flag closes any popup on the client.\n\n     show-prompt-history [-T prompt-type]\n\t\t   (alias: showphist)\n\t     Display status prompt history for prompt type prompt-type.  If -T\n\t     is omitted, then show history for all types.  See command-prompt\n\t     for possible values for prompt-type.\n",
        "     tmux maintains a set of named paste buffers.  Each buffer may be either\n     explicitly or automatically named.  Explicitly named buffers are named\n     when created with the set-buffer or load-buffer commands, or by renaming\n     an automatically named buffer with set-buffer -n.\tAutomatically named\n     buffers are given a name such as ‘buffer0001’, ‘buffer0002’ and so on.\n     When the buffer-limit option is reached, the oldest automatically named\n     buffer is deleted.  Explicitly named buffers are not subject to\n     buffer-limit and may be deleted with the delete-buffer command.\n\n     Buffers may be added using copy-mode or the set-buffer and load-buffer\n     commands, and pasted into a window using the paste-buffer command.  If a\n     buffer command is used and no buffer is specified, the most recently\n     added automatically named buffer is assumed.\n\n     A configurable history buffer is also maintained for each window.\tBy\n     default, up to 2000 lines are kept; this can be altered with the\n     history-limit option (see the set-option command above).\n\n     The buffer commands are as follows:\n\n     choose-buffer [-NZr] [-F format] [-f filter] [-K key-format] [-O\n\t     sort-order] [-t target-pane] [template]\n\t     Put a pane into buffer mode, where a buffer may be chosen\n\t     interactively from a list.  Each buffer is shown on one line.  A\n\t     shortcut key is shown on the left in brackets allowing for\n\t     immediate choice, or the list may be navigated and an item chosen\n\t     or otherwise manipulated using the keys below.  -Z zooms the\n\t     pane.  The following keys may be used in buffer mode:\n\n\t\t   Key\t  Function\n\t\t   Enter  Paste selected buffer\n\t\t   Up\t  Select previous buffer\n\t\t   Down   Select next buffer\n\t\t   C-s\t  Search by name or content\n\t\t   n\t  Repeat last search forwards\n\t\t   N\t  Repeat last search backwards\n\t\t   t\t  Toggle if buffer is tagged\n\t\t   T\t  Tag no buffers\n\t\t   C-t\t  Tag all buffers\n\t\t   p\t  Paste selected buffer\n\t\t   P\t  Paste tagged buffers\n\t\t   d\t  Delete selected buffer\n\t\t   D\t  Delete tagged buffers\n\t\t   e\t  Open the buffer in an editor\n\t\t   f\t  Enter a format to filter items\n\t\t   O\t  Change sort field\n\t\t   r\t  Reverse sort order\n\t\t   v\t  Toggle preview\n\t\t   q\t  Exit mode\n\n\t     After a buffer is chosen, ‘%%’ is replaced by the buffer name in\n\t     template and the result executed as a command.  If template is\n\t     not given, \"paste-buffer -p -b '%%'\" is used.\n\n\t     -O specifies the initial sort field: one of ‘time’ (creation),\n\t     ‘name’ or ‘size’.\t-r reverses the sort order.  -f specifies an\n\t     initial filter: the filter is a format - if it evaluates to zero,\n\t     the item in the list is not shown, otherwise it is shown.\tIf a\n\t     filter would lead to an empty list, it is ignored.  -F specifies\n\t     the format for each item in the list and -K a format for each\n\t     shortcut key; both are evaluated once for each line.  -N starts\n\t     without the preview.  This command works only if at least one\n\t     client is attached.\n\n     clear-history [-H] [-t target-pane]\n\t\t   (alias: clearhist)\n\t     Remove and free the history for the specified pane.  -H also\n\t     removes all hyperlinks.\n\n     delete-buffer [-b buffer-name]\n\t\t   (alias: deleteb)\n\t     Delete the buffer named buffer-name, or the most recently added\n\t     automatically named buffer if not specified.\n\n     list-buffers [-F format] [-f filter]\n\t\t   (alias: lsb)\n\t     List the global buffers.  -F specifies the format of each line\n\t     and -f a filter.  Only buffers for which the filter is true are\n\t     shown.  See the FORMATS section.\n\n     load-buffer [-w] [-b buffer-name] [-t target-client] path\n\t\t   (alias: loadb)\n\t     Load the contents of the specified paste buffer from path.  If -w\n\t     is given, the buffer is also sent to the clipboard for\n\t     target-client using the xterm(1) escape sequence, if possible.\n\t     If path is ‘-’, the contents are read from stdin.\n\n     paste-buffer [-dpr] [-b buffer-name] [-s separator] [-t target-pane]\n\t\t   (alias: pasteb)\n\t     Insert the contents of a paste buffer into the specified pane.\n\t     If not specified, paste into the current one.  With -d, also\n\t     delete the paste buffer.  When output, any linefeed (LF)\n\t     characters in the paste buffer are replaced with a separator, by\n\t     default carriage return (CR).  A custom separator may be\n\t     specified using the -s flag.  The -r flag means to do no\n\t     replacement (equivalent to a separator of LF).  If -p is\n\t     specified, paste bracket control codes are inserted around the\n\t     buffer if the application has requested bracketed paste mode.\n\n     save-buffer [-a] [-b buffer-name] path\n\t\t   (alias: saveb)\n\t     Save the contents of the specified paste buffer to path.  The -a\n\t     option appends to rather than overwriting the file.  If path is\n\t     ‘-’, the contents are read from stdin.\n\n     set-buffer [-aw] [-b buffer-name] [-t target-client] [-n new-buffer-name]\n\t     data\n\t\t   (alias: setb)\n\t     Set the contents of the specified buffer to data.\tIf -w is\n\t     given, the buffer is also sent to the clipboard for target-client\n\t     using the xterm(1) escape sequence, if possible.  The -a option\n\t     appends to rather than overwriting the buffer.  The -n option\n\t     renames the buffer to new-buffer-name.\n\n     show-buffer [-b buffer-name]\n\t\t   (alias: showb)\n\t     Display the contents of the specified buffer.\n",
        "     Miscellaneous commands are as follows:\n\n     clock-mode [-t target-pane]\n\t     Display a large clock.\n\n     if-shell [-bF] [-t target-pane] shell-command command [command]\n\t\t   (alias: if)\n\t     Execute the first command if shell-command (run with /bin/sh)\n\t     returns success or the second command otherwise.  Before being\n\t     executed, shell-command is expanded using the rules specified in\n\t     the FORMATS section, including those relevant to target-pane.\n\t     With -b, shell-command is run in the background.\n\n\t     If -F is given, shell-command is not executed but considered\n\t     success if neither empty nor zero (after formats are expanded).\n\n     lock-server\n\t\t   (alias: lock)\n\t     Lock each client individually by running the command specified by\n\t     the lock-command option.\n\n     run-shell [-bC] [-c start-directory] [-d delay] [-t target-pane]\n\t     [shell-command]\n\t\t   (alias: run)\n\t     Execute shell-command using /bin/sh or (with -C) a tmux command\n\t     in the background without creating a window.  Before being\n\t     executed, shell-command is expanded using the rules specified in\n\t     the FORMATS section.  With -b, the command is run in the\n\t     background.  -d waits for delay seconds before starting the\n\t     command.  If -c is given, the current working directory is set to\n\t     start-directory.  If -C is not given, any output to stdout is\n\t     displayed in view mode (in the pane specified by -t or the\n\t     current pane if omitted) after the command finishes.  If the\n\t     command fails, the exit status is also displayed.\n\n     wait-for [-L | -S | -U] channel\n\t\t   (alias: wait)\n\t     When used without options, prevents the client from exiting until\n\t     woken using wait-for -S with the same channel.  When -L is used,\n\t     the channel is locked and any clients that try to lock the same\n\t     channel are made to wait until the channel is unlocked with\n\t     wait-for -U.\n",
        "     When a tmux client detaches, it prints a message.\tThis may be one of:\n\n     detached (from session ...)\n\t     The client was detached normally.\n\n     detached and SIGHUP\n\t     The client was detached and its parent sent the SIGHUP signal\n\t     (for example with detach-client -P).\n\n     lost tty\n\t     The client's tty(4) or pty(4) was unexpectedly destroyed.\n\n     terminated\n\t     The client was killed with SIGTERM.\n\n     too far behind\n\t     The client is in control mode and became unable to keep up with\n\t     the data from tmux.\n\n     exited  The server exited when it had no sessions.\n\n     server exited\n\t     The server exited when it received SIGTERM.\n\n     server exited unexpectedly\n\t     The server crashed or otherwise exited without telling the client\n\t     the reason.\n",
        "     tmux understands some unofficial extensions to terminfo(5).  It is not\n     normally necessary to set these manually, instead the terminal-features\n     option should be used.\n\n     AX      An existing extension that tells tmux the terminal supports\n\t     default colours.\n\n     Bidi    Tell tmux that the terminal supports the VTE bidirectional text\n\t     extensions.\n\n     Cs, Cr  Set the cursor colour.  The first takes a single string argument\n\t     and is used to set the colour; the second takes no arguments and\n\t     restores the default cursor colour.  If set, a sequence such as\n\t     this may be used to change the cursor colour from inside tmux:\n\n\t\t   $ printf '\\033]12;red\\033\\\\'\n\n\t     The colour is an X(7) colour, see XParseColor(3).\n\n     Cmg, Clmg, Dsmg, Enmg\n\t     Set, clear, disable or enable DECSLRM margins.  These are set\n\t     automatically if the terminal reports it is VT420 compatible.\n\n     Dsbp, Enbp\n\t     Disable and enable bracketed paste.  These are set automatically\n\t     if the XT capability is present.\n\n     Dseks, Eneks\n\t     Disable and enable extended keys.\n\n     Dsfcs, Enfcs\n\t     Disable and enable focus reporting.  These are set automatically\n\t     if the XT capability is present.\n\n     Hls     Set or clear a hyperlink annotation.\n\n     Nobr    Tell tmux that the terminal does not use bright colors for bold\n\t     display.\n\n     Rect    Tell tmux that the terminal supports rectangle operations.\n\n     Smol    Enable the overline attribute.\n\n     Smulx   Set a styled underscore.  The single parameter is one of: 0 for\n\t     no underscore, 1 for normal underscore, 2 for double underscore,\n\t     3 for curly underscore, 4 for dotted underscore and 5 for dashed\n\t     underscore.\n\n     Setulc, Setulc1, ol\n\t     Set the underscore colour or reset to the default.  Setulc is for\n\t     RGB colours and Setulc1 for ANSI or 256 colours.  The Setulc\n\t     argument is (red * 65536) + (green * 256) + blue where each is\n\t     between 0 and 255.\n\n     Ss, Se  Set or reset the cursor style.  If set, a sequence such as this\n\t     may be used to change the cursor to an underline:\n\n\t\t   $ printf '\\033[4 q'\n\n\t     If Se is not set, Ss with argument 0 will be used to reset the\n\t     cursor style instead.\n\n     Swd     Set the opening sequence for the working directory notification.\n\t     The sequence is terminated using the standard fsl capability.\n\n     Sxl     Indicates that the terminal supports SIXEL.\n\n     Sync    Start (parameter is 1) or end (parameter is 2) a synchronized\n\t     update.\n\n     Tc      Indicate that the terminal supports the ‘direct colour’ RGB\n\t     escape sequence (for example, \\e[38;2;255;255;255m).\n\n\t     If supported, this is used for the initialize colour escape\n\t     sequence (which may be enabled by adding the ‘initc’ and ‘ccc’\n\t     capabilities to the tmux terminfo(5) entry).\n\n\t     This is equivalent to the RGB terminfo(5) capability.\n\n     Ms      Store the current buffer in the host terminal's selection\n\t     (clipboard).  See the set-clipboard option above and the xterm(1)\n\t     man page.\n\n     XT      This is an existing extension capability that tmux uses to mean\n\t     that the terminal supports the xterm(1) title set sequences and\n\t     to automatically set some of the capabilities above.\n",
        "     tmux offers a textual interface called control mode.  This allows\n     applications to communicate with tmux using a simple text-only protocol.\n\n     In control mode, a client sends tmux commands or command sequences\n     terminated by newlines on standard input.\tEach command will produce one\n     block of output on standard output.  An output block consists of a %begin\n     line followed by the output (which may be empty).\tThe output block ends\n     with a %end or %error.  %begin and matching %end or %error have three\n     arguments: an integer time (as seconds from epoch), command number and\n     flags (currently not used).  For example:\n\n\t   %begin 1363006971 2 1\n\t   0: ksh* (1 panes) [80x24] [layout b25f,80x24,0,0,2] @2 (active)\n\t   %end 1363006971 2 1\n\n     The refresh-client -C command may be used to set the size of a client in\n     control mode.\n\n     In control mode, tmux outputs notifications.  A notification will never\n     occur inside an output block.\n\n     The following notifications are defined:\n\n     %client-detached client\n\t     The client has detached.\n\n     %client-session-changed client session-id name\n\t     The client is now attached to the session with ID session-id,\n\t     which is named name.\n\n     %config-error error\n\t     An error has happened in a configuration file.\n\n     %continue pane-id\n\t     The pane has been continued after being paused (if the\n\t     pause-after flag is set, see refresh-client -A).\n\n     %exit [reason]\n\t     The tmux client is exiting immediately, either because it is not\n\t     attached to any session or an error occurred.  If present, reason\n\t     describes why the client exited.\n\n     %extended-output pane-id age ... : value\n\t     New form of %output sent when the pause-after flag is set.  age\n\t     is the time in milliseconds for which tmux had buffered the\n\t     output before it was sent.  Any subsequent arguments up until a\n\t     single ‘:’ are for future use and should be ignored.\n\n     %layout-change window-id window-layout window-visible-layout window-flags\n\t     The layout of a window with ID window-id changed.\tThe new layout\n\t     is window-layout.\tThe window's visible layout is\n\t     window-visible-layout and the window flags are window-flags.\n\n     %message message\n\t     A message sent with the display-message command.\n\n     %output pane-id value\n\t     A window pane produced output.  value escapes non-printable\n\t     characters and backslash as octal \\xxx.\n\n     %pane-mode-changed pane-id\n\t     The pane with ID pane-id has changed mode.\n\n     %paste-buffer-changed name\n\t     Paste buffer name has been changed.\n\n     %paste-buffer-deleted name\n\t     Paste buffer name has been deleted.\n\n     %pause pane-id\n\t     The pane has been paused (if the pause-after flag is set).\n\n     %session-changed session-id name\n\t     The client is now attached to the session with ID session-id,\n\t     which is named name.\n\n     %session-renamed name\n\t     The current session was renamed to name.\n\n     %session-window-changed session-id window-id\n\t     The session with ID session-id changed its active window to the\n\t     window with ID window-id.\n\n     %sessions-changed\n\t     A session was created or destroyed.\n\n     %subscription-changed name session-id window-id window-index pane-id ...\n\t     : value\n\t     The value of the format associated with subscription name has\n\t     changed to value.\tSee refresh-client -B.\tAny arguments after\n\t     pane-id up until a single ‘:’ are for future use and should be\n\t     ignored.\n\n     %unlinked-window-add window-id\n\t     The window with ID window-id was created but is not linked to the\n\t     current session.\n\n     %unlinked-window-close window-id\n\t     The window with ID window-id, which is not linked to the current\n\t     session, was closed.\n\n     %unlinked-window-renamed window-id\n\t     The window with ID window-id, which is not linked to the current\n\t     session, was renamed.\n\n     %window-add window-id\n\t     The window with ID window-id was linked to the current session.\n\n     %window-close window-id\n\t     The window with ID window-id closed.\n\n     %window-pane-changed window-id pane-id\n\t     The active pane in the window with ID window-id changed to the\n\t     pane with ID pane-id.\n\n     %window-renamed window-id name\n\t     The window with ID window-id was renamed to name.\n",
        "     When tmux is started, it inspects the following environment variables:\n\n     EDITOR    If the command specified in this variable contains the string\n\t       ‘vi’ and VISUAL is unset, use vi-style key bindings.\n\t       Overridden by the mode-keys and status-keys options.\n\n     HOME      The user's login directory.  If unset, the passwd(5) database\n\t       is consulted.\n\n     LC_CTYPE  The character encoding locale(1).  It is used for two separate\n\t       purposes.  For output to the terminal, UTF-8 is used if the -u\n\t       option is given or if LC_CTYPE contains \"UTF-8\" or \"UTF8\".\n\t       Otherwise, only ASCII characters are written and non-ASCII\n\t       characters are replaced with underscores (‘_’).\tFor input,\n\t       tmux always runs with a UTF-8 locale.  If en_US.UTF-8 is\n\t       provided by the operating system, it is used and LC_CTYPE is\n\t       ignored for input.  Otherwise, LC_CTYPE tells tmux what the\n\t       UTF-8 locale is called on the current system.  If the locale\n\t       specified by LC_CTYPE is not available or is not a UTF-8\n\t       locale, tmux exits with an error message.\n\n     LC_TIME   The date and time format locale(1).  It is used for locale-\n\t       dependent strftime(3) format specifiers.\n\n     PWD       The current working directory to be set in the global\n\t       environment.  This may be useful if it contains symbolic links.\n\t       If the value of the variable does not match the current working\n\t       directory, the variable is ignored and the result of getcwd(3)\n\t       is used instead.\n\n     SHELL     The absolute path to the default shell for new windows.\tSee\n\t       the default-shell option for details.\n\n     TMUX_TMPDIR\n\t       The parent directory of the directory containing the server\n\t       sockets.  See the -L option for details.\n\n     VISUAL    If the command specified in this variable contains the string\n\t       ‘vi’, use vi-style key bindings.  Overridden by the mode-keys\n\t       and status-keys options.\n",
        "     ~/.tmux.conf\n     $XDG_CONFIG_HOME/tmux/tmux.conf\n     ~/.config/tmux/tmux.conf\t     Default tmux configuration file.\n     /opt/homebrew/etc/tmux.conf     System-wide configuration file.\n",
        "     To create a new tmux session running vi(1):\n\n\t   $ tmux new-session vi\n\n     Most commands have a shorter form, known as an alias.  For new-session,\n     this is new:\n\n\t   $ tmux new vi\n\n     Alternatively, the shortest unambiguous form of a command is accepted.\n     If there are several options, they are listed:\n\n\t   $ tmux n\n\t   ambiguous command: n, could be: new-session, new-window, next-window\n\n     Within an active session, a new window may be created by typing ‘C-b c’\n     (Ctrl followed by the ‘b’ key followed by the ‘c’ key).\n\n     Windows may be navigated with: ‘C-b 0’ (to select window 0), ‘C-b 1’ (to\n     select window 1), and so on; ‘C-b n’ to select the next window; and ‘C-b\n     p’ to select the previous window.\n\n     A session may be detached using ‘C-b d’ (or by an external event such as\n     ssh(1) disconnection) and reattached with:\n\n\t   $ tmux attach-session\n\n     Typing ‘C-b ?’ lists the current key bindings in the current window; up\n     and down may be used to navigate the list or ‘q’ to exit from it.\n\n     Commands to be run when the tmux server is started may be placed in the\n     ~/.tmux.conf configuration file.  Common examples include:\n\n     Changing the default prefix key:\n\n\t   set-option -g prefix C-a\n\t   unbind-key C-b\n\t   bind-key C-a send-prefix\n\n     Turning the status line off, or changing its colour:\n\n\t   set-option -g status off\n\t   set-option -g status-style bg=blue\n\n     Setting other options, such as the default command, or locking after 30\n     minutes of inactivity:\n\n\t   set-option -g default-command \"exec /bin/ksh\"\n\t   set-option -g lock-after-time 1800\n\n     Creating new key bindings:\n\n\t   bind-key b set-option status\n\t   bind-key / command-prompt \"split-window 'exec man %%'\"\n\t   bind-key S command-prompt \"new-window -n %1 'ssh %1'\"\n",
        "     pty(4)\n",
        "     Nicholas Marriott <nicholas.marriott@gmail.com>\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "-2",
      "description": "Force tmux to assume the terminal supports 256 colours. This is equivalent to -T 256."
    },
    {
      "flag": "-C",
      "description": "Start in control mode (see the CONTROL MODE section). Given twice (-CC) disables echo."
    },
    {
      "flag": "-c",
      "description": " Execute shell-command using the default shell.  If necessary, the tmux server will be started to retrieve the default-shell option.  This option is for compatibility with sh(1) when tmux is used as a login shell.",
      "optional": true
    },
    {
      "flag": "-D",
      "description": "Do not start the tmux server as a daemon.  This also turns the exit-empty option off.  With -D, command may not be specified."
    },
    {
      "flag": "-f",
      "description": " tmux loads the system configuration file from /opt/homebrew/etc/tmux.conf, if present, then looks for a user configuration file at ~/.tmux.conf or $XDG_CONFIG_HOME/tmux/tmux.conf. The configuration file is a set of tmux commands which are executed in sequence when the server is first started. tmux loads configuration files once when the server process has started.  The source-file command may be used to load a file later. tmux shows any error messages from commands in configuration files in the first session created, and continues to process the rest of the configuration file.",
      "optional": true
    },
    {
      "flag": "-L",
      "description": " tmux stores the server socket in a directory under TMUX_TMPDIR or /tmp if it is unset.\tThe default socket is named default.  This option allows a different socket name to be specified, allowing several independent tmux servers to be run.  Unlike -S a full path is not necessary: the sockets are all created in a directory tmux-UID under the directory given by TMUX_TMPDIR or in /tmp.  The tmux-UID directory is created by tmux and must not be world readable, writable or executable. If the socket is accidentally removed, the SIGUSR1 signal may be sent to the tmux server process to recreate it (note that this will fail if any parent directories are missing).",
      "optional": true
    },
    {
      "flag": "-l",
      "description": "Behave as a login shell.  This flag currently has no effect and is for compatibility with other shells when using tmux as a login shell."
    },
    {
      "flag": "-N",
      "description": "Do not start the server even if the command would normally do so (for example new-session or start-server)."
    },
    {
      "flag": "-S",
      "description": " Specify a full alternative path to the server socket.  If and any -L flag is ignored.",
      "optional": true
    },
    {
      "flag": "-S",
      "description": " Specify a full alternative path to the server socket.  If and any -L flag is ignored.",
      "optional": true
    },
    {
      "flag": "-T",
      "description": " separated list of features.\tSee the terminal-features option.",
      "optional": true
    },
    {
      "flag": "-u",
      "description": "Write UTF-8 output to the terminal even if the first environment variable of LC_ALL, LC_CTYPE, or LANG that is set does not contain \"UTF-8\" or \"UTF8\"."
    },
    {
      "flag": "-V",
      "description": "Report the tmux version."
    },
    {
      "flag": "-v",
      "description": "Request verbose logging.  Log messages will be saved into tmux-client-PID.log and tmux-server-PID.log files in the current directory, where PID is the PID of the server or client process.  If -v is specified twice, an additional tmux-out-PID.log file is generated with a copy of everything tmux writes to the terminal. The SIGUSR2 signal may be sent to the tmux server process to toggle logging between on (as if -v was given) and off. command [flags] This specifies one of a set of commands used to control tmux, as described in the following sections.  If no commands are specified, the new-session command is assumed. DEFAULT KEY BINDINGS tmux may be controlled from an attached client by using a key combination of a prefix key, ‘C-b’ (Ctrl-b) by default, followed by a command key. The default command key bindings are: C-b\t       Send the prefix key (C-b) through to the application. C-o\t       Rotate the panes in the current window forwards. C-z\t       Suspend the tmux client. !\t       Break the current pane out of the window. \"\t       Split the current pane into two, top and bottom. #\t       List all paste buffers. $\t       Rename the current session. %\t       Split the current pane into two, left and right. &\t       Kill the current window. '\t       Prompt for a window index to select. (\t       Switch the attached client to the previous session. )\t       Switch the attached client to the next session. ,\t       Rename the current window. -\t       Delete the most recently copied buffer of text. .\t       Prompt for an index to move the current window. 0 to 9      Select windows 0 to 9. :\t       Enter the tmux command prompt. ;\t       Move to the previously active pane. =\t       Choose which buffer to paste interactively from a list. ?\t       List all key bindings. D\t       Choose a client to detach. L\t       Switch the attached client back to the last session. [\t       Enter copy mode to copy text or view the history. ]\t       Paste the most recently copied buffer of text. c\t       Create a new window. d\t       Detach the current client. f\t       Prompt to search for text in open windows. i\t       Display some information about the current window. l\t       Move to the previously selected window. m\t       Mark the current pane (see select-pane -m). M\t       Clear the marked pane. n\t       Change to the next window. o\t       Select the next pane in the current window. p\t       Change to the previous window. q\t       Briefly display pane indexes. r\t       Force redraw of the attached client. s\t       Select a new session for the attached client interactively. t\t       Show the time. w\t       Choose the current window interactively. x\t       Kill the current pane. z\t       Toggle zoom state of the current pane. {\t       Swap the current pane with the previous pane. }\t       Swap the current pane with the next pane. ~\t       Show previous messages from tmux, if any. Page Up     Enter copy mode and scroll one page up. Up, Down Left, Right Change to the pane above, below, to the left, or to the right of the current pane. M-1 to M-5  Arrange panes in one of the seven preset layouts: even- horizontal, even-vertical, main-horizontal, main- horizontal-mirrored, main-vertical, main-vertical, or tiled. Space       Arrange the current window in the next preset layout. M-n\t       Move to the next window with a bell or activity marker. M-o\t       Rotate the panes in the current window backwards. M-p\t       Move to the previous window with a bell or activity marker. C-Up, C-Down C-Left, C-Right Resize the current pane in steps of one cell. M-Up, M-Down M-Left, M-Right Resize the current pane in steps of five cells. Key bindings may be changed with the bind-key and unbind-key commands. COMMAND PARSING AND EXECUTION tmux supports a large number of commands which can be used to control its behaviour.  Each command is named and can accept zero or more flags and arguments.  They may be bound to a key with the bind-key command or run from the shell prompt, a shell script, a configuration file or the command prompt.  For example, the same set-option command run from the shell prompt, from ~/.tmux.conf and bound to a key may look like: $ tmux set-option -g status-style bg=cyan set-option -g status-style bg=cyan bind-key C set-option -g status-style bg=cyan Here, the command name is ‘set-option’, ‘-g’ is a flag and ‘status-style’ and ‘bg=cyan’ are arguments. tmux distinguishes between command parsing and execution.\tIn order to execute a command, tmux needs it to be split up into its name and arguments.  This is command parsing.  If a command is run from the shell, the shell parses it; from inside tmux or from a configuration file, tmux does.  Examples of when tmux parses commands are: -   in a configuration file; -   typed at the command prompt (see command-prompt); -   given to bind-key; -   passed as arguments to if-shell or confirm-before. To execute commands, each client has a ‘command queue’.  A global command queue not attached to any client is used on startup for configuration files like ~/.tmux.conf.  Parsed commands added to the queue are executed in order.\tSome commands, like if-shell and confirm-before, parse their argument to create a new command which is inserted immediately after themselves.  This means that arguments can be parsed twice or more - once when the parent command (such as if-shell) is parsed and again when it parses and executes its command.  Commands like if-shell, run-shell and display-panes stop execution of subsequent commands on the queue until something happens - if-shell and run-shell until a shell command finishes and display-panes until a key is pressed.\tFor example, the following commands: new-session; new-window if-shell \"true\" \"split-window\" kill-session Will execute new-session, new-window, if-shell, the shell command true(1), split-window and kill-session in that order. The COMMANDS section lists the tmux commands and their arguments. PARSING SYNTAX This section describes the syntax of commands parsed by tmux, for example in a configuration file or at the command prompt.\tNote that when commands are entered into the shell, they are parsed by the shell - see for example ksh(1) or csh(1). Each command is terminated by a newline or a semicolon (;).  Commands separated by semicolons together form a ‘command sequence’ - if a command in the sequence encounters an error, no subsequent commands are executed. It is recommended that a semicolon used as a command separator should be written as an individual token, for example from sh(1): $ tmux neww \\; splitw Or: $ tmux neww ';' splitw Or from the tmux command prompt: neww ; splitw However, a trailing semicolon is also interpreted as a command separator, for example in these sh(1) commands: $ tmux neww\\; splitw Or: $ tmux 'neww;' splitw As in these examples, when running tmux from the shell extra care must be taken to properly quote semicolons: 1.\tSemicolons that should be interpreted as a command separator should be escaped according to the shell conventions.  For sh(1) this typically means quoted (such as ‘neww ';' splitw’) or escaped (such as ‘neww \\\\\\\\; splitw’). 2.\tIndividual semicolons or trailing semicolons that should be interpreted as arguments should be escaped twice: once according to the shell conventions and a second time for tmux; for example: $ tmux neww 'foo\\\\;' bar $ tmux neww foo\\\\\\\\; bar 3.\tSemicolons that are not individual tokens or trailing another token should only be escaped once according to shell conventions; for example: $ tmux neww 'foo-;-bar' $ tmux neww foo-\\\\;-bar Comments are marked by the unquoted # character - any remaining text after a comment is ignored until the end of the line. If the last character of a line is \\, the line is joined with the following line (the \\ and the newline are completely removed).  This is called line continuation and applies both inside and outside quoted strings and in comments, but not inside braces. Command arguments may be specified as strings surrounded by single (') quotes, double quotes (\") or braces ({}).\tThis is required when the argument contains any special character.  Single and double quoted strings cannot span multiple lines except with line continuation.\tBraces can span multiple lines. Outside of quotes and inside double quotes, these replacements are performed: -   Environment variables preceded by $ are replaced with their value from the global environment (see the GLOBAL AND SESSION ENVIRONMENT section). -   A leading ~ or ~user is expanded to the home directory of the current or specified user. -   \\uXXXX or \\uXXXXXXXX is replaced by the Unicode codepoint corresponding to the given four or eight digit hexadecimal number. -   When preceded (escaped) by a \\, the following characters are replaced: \\e by the escape character; \\r by a carriage return; \\n by a newline; and \\t by a tab. -   \\ooo is replaced by a character of the octal value ooo.\tThree octal digits are required, for example \\001.  The largest valid character is \\377. -   Any other characters preceded by \\ are replaced by themselves (that is, the \\ is removed) and are not treated as having any special meaning - so for example \\; will not mark a command sequence and \\$ will not expand an environment variable. Braces are parsed as a configuration file (so conditions such as ‘%if’ are processed) and then converted into a string.  They are designed to avoid the need for additional escaping when passing a group of tmux commands as an argument (for example to if-shell).  These two examples produce an identical command - note that no escaping is needed when using {}: if-shell true { display -p 'brace-dollar-foo: }$foo' } if-shell true \"display -p 'brace-dollar-foo: }\\$foo'\" Braces may be enclosed inside braces, for example: bind x if-shell \"true\" { if-shell \"true\" { display \"true!\" } } Environment variables may be set by using the syntax ‘name=value’, for example ‘HOME=/home/user’.  Variables set during parsing are added to the global environment.  A hidden variable may be set with ‘%hidden’, for example: %hidden MYVAR=42 Hidden variables are not passed to the environment of processes created by tmux.  See the GLOBAL AND SESSION ENVIRONMENT section. Commands may be parsed conditionally by surrounding them with ‘%if’, ‘%elif’, ‘%else’ and ‘%endif’.  The argument to ‘%if’ and ‘%elif’ is expanded as a format (see FORMATS) and if it evaluates to false (zero or empty), subsequent text is ignored until the closing ‘%elif’, ‘%else’ or ‘%endif’.\tFor example: %if \"#{==:#{host},myhost}\" set -g status-style bg=red %elif \"#{==:#{host},myotherhost}\" set -g status-style bg=green %else set -g status-style bg=blue %endif Will change the status line to red if running on ‘myhost’, green if running on ‘myotherhost’, or blue if running on another host. Conditionals may be given on one line, for example: %if #{==:#{host},myhost} set -g status-style bg=red %endif"
    }
  ],
  "examples": [
    {
      "command": "Rename the current session.",
      "description": "%\t       Split the current pane into two, left and right.",
      "tags": [],
      "output": "\t   %\t       Split the current pane into two, left and right.\n\t   &\t       Kill the current window.\n\t   '\t       Prompt for a window index to select.\n\t   (\t       Switch the attached client to the previous session.\n\t   )\t       Switch the attached client to the next session.\n\t   ,\t       Rename the current window.\n\t   -\t       Delete the most recently copied buffer of text.\n\t   .\t       Prompt for an index to move the current window.\n\t   0 to 9      Select windows 0 to 9.\n\t   :\t       Enter the tmux command prompt.\n\t   ;\t       Move to the previously active pane.\n\t   =\t       Choose which buffer to paste interactively from a list.\n\t   ?\t       List all key bindings.\n\t   D\t       Choose a client to detach.\n\t   L\t       Switch the attached client back to the last session.\n\t   [\t       Enter copy mode to copy text or view the history.\n\t   ]\t       Paste the most recently copied buffer of text.\n\t   c\t       Create a new window.\n\t   d\t       Detach the current client.\n\t   f\t       Prompt to search for text in open windows.\n\t   i\t       Display some information about the current window.\n\t   l\t       Move to the previously selected window.\n\t   m\t       Mark the current pane (see select-pane -m).\n\t   M\t       Clear the marked pane.\n\t   n\t       Change to the next window.\n\t   o\t       Select the next pane in the current window.\n\t   p\t       Change to the previous window.\n\t   q\t       Briefly display pane indexes.\n\t   r\t       Force redraw of the attached client.\n\t   s\t       Select a new session for the attached client\n\t\t       interactively.\n\t   t\t       Show the time.\n\t   w\t       Choose the current window interactively.\n\t   x\t       Kill the current pane.\n\t   z\t       Toggle zoom state of the current pane.\n\t   {\t       Swap the current pane with the previous pane.\n\t   }\t       Swap the current pane with the next pane.\n\t   ~\t       Show previous messages from tmux, if any.\n\t   Page Up     Enter copy mode and scroll one page up.\n\t   Up, Down\n\t   Left, Right\n\t\t       Change to the pane above, below, to the left, or to the\n\t\t       right of the current pane.\n\t   M-1 to M-5  Arrange panes in one of the seven preset layouts: even-\n\t\t       horizontal, even-vertical, main-horizontal, main-\n\t\t       horizontal-mirrored, main-vertical, main-vertical, or\n\t\t       tiled.\n\t   Space       Arrange the current window in the next preset layout.\n\t   M-n\t       Move to the next window with a bell or activity marker.\n\t   M-o\t       Rotate the panes in the current window backwards.\n\t   M-p\t       Move to the previous window with a bell or activity\n\t\t       marker.\n\t   C-Up, C-Down\n\t   C-Left, C-Right\n\t\t       Resize the current pane in steps of one cell.\n\t   M-Up, M-Down\n\t   M-Left, M-Right\n\t\t       Resize the current pane in steps of five cells.\n     Key bindings may be changed with the bind-key and unbind-key commands.\nCOMMAND PARSING AND EXECUTION\n     tmux supports a large number of commands which can be used to control its\n     behaviour.  Each command is named and can accept zero or more flags and\n     arguments.  They may be bound to a key with the bind-key command or run\n     from the shell prompt, a shell script, a configuration file or the\n     command prompt.  For example, the same set-option command run from the\n     shell prompt, from ~/.tmux.conf and bound to a key may look like:\n"
    },
    {
      "command": "tmux set-option -g status-style bg=cyan",
      "description": "",
      "tags": [],
      "output": "\t   set-option -g status-style bg=cyan\n\t   bind-key C set-option -g status-style bg=cyan\n     Here, the command name is ‘set-option’, ‘-g’ is a flag and ‘status-style’\n     and ‘bg=cyan’ are arguments.\n     tmux distinguishes between command parsing and execution.\tIn order to\n     execute a command, tmux needs it to be split up into its name and\n     arguments.  This is command parsing.  If a command is run from the shell,\n     the shell parses it; from inside tmux or from a configuration file, tmux\n     does.  Examples of when tmux parses commands are:\n\t   -   in a configuration file;\n\t   -   typed at the command prompt (see command-prompt);\n\t   -   given to bind-key;\n\t   -   passed as arguments to if-shell or confirm-before.\n     To execute commands, each client has a ‘command queue’.  A global command\n     queue not attached to any client is used on startup for configuration\n     files like ~/.tmux.conf.  Parsed commands added to the queue are executed\n     in order.\tSome commands, like if-shell and confirm-before, parse their\n     argument to create a new command which is inserted immediately after\n     themselves.  This means that arguments can be parsed twice or more - once\n     when the parent command (such as if-shell) is parsed and again when it\n     parses and executes its command.  Commands like if-shell, run-shell and\n     display-panes stop execution of subsequent commands on the queue until\n     something happens - if-shell and run-shell until a shell command finishes\n     and display-panes until a key is pressed.\tFor example, the following\n     commands:\n\t   new-session; new-window\n\t   if-shell \"true\" \"split-window\"\n\t   kill-session\n     Will execute new-session, new-window, if-shell, the shell command\n     true(1), split-window and kill-session in that order.\n     The COMMANDS section lists the tmux commands and their arguments.\nPARSING SYNTAX\n     This section describes the syntax of commands parsed by tmux, for example\n     in a configuration file or at the command prompt.\tNote that when\n     commands are entered into the shell, they are parsed by the shell - see\n     for example ksh(1) or csh(1).\n     Each command is terminated by a newline or a semicolon (;).  Commands\n     separated by semicolons together form a ‘command sequence’ - if a command\n     in the sequence encounters an error, no subsequent commands are executed.\n     It is recommended that a semicolon used as a command separator should be\n     written as an individual token, for example from sh(1):\n"
    },
    {
      "command": "tmux neww \\; splitw",
      "description": "",
      "tags": [],
      "output": "     Or:\n"
    },
    {
      "command": "tmux neww ';' splitw",
      "description": "",
      "tags": [],
      "output": "     Or from the tmux command prompt:\n\t   neww ; splitw\n     However, a trailing semicolon is also interpreted as a command separator,\n     for example in these sh(1) commands:\n"
    },
    {
      "command": "tmux neww\\; splitw",
      "description": "",
      "tags": [],
      "output": "     Or:\n"
    },
    {
      "command": "tmux 'neww;' splitw",
      "description": "",
      "tags": [],
      "output": "     As in these examples, when running tmux from the shell extra care must be\n     taken to properly quote semicolons:\n\t   1.\tSemicolons that should be interpreted as a command separator\n\t\tshould be escaped according to the shell conventions.  For\n\t\tsh(1) this typically means quoted (such as ‘neww ';' splitw’)\n\t\tor escaped (such as ‘neww \\\\\\\\; splitw’).\n\t   2.\tIndividual semicolons or trailing semicolons that should be\n\t\tinterpreted as arguments should be escaped twice: once\n\t\taccording to the shell conventions and a second time for tmux;\n\t\tfor example:\n"
    },
    {
      "command": "tmux neww 'foo\\\\;' bar",
      "description": "",
      "tags": []
    },
    {
      "command": "tmux neww foo\\\\\\\\; bar",
      "description": "",
      "tags": [],
      "output": "\t   3.\tSemicolons that are not individual tokens or trailing another\n\t\ttoken should only be escaped once according to shell\n\t\tconventions; for example:\n"
    },
    {
      "command": "tmux neww 'foo-;-bar'",
      "description": "",
      "tags": []
    },
    {
      "command": "tmux neww foo-\\\\;-bar",
      "description": "",
      "tags": [],
      "output": "     Comments are marked by the unquoted # character - any remaining text\n     after a comment is ignored until the end of the line.\n     If the last character of a line is \\, the line is joined with the\n     following line (the \\ and the newline are completely removed).  This is\n     called line continuation and applies both inside and outside quoted\n     strings and in comments, but not inside braces.\n     Command arguments may be specified as strings surrounded by single (')\n     quotes, double quotes (\") or braces ({}).\tThis is required when the\n     argument contains any special character.  Single and double quoted\n     strings cannot span multiple lines except with line continuation.\tBraces\n     can span multiple lines.\n     Outside of quotes and inside double quotes, these replacements are\n     performed:\n\t   -   Environment variables preceded by $ are replaced with their\n\t       value from the global environment (see the GLOBAL AND SESSION\n\t       ENVIRONMENT section).\n\t   -   A leading ~ or ~user is expanded to the home directory of the\n\t       current or specified user.\n\t   -   \\uXXXX or \\uXXXXXXXX is replaced by the Unicode codepoint\n\t       corresponding to the given four or eight digit hexadecimal\n\t       number.\n\t   -   When preceded (escaped) by a \\, the following characters are\n\t       replaced: \\e by the escape character; \\r by a carriage return;\n\t       \\n by a newline; and \\t by a tab.\n\t   -   \\ooo is replaced by a character of the octal value ooo.\tThree\n\t       octal digits are required, for example \\001.  The largest valid\n\t       character is \\377.\n\t   -   Any other characters preceded by \\ are replaced by themselves\n\t       (that is, the \\ is removed) and are not treated as having any\n\t       special meaning - so for example \\; will not mark a command\n\t       sequence and \\$ will not expand an environment variable.\n     Braces are parsed as a configuration file (so conditions such as ‘%if’\n     are processed) and then converted into a string.  They are designed to\n     avoid the need for additional escaping when passing a group of tmux\n     commands as an argument (for example to if-shell).  These two examples\n     produce an identical command - note that no escaping is needed when using\n     {}:\n\t   if-shell true {\n\t       display -p 'brace-dollar-foo: }$foo'\n\t   }\n\t   if-shell true \"display -p 'brace-dollar-foo: }\\$foo'\"\n     Braces may be enclosed inside braces, for example:\n\t   bind x if-shell \"true\" {\n\t       if-shell \"true\" {\n\t\t   display \"true!\"\n\t       }\n\t   }\n     Environment variables may be set by using the syntax ‘name=value’, for\n     example ‘HOME=/home/user’.  Variables set during parsing are added to the\n     global environment.  A hidden variable may be set with ‘%hidden’, for\n     example:\n\t   %hidden MYVAR=42\n     Hidden variables are not passed to the environment of processes created\n     by tmux.  See the GLOBAL AND SESSION ENVIRONMENT section.\n     Commands may be parsed conditionally by surrounding them with ‘%if’,\n     ‘%elif’, ‘%else’ and ‘%endif’.  The argument to ‘%if’ and ‘%elif’ is\n     expanded as a format (see FORMATS) and if it evaluates to false (zero or\n     empty), subsequent text is ignored until the closing ‘%elif’, ‘%else’ or\n     ‘%endif’.\tFor example:\n\t   %if \"#{==:#{host},myhost}\"\n\t   set -g status-style bg=red\n\t   %elif \"#{==:#{host},myotherhost}\"\n\t   set -g status-style bg=green\n\t   %else\n\t   set -g status-style bg=blue\n\t   %endif\n     Will change the status line to red if running on ‘myhost’, green if\n     running on ‘myotherhost’, or blue if running on another host.\n     Conditionals may be given on one line, for example:\n\t   %if #{==:#{host},myhost} set -g status-style bg=red %endif\n"
    }
  ],
  "relatedCommands": [
    "xterm",
    "terminfo",
    "fnmatch",
    "strunvis",
    "sh",
    "getpwuid",
    "lock",
    "vi",
    "strftime",
    "tmux",
    "terminal",
    "multiplexer",
    "shell-command",
    "socket-name",
    "socket-path"
  ],
  "seeAlso": [
    {
      "name": "xterm",
      "section": 1
    },
    {
      "name": "xterm",
      "section": 1
    },
    {
      "name": "terminfo",
      "section": 5
    },
    {
      "name": "xterm",
      "section": 1
    },
    {
      "name": "xterm",
      "section": 1
    },
    {
      "name": "terminfo",
      "section": 5
    },
    {
      "name": "terminfo",
      "section": 5
    },
    {
      "name": "terminfo",
      "section": 5
    },
    {
      "name": "terminfo",
      "section": 5
    },
    {
      "name": "fnmatch",
      "section": 3
    },
    {
      "name": "terminfo",
      "section": 5
    },
    {
      "name": "xterm",
      "section": 1
    },
    {
      "name": "xterm",
      "section": 1
    },
    {
      "name": "terminfo",
      "section": 5
    },
    {
      "name": "fnmatch",
      "section": 3
    },
    {
      "name": "terminfo",
      "section": 5
    },
    {
      "name": "strunvis",
      "section": 3
    },
    {
      "name": "sh",
      "section": 1
    },
    {
      "name": "getpwuid",
      "section": 3
    },
    {
      "name": "lock",
      "section": 1
    },
    {
      "name": "vi",
      "section": 1
    },
    {
      "name": "terminfo",
      "section": 5
    },
    {
      "name": "xterm",
      "section": 1
    },
    {
      "name": "strftime",
      "section": 3
    },
    {
      "name": "strftime",
      "section": 3
    },
    {
      "name": "terminfo",
      "section": 5
    }
  ],
  "metadata": {},
  "searchContent": "tmux tmux manual page tmux is a terminal multiplexer it enables a number of terminals to be created accessed and controlled from a single screen tmux -2cdlnuvv -c shell-command -f file -l socket-name -s socket-path -t features command flags tmux manual page terminal multiplexer enables number terminals created accessed controlled single screen -2 force tmux to assume the terminal supports 256 colours this is equivalent to -t 256 -c start in control mode see the control mode section given twice -cc disables echo -c execute shell-command using the default shell if necessary the tmux server will be started to retrieve the default-shell option this option is for compatibility with sh 1 when tmux is used as a login shell -d do not start the tmux server as a daemon this also turns the exit-empty option off with -d command may not be specified -f tmux loads the system configuration file from opt homebrew etc tmux conf if present then looks for a user configuration file at tmux conf or xdg config home tmux tmux conf the configuration file is a set of tmux commands which are executed in sequence when the server is first started tmux loads configuration files once when the server process has started the source-file command may be used to load a file later tmux shows any error messages from commands in configuration files in the first session created and continues to process the rest of the configuration file -l tmux stores the server socket in a directory under tmux tmpdir or tmp if it is unset the default socket is named default this option allows a different socket name to be specified allowing several independent tmux servers to be run unlike -s a full path is not necessary the sockets are all created in a directory tmux-uid under the directory given by tmux tmpdir or in tmp the tmux-uid directory is created by tmux and must not be world readable writable or executable if the socket is accidentally removed the sigusr1 signal may be sent to the tmux server process to recreate it note that this will fail if any parent directories are missing -l behave as a login shell this flag currently has no effect and is for compatibility with other shells when using tmux as a login shell -n do not start the server even if the command would normally do so for example new-session or start-server -s specify a full alternative path to the server socket if and any -l flag is ignored -s specify a full alternative path to the server socket if and any -l flag is ignored -t separated list of features see the terminal-features option -u write utf-8 output to the terminal even if the first environment variable of lc all lc ctype or lang that is set does not contain utf-8 or utf8 -v report the tmux version -v request verbose logging log messages will be saved into tmux-client-pid log and tmux-server-pid log files in the current directory where pid is the pid of the server or client process if -v is specified twice an additional tmux-out-pid log file is generated with a copy of everything tmux writes to the terminal the sigusr2 signal may be sent to the tmux server process to toggle logging between on as if -v was given and off command flags this specifies one of a set of commands used to control tmux as described in the following sections if no commands are specified the new-session command is assumed default key bindings tmux may be controlled from an attached client by using a key combination of a prefix key c-b ctrl-b by default followed by a command key the default command key bindings are c-b send the prefix key c-b through to the application c-o rotate the panes in the current window forwards c-z suspend the tmux client break the current pane out of the window split the current pane into two top and bottom list all paste buffers rename the current session split the current pane into two left and right kill the current window prompt for a window index to select switch the attached client to the previous session switch the attached client to the next session rename the current window - delete the most recently copied buffer of text prompt for an index to move the current window 0 to 9 select windows 0 to 9 enter the tmux command prompt move to the previously active pane choose which buffer to paste interactively from a list list all key bindings d choose a client to detach l switch the attached client back to the last session enter copy mode to copy text or view the history paste the most recently copied buffer of text c create a new window d detach the current client f prompt to search for text in open windows i display some information about the current window l move to the previously selected window m mark the current pane see select-pane -m m clear the marked pane n change to the next window o select the next pane in the current window p change to the previous window q briefly display pane indexes r force redraw of the attached client s select a new session for the attached client interactively t show the time w choose the current window interactively x kill the current pane z toggle zoom state of the current pane swap the current pane with the previous pane swap the current pane with the next pane show previous messages from tmux if any page up enter copy mode and scroll one page up up down left right change to the pane above below to the left or to the right of the current pane m-1 to m-5 arrange panes in one of the seven preset layouts even- horizontal even-vertical main-horizontal main- horizontal-mirrored main-vertical main-vertical or tiled space arrange the current window in the next preset layout m-n move to the next window with a bell or activity marker m-o rotate the panes in the current window backwards m-p move to the previous window with a bell or activity marker c-up c-down c-left c-right resize the current pane in steps of one cell m-up m-down m-left m-right resize the current pane in steps of five cells key bindings may be changed with the bind-key and unbind-key commands command parsing and execution tmux supports a large number of commands which can be used to control its behaviour each command is named and can accept zero or more flags and arguments they may be bound to a key with the bind-key command or run from the shell prompt a shell script a configuration file or the command prompt for example the same set-option command run from the shell prompt from tmux conf and bound to a key may look like tmux set-option -g status-style bg cyan set-option -g status-style bg cyan bind-key c set-option -g status-style bg cyan here the command name is set-option -g is a flag and status-style and bg cyan are arguments tmux distinguishes between command parsing and execution in order to execute a command tmux needs it to be split up into its name and arguments this is command parsing if a command is run from the shell the shell parses it from inside tmux or from a configuration file tmux does examples of when tmux parses commands are - in a configuration file - typed at the command prompt see command-prompt - given to bind-key - passed as arguments to if-shell or confirm-before to execute commands each client has a command queue a global command queue not attached to any client is used on startup for configuration files like tmux conf parsed commands added to the queue are executed in order some commands like if-shell and confirm-before parse their argument to create a new command which is inserted immediately after themselves this means that arguments can be parsed twice or more - once when the parent command such as if-shell is parsed and again when it parses and executes its command commands like if-shell run-shell and display-panes stop execution of subsequent commands on the queue until something happens - if-shell and run-shell until a shell command finishes and display-panes until a key is pressed for example the following commands new-session new-window if-shell true split-window kill-session will execute new-session new-window if-shell the shell command true 1 split-window and kill-session in that order the commands section lists the tmux commands and their arguments parsing syntax this section describes the syntax of commands parsed by tmux for example in a configuration file or at the command prompt note that when commands are entered into the shell they are parsed by the shell - see for example ksh 1 or csh 1 each command is terminated by a newline or a semicolon commands separated by semicolons together form a command sequence - if a command in the sequence encounters an error no subsequent commands are executed it is recommended that a semicolon used as a command separator should be written as an individual token for example from sh 1 tmux neww splitw or tmux neww splitw or from the tmux command prompt neww splitw however a trailing semicolon is also interpreted as a command separator for example in these sh 1 commands tmux neww splitw or tmux neww splitw as in these examples when running tmux from the shell extra care must be taken to properly quote semicolons 1 semicolons that should be interpreted as a command separator should be escaped according to the shell conventions for sh 1 this typically means quoted such as neww splitw or escaped such as neww splitw 2 individual semicolons or trailing semicolons that should be interpreted as arguments should be escaped twice once according to the shell conventions and a second time for tmux for example tmux neww foo bar tmux neww foo bar 3 semicolons that are not individual tokens or trailing another token should only be escaped once according to shell conventions for example tmux neww foo- -bar tmux neww foo- -bar comments are marked by the unquoted character - any remaining text after a comment is ignored until the end of the line if the last character of a line is the line is joined with the following line the and the newline are completely removed this is called line continuation and applies both inside and outside quoted strings and in comments but not inside braces command arguments may be specified as strings surrounded by single quotes double quotes or braces this is required when the argument contains any special character single and double quoted strings cannot span multiple lines except with line continuation braces can span multiple lines outside of quotes and inside double quotes these replacements are performed - environment variables preceded by are replaced with their value from the global environment see the global and session environment section - a leading or user is expanded to the home directory of the current or specified user - uxxxx or uxxxxxxxx is replaced by the unicode codepoint corresponding to the given four or eight digit hexadecimal number - when preceded escaped by a the following characters are replaced e by the escape character r by a carriage return n by a newline and t by a tab - ooo is replaced by a character of the octal value ooo three octal digits are required for example 001 the largest valid character is 377 - any other characters preceded by are replaced by themselves that is the is removed and are not treated as having any special meaning - so for example will not mark a command sequence and will not expand an environment variable braces are parsed as a configuration file so conditions such as if are processed and then converted into a string they are designed to avoid the need for additional escaping when passing a group of tmux commands as an argument for example to if-shell these two examples produce an identical command - note that no escaping is needed when using if-shell true display -p brace-dollar-foo foo if-shell true display -p brace-dollar-foo foo braces may be enclosed inside braces for example bind x if-shell true if-shell true display true environment variables may be set by using the syntax name value for example home home user variables set during parsing are added to the global environment a hidden variable may be set with hidden for example hidden myvar 42 hidden variables are not passed to the environment of processes created by tmux see the global and session environment section commands may be parsed conditionally by surrounding them with if elif else and endif the argument to if and elif is expanded as a format see formats and if it evaluates to false zero or empty subsequent text is ignored until the closing elif else or endif for example if host myhost set -g status-style bg red elif host myotherhost set -g status-style bg green else set -g status-style bg blue endif will change the status line to red if running on myhost green if running on myotherhost or blue if running on another host conditionals may be given on one line for example if host myhost set -g status-style bg red endif rename the current session split the current pane into two left and right tmux set-option -g status-style bg cyan tmux neww splitw tmux neww splitw tmux neww splitw tmux neww splitw tmux neww foo bar tmux neww foo bar tmux neww foo- -bar tmux neww foo- -bar name -s socket-path -t features command flags description macos 15 5 june 17 2025 macos 15 5",
  "keywords": [
    "tmux",
    "manual",
    "page",
    "terminal",
    "multiplexer:",
    "enables",
    "number",
    "terminals",
    "created,",
    "accessed,",
    "controlled",
    "single",
    "screen."
  ],
  "complexity": "intermediate",
  "hash": "34a649f65d61392b",
  "parsedAt": "2025-06-17T19:42:06.946Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": true,
  "hasDiagrams": false
}