{
  "name": "file",
  "section": 1,
  "title": "file manual page",
  "description": "This manual page documents version 5.",
  "synopsis": "file [-bcdDhiIkLnNprsvz] [--exclude-quiet] [--extension] [--mime-encoding] [--mime-type] [-f namefile] [-m magicfiles] [-P name=value] [-M magicfiles] file file -C [-m magicfiles] file [--help]",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "macOS 15.5\t\t       February 5, 2021 \t\t    macOS 15.5",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     file – determine file type\n",
        "     file [-bcdDhiIkLnNprsvz] [--exclude-quiet] [--extension]",
        "     file -C [-m magicfiles]\n     file [--help]\n",
        "     This manual page documents version 5.41 of the file command.\n\n     file tests each argument in an attempt to classify it.  There are three\n     sets of tests, performed in this order: filesystem tests, magic tests,\n     and language tests.  The first test that succeeds causes the file type to\n     be printed.\n\n     The type printed will usually contain one of the words text (the file\n     contains only printing characters and a few common control characters and\n     is probably safe to read on an ASCII terminal), executable (the file\n     contains the result of compiling a program in a form understandable to\n     some UNIX kernel or another), or data meaning anything else (data is\n     usually “binary” or non-printable).  Exceptions are well-known file\n     formats (core files, tar archives) that are known to contain binary data.\n     When modifying magic files or the program itself, make sure to preserve\n     these keywords.  Users depend on knowing that all the readable files in a\n     directory have the word “text” printed.  Don't do as Berkeley did and\n     change “shell commands text” to “shell script”.\n\n     The filesystem tests are based on examining the return from a stat(2)\n     system call.  The program checks to see if the file is empty, or if it's\n     some sort of special file.  Any known file types appropriate to the\n     system you are running on (sockets, symbolic links, or named pipes\n     (FIFOs) on those systems that implement them) are intuited if they are\n     defined in the system header file <sys/stat.h>.\n\n     The magic tests are used to check for files with data in particular fixed\n     formats.  The canonical example of this is a binary executable (compiled\n     program) a.out file, whose format is defined in <elf.h>, <a.out.h> and\n     possibly <exec.h> in the standard include directory.  These files have a\n     “magic number” stored in a particular place near the beginning of the\n     file that tells the UNIX operating system that the file is a binary\n     executable, and which of several types thereof.  The concept of a “magic\n     number” has been applied by extension to data files.  Any file with some\n     invariant identifier at a small fixed offset into the file can usually be\n     described in this way.  The information identifying these files is read\n     from the compiled magic file /usr/share/file/magic.mgc, or the files in\n     the directory /usr/share/file/magic if the compiled file does not exist.\n\n     If a file does not match any of the entries in the magic file, it is\n     examined to see if it seems to be a text file.  ASCII, ISO-8859-x, non-\n     ISO 8-bit extended-ASCII character sets (such as those used on Macintosh\n     and IBM PC systems), UTF-8-encoded Unicode, UTF-16-encoded Unicode, and\n     EBCDIC character sets can be distinguished by the different ranges and\n     sequences of bytes that constitute printable text in each set.  If a file\n     passes any of these tests, its character set is reported.\tASCII,\n     ISO-8859-x, UTF-8, and extended-ASCII files are identified as “text”\n     because they will be mostly readable on nearly any terminal; UTF-16 and\n     EBCDIC are only “character data” because, while they contain text, it is\n     text that will require translation before it can be read.\tIn addition,\n     file will attempt to determine other characteristics of text-type files.\n     If the lines of a file are terminated by CR, CRLF, or NEL, instead of the\n     Unix-standard LF, this will be reported.  Files that contain embedded\n     escape sequences or overstriking will also be identified.\n\n     Once file has determined the character set used in a text-type file, it\n     will attempt to determine in what language the file is written.  The\n     language tests look for particular strings (cf.  <names.h>) that can\n     appear anywhere in the first few blocks of a file.  For example, the\n     keyword .br indicates that the file is most likely a troff(1) input file,\n     just as the keyword struct indicates a C program.\tThese tests are less\n     reliable than the previous two groups, so they are performed last.  The\n     language test routines also test for some miscellany (such as tar(1)\n     archives, JSON files).\n\n     Any file that cannot be identified as having been written in any of the\n     character sets listed above is simply said to be “data”.\n",
        "     -b, --brief\n\t     Do not prepend filenames to output lines (brief mode).\n\n     -C, --compile\n\t     Write a magic.mgc output file that contains a pre-parsed version\n\t     of the magic file or directory.\n\n     -c, --checking-printout\n\t     Cause a checking printout of the parsed form of the magic file.\n\t     This is usually used in conjunction with the -m option to debug a\n\t     new magic file before installing it.\n\n     -d      Apply the default system tests; this is the default behavior\n\t     unless -M is specified.\n\n     -D      Print debugging messages.\n\n     -E      On filesystem errors (file not found etc), instead of handling\n\t     the error as regular output as POSIX mandates and keep going,\n\t     issue an error message and exit.\n\n     -e, --exclude testname\n\t     Exclude the test named in testname from the list of tests made to\n\t     determine the file type.  Valid test names are:\n\n\t     apptype   EMX application type (only on EMX).\n\n\t     ascii     Various types of text files (this test will try to\n\t\t       guess the text encoding, irrespective of the setting of\n\t\t       the ‘encoding’ option).\n\n\t     encoding  Different text encodings for soft magic tests.\n\n\t     tokens    Ignored for backwards compatibility.\n\n\t     cdf       Prints details of Compound Document Files.\n\n\t     compress  Checks for, and looks inside, compressed files.\n\n\t     csv       Checks Comma Separated Value files.\n\n\t     elf       Prints ELF file details, provided soft magic tests are\n\t\t       enabled and the elf magic is found.\n\n\t     json      Examines JSON (RFC-7159) files by parsing them for\n\t\t       compliance.\n\n\t     soft      Consults magic files.\n\n\t     tar       Examines tar files.\n\n     --exclude-quiet\n\t     Like --exclude but ignore tests that file does not know about.\n\t     This is intended for compatibility with older versions of file.\n\n     --extension\n\t     Print a slash-separated list of valid extensions for the file\n\t     type found.\n\n     -F, --separator separator\n\t     Use the specified string as the separator between the filename\n\t     and the file result returned.  Defaults to ‘:’.\n\n     -f, --files-from namefile\n\t     Read the names of the files to be examined from namefile (one per\n\t     line) before the argument list.  Either namefile or at least one\n\t     filename argument must be present; to test the standard input,\n\t     use ‘-’ as a filename argument.  Please note that namefile is\n\t     unwrapped and the enclosed filenames are processed when this\n\t     option is encountered and before any further options processing\n\t     is done.  This allows one to process multiple lists of files with\n\t     different command line arguments on the same file invocation.\n\t     Thus if you want to set the delimiter, you need to do it before\n\t     you specify the list of files, like: “-F @ -f namefile”, instead\n\t     of: “-f namefile -F @”.\n\n     -h, --no-dereference\n\t     This option causes symlinks not to be followed (on systems that\n\t     support symbolic links).\n\n     -i      If the file is a regular file, do not classify its contents.\n\n     -I, --mime\n\t     Causes the file command to output mime type strings rather than\n\t     the more traditional human readable ones.\tThus it may say\n\t     ‘text/plain; charset=us-ascii’ rather than “ASCII text”.\n\n     --mime-type, --mime-encoding\n\t     Like -I, but print only the specified element(s).\n\n     -k, --keep-going\n\t     Don't stop at the first match, keep going.  Subsequent matches\n\t     will be have the string ‘\\012- ’ prepended.  (If you want a\n\t     newline, see the -r option.)  The magic pattern with the highest\n\t     strength (see the -l option) comes first.\n\n     -l, --list\n\t     Shows a list of patterns and their strength sorted descending by\n\t     magic(5) strength which is used for the matching (see also the -k\n\t     option).\n\n     -L, --dereference\n\t     This option causes symlinks to be followed, as the like-named\n\t     option in ls(1) (on systems that support symbolic links).\tThis\n\t     is the default behavior.\n\n     -m, --magic-file magicfiles\n\t     Specify an alternate list of files and directories containing\n\t     magic.  This can be a single item, or a colon-separated list.  If\n\t     a compiled magic file is found alongside a file or directory, it\n\t     will be used instead.\n\n     -M magicfiles\n\t     Like -m, except that the default rules are not applied unless -d\n\t     is specified.\n\n     -n, --no-buffer\n\t     Force stdout to be flushed after checking each file.  This is\n\t     only useful if checking a list of files.  It is intended to be\n\t     used by programs that want filetype output from a pipe.\n\n     -p, --preserve-date\n\t     On systems that support utime(3) or utimes(2), attempt to\n\t     preserve the access time of files analyzed, to pretend that file\n\t     never read them.\n\n     -P, --parameter name=value\n\t     Set various parameter limits.\n\n\t\t   Name \tDefault    Explanation\n\t\t   bytes\t1048576    max number of bytes to read from\n\t\t\t\t\t   file\n\t\t   elf_notes\t256\t   max ELF notes processed\n\t\t   elf_phnum\t2048\t   max ELF program sections processed\n\t\t   elf_shnum\t32768\t   max ELF sections processed\n\t\t   encoding\t65536\t   max number of bytes to scan for\n\t\t\t\t\t   encoding evaluation\n\t\t   indir\t50\t   recursion limit for indirect magic\n\t\t   name \t60\t   use count limit for name/use magic\n\t\t   regex\t8192\t   length limit for regex searches\n\n     -r, --raw\n\t     No operation, included for historical compatibility.\n\n     -s, --special-files\n\t     Normally, file only attempts to read and determine the type of\n\t     argument files which stat(2) reports are ordinary files.  This\n\t     prevents problems, because reading special files may have\n\t     peculiar consequences.  Specifying the -s option causes file to\n\t     also read argument files which are block or character special\n\t     files.  This is useful for determining the filesystem types of\n\t     the data in raw disk partitions, which are block special files.\n\t     This option also causes file to disregard the file size as\n\t     reported by stat(2) since on some systems it reports a zero size\n\t     for raw disk partitions.\n\n     -v, --version\n\t     Print the version of the program and exit.\n\n     -z, --uncompress\n\t     Try to look inside compressed files.\n\n     -Z, --uncompress-noreport\n\t     Try to look inside compressed files, but report information about\n\t     the contents only not the compression.\n\n     -0, --print0\n\t     Output a null character ‘\\0’ after the end of the filename.  Nice\n\t     to cut(1) the output.  This does not affect the separator, which\n\t     is still printed.\n\n     --help  Print a help message and exit.\n",
        "     /usr/share/file/magic.mgc\tDefault compiled list of magic.\n     /usr/share/file/magic\tDirectory containing default magic files.\n",
        "     The environment variable MAGIC can be used to set the default magic file\n     name.  file adds “.mgc” to the value of this variable as appropriate.\n     However, file has to exist in order for file.mime to be considered.\n",
        "     In legacy mode, the -D, -I, and -M options do not exist.\n\n     The -d, -i, and -r options behave differently.  The -d option provides\n     debugging information (same as -D in conformance mode).  The -i option\n     displays mime type information (same as -I in conformance mode).  The -r\n     option will disable the translation of unprintable characters (by\n     default, this translation is already disabled in conformance mode).\n\n     Furthermore, the -h option becomes the default symlink behavior (don't\n     follow symlinks) unless POSIXLY_CORRECT is set.\n\n     For more information about legacy mode, see compat(5).\n",
        "     hexdump(1), od(1), strings(1), magic(5), otool(1), compat(5)\n",
        "     This program conforms to Version 3 of the Single UNIX Specification\n     (“SUSv3”).  Its behavior is mostly compatible with the System V program\n     of the same name.\tThis version knows more magic, however, so it will\n     produce different (albeit more accurate) output in many cases.\n\n     The one significant difference between this version and System V is that\n     this version treats any white space as a delimiter, so that spaces in\n     pattern strings must be escaped.  For example,\n\n\t   >10\t   string  language impress\t   (imPRESS data)\n\n     in an existing magic file would have to be changed to\n\n\t   >10\t   string  language\\ impress\t   (imPRESS data)\n\n     In addition, in this version, if a pattern string contains a backslash,\n     it must be escaped.  For example\n\n\t   0\t   string\t   \\begindata\t   Andrew Toolkit document\n\n     in an existing magic file would have to be changed to\n\n\t   0\t   string\t   \\\\begindata\t   Andrew Toolkit document\n\n     SunOS releases 3.2 and later from Sun Microsystems include a file command\n     derived from the System V one, but with some extensions.  This version\n     differs from Sun's only in minor ways.  It includes the extension of the\n     ‘&’ operator, used as, for example,\n\n\t   >16\t   long&0x7fffffff >0\t\t   not stripped\n",
        "     The magic file entries have been collected from various sources, mainly\n     USENET, and contributed by various authors.  Christos Zoulas (address\n     below) will collect additional or corrected magic file entries.  A\n     consolidation of magic file entries will be distributed periodically.\n\n     The order of entries in the magic file is significant.  Depending on what\n     system you are using, the order that they are put together may be\n     incorrect.  If your old file command uses a magic file, keep the old\n     magic file around for comparison purposes (rename it to\n     /usr/share/file/magic.orig).\n",
        "\t   $ file file.c file /dev/{wd0a,hda}\n\t   file.c:   C program text\n\t   file:     ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV),\n\t\t     dynamically linked (uses shared libs), stripped\n\t   /dev/wd0a: block special (0/0)\n\t   /dev/hda: block special (3/0)\n\n\t   $ file -s /dev/wd0{b,d}\n\t   /dev/wd0b: data\n\t   /dev/wd0d: x86 boot sector\n\n\t   $ file -s /dev/hda{,1,2,3,4,5,6,7,8,9,10}\n\t   /dev/hda:   x86 boot sector\n\t   /dev/hda1:  Linux/i386 ext2 filesystem\n\t   /dev/hda2:  x86 boot sector\n\t   /dev/hda3:  x86 boot sector, extended partition table\n\t   /dev/hda4:  Linux/i386 ext2 filesystem\n\t   /dev/hda5:  Linux/i386 swap file\n\t   /dev/hda6:  Linux/i386 swap file\n\t   /dev/hda7:  Linux/i386 swap file\n\t   /dev/hda8:  Linux/i386 swap file\n\t   /dev/hda9:  empty\n\t   /dev/hda10: empty\n\n\t   $ file -i file.c file /dev/{wd0a,hda}\n\t   file.c:\ttext/x-c\n\t   file:\tapplication/x-executable\n\t   /dev/hda:\tapplication/x-not-regular-file\n\t   /dev/wd0a:\tapplication/x-not-regular-file\n\n",
        "     There has been a file command in every UNIX since at least Research\n     Version 4 (man page dated November, 1973).  The System V version\n     introduced one significant major change: the external list of magic\n     types.  This slowed the program down slightly but made it a lot more\n     flexible.\n\n     This program, based on the System V version, was written by Ian Darwin\n     ⟨ian@darwinsys.com⟩ without looking at anybody else's source code.\n\n     John Gilmore revised the code extensively, making it better than the\n     first version.  Geoff Collyer found several inadequacies and provided\n     some magic file entries.  Contributions of the ‘&’ operator by Rob\n     McMahon, ⟨cudcv@warwick.ac.uk⟩, 1989.\n\n     Guy Harris, ⟨guy@netapp.com⟩, made many changes from 1993 to the present.\n\n     Primary development and maintenance from 1990 to the present by Christos\n     Zoulas ⟨christos@astron.com⟩.\n\n     Altered by Chris Lowth ⟨chris@lowth.com⟩, 2000: handle the -I option to\n     output mime type strings, using an alternative magic file and internal\n     logic.\n\n     Altered by Eric Fischer ⟨enf@pobox.com⟩, July, 2000, to identify\n     character codes and attempt to identify the languages of non-ASCII files.\n\n     Altered by Reuben Thomas ⟨rrt@sc3d.org⟩, 2007-2011, to improve MIME\n     support, merge MIME and non-MIME magic, support directories as well as\n     files of magic, apply many bug fixes, update and fix a lot of magic,\n     improve the build system, improve the documentation, and rewrite the\n     Python bindings in pure Python.\n\n     The list of contributors to the ‘magic’ directory (magic files) is too\n     long to include here.  You know who you are; thank you.  Many\n     contributors are listed in the source files.\n",
        "     Copyright (c) Ian F. Darwin, Toronto, Canada, 1986-1999.  Covered by the\n     standard Berkeley Software Distribution copyright; see the file COPYING\n     in the source distribution.\n\n     The files tar.h and is_tar.c were written by John Gilmore from his\n     public-domain tar(1) program, and are not covered by the above license.\n",
        "     file returns 0 on success, and non-zero on error.\n",
        "     Please report bugs and send patches to the bug tracker at\n     https://bugs.astron.com/ or the mailing list at ⟨file@astron.com⟩ (visit\n     https://mailman.astron.com/mailman/listinfo/file first to subscribe).\n",
        "     Fix output so that tests for MIME and APPLE flags are not needed all over\n     the place, and actual output is only done in one place.  This needs a\n     design.  Suggestion: push possible outputs on to a list, then pick the\n     last-pushed (most specific, one hopes) value at the end, or use a default\n     if the list is empty.  This should not slow down evaluation.\n\n     The handling of MAGIC_CONTINUE and printing \\012- between entries is\n     clumsy and complicated; refactor and centralize.\n\n     Some of the encoding logic is hard-coded in encoding.c and can be moved\n     to the magic files if we had a !:charset annotation.\n\n     Continue to squash all magic bugs.  See Debian BTS for a good source.\n\n     Store arbitrarily long strings, for example for %s patterns, so that they\n     can be printed out.  Fixes Debian bug #271672.  This can be done by\n     allocating strings in a string pool, storing the string pool at the end\n     of the magic file and converting all the string pointers to relative\n     offsets from the string pool.\n\n     Add syntax for relative offsets after current level (Debian bug #466037).\n\n     Make file -ki work, i.e. give multiple MIME types.\n\n     Add a zip library so we can peek inside Office2007 documents to print\n     more details about their contents.\n\n     Add an option to print URLs for the sources of the file descriptions.\n\n     Combine script searches and add a way to map executable names to MIME\n     types (e.g. have a magic value for !:mime which causes the resulting\n     string to be looked up in a table).  This would avoid adding the same\n     magic repeatedly for each new hash-bang interpreter.\n\n     When a file descriptor is available, we can skip and adjust the buffer\n     instead of the hacky buffer management we do now.\n\n     Fix “name” and “use” to check for consistency at compile time (duplicate\n     “name”, “use” pointing to undefined “name” ).  Make “name” / “use” more\n     efficient by keeping a sorted list of names.  Special-case ^ to flip\n     endianness in the parser so that it does not have to be escaped, and\n     document it.\n\n     If the offsets specified internally in the file exceed the buffer size (\n     HOWMANY variable in file.h), then we don't seek to that offset, but we\n     give up.  It would be better if buffer managements was done when the file\n     descriptor is available so we can seek around the file.  One must be\n     careful though because this has performance and thus security\n     considerations, because one can slow down things by repeateadly seeking.\n\n     There is support now for keeping separate buffers and having offsets from\n     the end of the file, but the internal buffer management still needs an\n     overhaul.\n",
        "     You can obtain the original author's latest version by anonymous FTP on\n     ftp.astron.com in the directory /pub/file/file-X.YZ.tar.gz.\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "-b",
      "description": ", --brief Do not prepend filenames to output lines (brief mode)."
    },
    {
      "flag": "-C",
      "description": " Write a magic.mgc output file that contains a pre-parsed version of the magic file or directory.",
      "argument": "-m magicfiles",
      "optional": false
    },
    {
      "flag": "-c",
      "description": ", --checking-printout Cause a checking printout of the parsed form of the magic file. This is usually used in conjunction with the -m option to debug a new magic file before installing it."
    },
    {
      "flag": "-d",
      "description": "Apply the default system tests; this is the default behavior unless -M is specified."
    },
    {
      "flag": "-D",
      "description": "Print debugging messages."
    },
    {
      "flag": "-E",
      "description": "On filesystem errors (file not found etc), instead of handling the error as regular output as POSIX mandates and keep going, issue an error message and exit."
    },
    {
      "flag": "--exclude-quiet",
      "description": " Like --exclude but ignore tests that file does not know about. This is intended for compatibility with older versions of file.",
      "optional": true,
      "shortFlag": "-e"
    },
    {
      "flag": "--extension",
      "description": " Print a slash-separated list of valid extensions for the file type found.",
      "optional": true
    },
    {
      "flag": "-F",
      "description": ", --separator separator Use the specified string as the separator between the filename and the file result returned.  Defaults to ‘:’."
    },
    {
      "flag": "-f",
      "description": " Read the names of the files to be examined from namefile (one per line) before the argument list.  Either namefile or at least one filename argument must be present; to test the standard input, use ‘-’ as a filename argument.  Please note that namefile is unwrapped and the enclosed filenames are processed when this option is encountered and before any further options processing is done.  This allows one to process multiple lists of files with different command line arguments on the same file invocation. Thus if you want to set the delimiter, you need to do it before you specify the list of files, like: “-F @ -f namefile”, instead of: “-f namefile -F @”.",
      "optional": true
    },
    {
      "flag": "-h",
      "description": ", --no-dereference This option causes symlinks not to be followed (on systems that support symbolic links)."
    },
    {
      "flag": "-i",
      "description": "If the file is a regular file, do not classify its contents."
    },
    {
      "flag": "--mime-type",
      "description": " Like -I, but print only the specified element(s).",
      "optional": true,
      "shortFlag": "-I"
    },
    {
      "flag": "-k",
      "description": ", --keep-going Don't stop at the first match, keep going.  Subsequent matches will be have the string ‘\\012- ’ prepended.  (If you want a newline, see the -r option.)  The magic pattern with the highest strength (see the -l option) comes first."
    },
    {
      "flag": "-l",
      "description": ", --list Shows a list of patterns and their strength sorted descending by magic(5) strength which is used for the matching (see also the -k option)."
    },
    {
      "flag": "-L",
      "description": ", --dereference This option causes symlinks to be followed, as the like-named option in ls(1) (on systems that support symbolic links).\tThis is the default behavior."
    },
    {
      "flag": "-m",
      "description": " Specify an alternate list of files and directories containing magic.  This can be a single item, or a colon-separated list.  If a compiled magic file is found alongside a file or directory, it will be used instead.",
      "optional": true
    },
    {
      "flag": "-M",
      "description": " Like -m, except that the default rules are not applied unless -d is specified.",
      "optional": true
    },
    {
      "flag": "-n",
      "description": ", --no-buffer Force stdout to be flushed after checking each file.  This is only useful if checking a list of files.  It is intended to be used by programs that want filetype output from a pipe."
    },
    {
      "flag": "-p",
      "description": ", --preserve-date On systems that support utime(3) or utimes(2), attempt to preserve the access time of files analyzed, to pretend that file never read them."
    },
    {
      "flag": "-P",
      "description": " Set various parameter limits. Name \tDefault    Explanation bytes\t1048576    max number of bytes to read from file elf_notes\t256\t   max ELF notes processed elf_phnum\t2048\t   max ELF program sections processed elf_shnum\t32768\t   max ELF sections processed encoding\t65536\t   max number of bytes to scan for encoding evaluation indir\t50\t   recursion limit for indirect magic name \t60\t   use count limit for name/use magic regex\t8192\t   length limit for regex searches",
      "optional": true
    },
    {
      "flag": "-r",
      "description": ", --raw No operation, included for historical compatibility."
    },
    {
      "flag": "-s",
      "description": ", --special-files Normally, file only attempts to read and determine the type of argument files which stat(2) reports are ordinary files.  This prevents problems, because reading special files may have peculiar consequences.  Specifying the -s option causes file to also read argument files which are block or character special files.  This is useful for determining the filesystem types of the data in raw disk partitions, which are block special files. This option also causes file to disregard the file size as reported by stat(2) since on some systems it reports a zero size for raw disk partitions."
    },
    {
      "flag": "-v",
      "description": ", --version Print the version of the program and exit."
    },
    {
      "flag": "-z",
      "description": ", --uncompress Try to look inside compressed files."
    },
    {
      "flag": "-Z",
      "description": ", --uncompress-noreport Try to look inside compressed files, but report information about the contents only not the compression."
    },
    {
      "flag": "--help",
      "description": "",
      "optional": true,
      "shortFlag": "-0"
    }
  ],
  "examples": [],
  "relatedCommands": [
    "ls",
    "utime",
    "utimes",
    "stat",
    "cut",
    "determine",
    "type",
    "exclude-quiet",
    "extension",
    "mime-encoding",
    "mime-type",
    "namefile",
    "magicfiles",
    "name",
    "value"
  ],
  "seeAlso": [
    {
      "name": "ls",
      "section": 1
    },
    {
      "name": "utime",
      "section": 3
    },
    {
      "name": "utimes",
      "section": 2
    },
    {
      "name": "stat",
      "section": 2
    },
    {
      "name": "stat",
      "section": 2
    },
    {
      "name": "cut",
      "section": 1
    }
  ],
  "metadata": {
    "author": ".  Christos Zoulas (address"
  },
  "searchContent": "file file manual page this manual page documents version 5 file -bcddhiiklnnprsvz --exclude-quiet --extension --mime-encoding --mime-type -f namefile -m magicfiles -p name value -m magicfiles file file -c -m magicfiles file --help file manual page documents version -b --brief do not prepend filenames to output lines brief mode -c write a magic mgc output file that contains a pre-parsed version of the magic file or directory -c --checking-printout cause a checking printout of the parsed form of the magic file this is usually used in conjunction with the -m option to debug a new magic file before installing it -d apply the default system tests this is the default behavior unless -m is specified -d print debugging messages -e on filesystem errors file not found etc instead of handling the error as regular output as posix mandates and keep going issue an error message and exit --exclude-quiet like --exclude but ignore tests that file does not know about this is intended for compatibility with older versions of file --extension print a slash-separated list of valid extensions for the file type found -f --separator separator use the specified string as the separator between the filename and the file result returned defaults to -f read the names of the files to be examined from namefile one per line before the argument list either namefile or at least one filename argument must be present to test the standard input use - as a filename argument please note that namefile is unwrapped and the enclosed filenames are processed when this option is encountered and before any further options processing is done this allows one to process multiple lists of files with different command line arguments on the same file invocation thus if you want to set the delimiter you need to do it before you specify the list of files like -f -f namefile instead of -f namefile -f -h --no-dereference this option causes symlinks not to be followed on systems that support symbolic links -i if the file is a regular file do not classify its contents --mime-type like -i but print only the specified element s -k --keep-going don t stop at the first match keep going subsequent matches will be have the string 012- prepended if you want a newline see the -r option the magic pattern with the highest strength see the -l option comes first -l --list shows a list of patterns and their strength sorted descending by magic 5 strength which is used for the matching see also the -k option -l --dereference this option causes symlinks to be followed as the like-named option in ls 1 on systems that support symbolic links this is the default behavior -m specify an alternate list of files and directories containing magic this can be a single item or a colon-separated list if a compiled magic file is found alongside a file or directory it will be used instead -m like -m except that the default rules are not applied unless -d is specified -n --no-buffer force stdout to be flushed after checking each file this is only useful if checking a list of files it is intended to be used by programs that want filetype output from a pipe -p --preserve-date on systems that support utime 3 or utimes 2 attempt to preserve the access time of files analyzed to pretend that file never read them -p set various parameter limits name default explanation bytes 1048576 max number of bytes to read from file elf notes 256 max elf notes processed elf phnum 2048 max elf program sections processed elf shnum 32768 max elf sections processed encoding 65536 max number of bytes to scan for encoding evaluation indir 50 recursion limit for indirect magic name 60 use count limit for name use magic regex 8192 length limit for regex searches -r --raw no operation included for historical compatibility -s --special-files normally file only attempts to read and determine the type of argument files which stat 2 reports are ordinary files this prevents problems because reading special files may have peculiar consequences specifying the -s option causes file to also read argument files which are block or character special files this is useful for determining the filesystem types of the data in raw disk partitions which are block special files this option also causes file to disregard the file size as reported by stat 2 since on some systems it reports a zero size for raw disk partitions -v --version print the version of the program and exit -z --uncompress try to look inside compressed files -z --uncompress-noreport try to look inside compressed files but report information about the contents only not the compression --help name macos 15 5 february 5 2021 macos 15 5",
  "keywords": [
    "file",
    "manual",
    "page",
    "documents",
    "version"
  ],
  "complexity": "advanced",
  "hash": "76b9ce482719eaf6",
  "parsedAt": "2025-06-17T19:41:58.047Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": false,
  "hasDiagrams": false
}