{
  "name": "sudo",
  "section": 8,
  "title": "sudo manual page",
  "description": "sudo allows a permitted user to execute a command as the superuser or another user, as specified by the security policy.",
  "synopsis": "sudo -h | -K | -k | -V sudo -v [-ABkNnS] [-g group] [-h host] [-p prompt] [-u user] sudo -l [-ABkNnS] [-g group] [-h host] [-p prompt] [-U user] [-u user] [command [arg_...]] sudo [-ABbEHnPS] [-C num] [-D directory] [-g group] [-h host] [-p prompt] [-R directory] [-T timeout] [-u user] [VAR=value] [-i | -s] [command [arg_...]] sudoedit [-ABkNnS] [-C num] [-D directory] [-g group] [-h host] [-p prompt] [-R directory] [-T timeout] [-u user] file_...",
  "category": "System Administration",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "[-p prompt] [-R directory] [-T timeout] [-u user] file_...",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "       sudo, sudoedit - execute a command as another user\n",
        "       sudo -h | -K | -k | -V\n       sudo -v [-ABkNnS] [-g group] [-h host] [-p prompt] [-u user]\n       sudo -l [-ABkNnS] [-g group] [-h host] [-p prompt] [-U user] [-u user]\n\t    [command [arg_...]]\n       sudo [-ABbEHnPS] [-C num] [-D directory] [-g group] [-h host]\n\t    [-p prompt] [-R directory] [-T timeout] [-u user] [VAR=value]\n\t    [-i | -s] [command [arg_...]]\n       sudoedit [-ABkNnS] [-C num] [-D directory] [-g group] [-h host]"
      ]
    },
    {
      "id": "description",
      "title": "DESCRIPTION",
      "content": "SUDO_EDITOR is not set.",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "       sudo allows a permitted user to execute a command as the superuser or\n       another user, as specified by the security policy.  The invoking user's\n       real (not effective) user-ID is used to determine the user name with\n       which to query the security policy.\n\n       sudo supports a plugin architecture for security policies, auditing,\n       and input/output logging.  Third parties can develop and distribute\n       their own plugins to work seamlessly with the sudo front-end.  The\n       default security policy is sudoers, which is configured via the file\n       /private/etc/sudoers, or via LDAP.  See the Plugins section for more\n       information.\n\n       The security policy determines what privileges, if any, a user has to\n       run sudo.  The policy may require that users authenticate themselves\n       with a password or another authentication mechanism.  If authentication\n       is required, sudo will exit if the user's password is not entered\n       within a configurable time limit.  This limit is policy-specific; the\n       default password prompt timeout for the sudoers security policy is 0\n       minutes.\n\n       Security policies may support credential caching to allow the user to\n       run sudo again for a period of time without requiring authentication.\n       By default, the sudoers policy caches credentials on a per-terminal\n       basis for 5 minutes.  See the timestamp_type and timestamp_timeout\n       options in sudoers(5) for more information.  By running sudo with the\n       -v option, a user can update the cached credentials without running a\n       command.\n\n       On systems where sudo is the primary method of gaining superuser\n       privileges, it is imperative to avoid syntax errors in the security\n       policy configuration files.  For the default security policy,\n       sudoers(5), changes to the configuration files should be made using the\n       visudo(8) utility which will ensure that no syntax errors are\n       introduced.\n\n       When invoked as sudoedit, the -e option (described below), is implied.\n\n       Security policies and audit plugins may log successful and failed\n       attempts to run sudo.  If an I/O plugin is configured, the running\n       command's input and output may be logged as well.\n\n       The options are as follows:\n\n       -A, --askpass\n\t       Normally, if sudo requires a password, it will read it from the\n\t       user's terminal.  If the -A (askpass) option is specified, a\n\t       (possibly graphical) helper program is executed to read the\n\t       user's password and output the password to the standard output.\n\t       If the SUDO_ASKPASS environment variable is set, it specifies\n\t       the path to the helper program.\tOtherwise, if sudo.conf(5)\n\t       contains a line specifying the askpass program, that value will\n\t       be used.  For example:\n\n\t\t   # Path to askpass helper program\n\t\t   Path askpass /usr/X11R6/bin/ssh-askpass\n\n\t       If no askpass program is available, sudo will exit with an\n\t       error.\n\n       -a type, --auth-type=type\n\t       Use the specified BSD authentication type when validating the\n\t       user, if allowed by /etc/login.conf.  The system administrator\n\t       may specify a list of sudo-specific authentication methods by\n\t       adding an “auth-sudo” entry in /etc/login.conf.\tThis option is\n\t       only available on systems that support BSD authentication.\n\n       -B, --bell\n\t       Ring the bell as part of the password prompt when a terminal is\n\t       present.  This option has no effect if an askpass program is\n\t       used.\n\n       -b, --background\n\t       Run the given command in the background.  It is not possible to\n\t       use shell job control to manipulate background processes\n\t       started by sudo.  Most interactive commands will fail to work\n\t       properly in background mode.\n\n       -C num, --close-from=num\n\t       Close all file descriptors greater than or equal to num before\n\t       executing a command.  Values less than three are not permitted.\n\t       By default, sudo will close all open file descriptors other\n\t       than standard input, standard output, and standard error when\n\t       executing a command.  The security policy may restrict the\n\t       user's ability to use this option.  The sudoers policy only\n\t       permits use of the -C option when the administrator has enabled\n\t       the closefrom_override option.\n\n       -c class, --login-class=class\n\t       Run the command with resource limits and scheduling priority of\n\t       the specified login class.  The class argument can be either a\n\t       class name as defined in /etc/login.conf, or a single ‘-’\n\t       character.  If class is -, the default login class of the\n\t       target user will be used.  Otherwise, the command must be run\n\t       as the superuser (user-ID 0), or sudo must be run from a shell\n\t       that is already running as the superuser.  If the command is\n\t       being run as a login shell, additional /etc/login.conf\n\t       settings, such as the umask and environment variables, will be\n\t       applied, if present.  This option is only available on systems\n\t       with BSD login classes.\n\n       -D directory, --chdir=directory\n\t       Run the command in the specified directory instead of the\n\t       current working directory.  The security policy may return an\n\t       error if the user does not have permission to specify the\n\t       working directory.\n\n       -E, --preserve-env\n\t       Indicates to the security policy that the user wishes to\n\t       preserve their existing environment variables.  The security\n\t       policy may return an error if the user does not have permission\n\t       to preserve the environment.\n\n       --preserve-env=list\n\t       Indicates to the security policy that the user wishes to add\n\t       the comma-separated list of environment variables to those\n\t       preserved from the user's environment.  The security policy may\n\t       return an error if the user does not have permission to\n\t       preserve the environment.  This option may be specified\n\t       multiple times.\n\n       -e, --edit\n\t       Edit one or more files instead of running a command.  In lieu\n\t       of a path name, the string \"sudoedit\" is used when consulting\n\t       the security policy.  If the user is authorized by the policy,\n\t       the following steps are taken:\n\n\t\t   1.\tTemporary copies are made of the files to be edited",
        "\t\t   2.\tThe editor specified by the policy is run to edit the",
        "\t\t   3.\tIf they have been modified, the temporary files are",
        "\t       To help prevent the editing of unauthorized files, the\n\t       following restrictions are enforced unless explicitly allowed\n\t       by the security policy:\n",
        "\t\t\t   and higher).\n",
        "\t\t\t   followed when the parent directory is writable by\n\t\t\t   the invoking user unless that user is root (version\n\t\t\t   1.8.16 and higher).\n",
        "\t\t\t   the invoking user may not be edited unless that\n\t\t\t   user is root (version 1.8.16 and higher).\n\n\t       Users are never allowed to edit device special files.\n\n\t       If the specified file does not exist, it will be created.\n\t       Unlike most commands run by sudo, the editor is run with the\n\t       invoking user's environment unmodified.\tIf the temporary file\n\t       becomes empty after editing, the user will be prompted before\n\t       it is installed.  If, for some reason, sudo is unable to update\n\t       a file with its edited version, the user will receive a warning\n\t       and the edited copy will remain in a temporary file.\n\n       -g group, --group=group\n\t       Run the command with the primary group set to group instead of\n\t       the primary group specified by the target user's password\n\t       database entry.\tThe group may be either a group name or a\n\t       numeric group-ID (GID) prefixed with the ‘#’ character (e.g.,\n\t       ‘#0’ for GID 0).  When running a command as a GID, many shells\n\t       require that the ‘#’ be escaped with a backslash (‘\\’).\tIf no\n\t       -u option is specified, the command will be run as the invoking\n\t       user.  In either case, the primary group will be set to group.\n\t       The sudoers policy permits any of the target user's groups to\n\t       be specified via the -g option as long as the -P option is not\n\t       in use.\n\n       -H, --set-home\n\t       Request that the security policy set the HOME environment\n\t       variable to the home directory specified by the target user's\n\t       password database entry.  Depending on the policy, this may be\n\t       the default behavior.\n\n       -h, --help\n\t       Display a short help message to the standard output and exit.\n\n       -h host, --host=host\n\t       Run the command on the specified host if the security policy\n\t       plugin supports remote commands.  The sudoers plugin does not\n\t       currently support running remote commands.  This may also be\n\t       used in conjunction with the -l option to list a user's\n\t       privileges for the remote host.\n\n       -i, --login\n\t       Run the shell specified by the target user's password database\n\t       entry as a login shell.\tThis means that login-specific\n\t       resource files such as .profile, .bash_profile, or .login will\n\t       be read by the shell.  If a command is specified, it is passed\n\t       to the shell as a simple command using the -c option.  The\n\t       command and any args are concatenated, separated by spaces,\n\t       after escaping each character (including white space) with a\n\t       backslash (‘\\’) except for alphanumerics, underscores, hyphens,\n\t       and dollar signs.  If no command is specified, an interactive\n\t       shell is executed.  sudo attempts to change to that user's home\n\t       directory before running the shell.  The command is run with an\n\t       environment similar to the one a user would receive at log in.\n\t       Most shells behave differently when a command is specified as\n\t       compared to an interactive session; consult the shell's manual\n\t       for details.  The Command environment section in the sudoers(5)\n\t       manual documents how the -i option affects the environment in\n\t       which a command is run when the sudoers policy is in use.\n\n       -K, --remove-timestamp\n\t       Similar to the -k option, except that it removes every cached\n\t       credential for the user, regardless of the terminal or parent\n\t       process ID.  The next time sudo is run, a password must be\n\t       entered if the security policy requires authentication.\tIt is\n\t       not possible to use the -K option in conjunction with a command\n\t       or other option.  This option does not require a password.  Not\n\t       all security policies support credential caching.\n\n       -k, --reset-timestamp\n\t       When used without a command, invalidates the user's cached\n\t       credentials for the current session.  The next time sudo is run\n\t       in the session, a password must be entered if the security\n\t       policy requires authentication.\tBy default, the sudoers policy\n\t       uses a separate record in the credential cache for each\n\t       terminal (or parent process ID if no terminal is present).\n\t       This prevents the -k option from interfering with sudo commands\n\t       run in a different terminal session.  See the timestamp_type\n\t       option in sudoers(5) for more information.  This option does\n\t       not require a password, and was added to allow a user to revoke\n\t       sudo permissions from a .logout file.\n\n\t       When used in conjunction with a command or an option that may\n\t       require a password, this option will cause sudo to ignore the\n\t       user's cached credentials.  As a result, sudo will prompt for a\n\t       password (if one is required by the security policy) and will\n\t       not update the user's cached credentials.\n\n\t       Not all security policies support credential caching.\n\n       -l, --list\n\t       If no command is specified, list the privileges for the\n\t       invoking user (or the user specified by the -U option) on the\n\t       current host.  A longer list format is used if this option is\n\t       specified multiple times and the security policy supports a\n\t       verbose output format.\n\n\t       If a command is specified and is permitted by the security\n\t       policy, the fully-qualified path to the command is displayed\n\t       along with any args.  If a command is specified but not allowed\n\t       by the policy, sudo will exit with a status value of 1.\n\n       -N, --no-update\n\t       Do not update the user's cached credentials, even if the user\n\t       successfully authenticates.  Unlike the -k flag, existing\n\t       cached credentials are used if they are valid.  To detect when\n\t       the user's cached credentials are valid (or when no\n\t       authentication is required), the following can be used:\n\t\t     sudo -Nnv\n\n\t       Not all security policies support credential caching.\n\n       -n, --non-interactive\n\t       Avoid prompting the user for input of any kind.\tIf a password\n\t       is required for the command to run, sudo will display an error\n\t       message and exit.\n\n       -P, --preserve-groups\n\t       Preserve the invoking user's group vector unaltered.  By\n\t       default, the sudoers policy will initialize the group vector to\n\t       the list of groups the target user is a member of.  The real\n\t       and effective group-IDs, however, are still set to match the\n\t       target user.\n\n       -p prompt, --prompt=prompt\n\t       Use a custom password prompt with optional escape sequences.\n\t       The following percent (‘%’) escape sequences are supported by\n\t       the sudoers policy:\n\n\t       %H  expanded to the host name including the domain name (only\n\t\t   if the machine's host name is fully qualified or the fqdn\n\t\t   option is set in sudoers(5))\n\n\t       %h  expanded to the local host name without the domain name\n\n\t       %p  expanded to the name of the user whose password is being\n\t\t   requested (respects the rootpw, targetpw, and runaspw flags\n\t\t   in sudoers(5))\n\n\t       %U  expanded to the login name of the user the command will be\n\t\t   run as (defaults to root unless the -u option is also\n\t\t   specified)\n\n\t       %u  expanded to the invoking user's login name\n\n\t       %%  two consecutive ‘%’ characters are collapsed into a single\n\t\t   ‘%’ character\n\n\t       The custom prompt will override the default prompt specified by\n\t       either the security policy or the SUDO_PROMPT environment\n\t       variable.  On systems that use PAM, the custom prompt will also\n\t       override the prompt specified by a PAM module unless the\n\t       passprompt_override flag is disabled in sudoers.\n\n       -R directory, --chroot=directory\n\t       Change to the specified root directory (see chroot(8)) before\n\t       running the command.  The security policy may return an error\n\t       if the user does not have permission to specify the root\n\t       directory.\n\n       -r role, --role=role\n\t       Run the command with an SELinux security context that includes\n\t       the specified role.\n\n       -S, --stdin\n\t       Write the prompt to the standard error and read the password\n\t       from the standard input instead of using the terminal device.\n\n       -s, --shell\n\t       Run the shell specified by the SHELL environment variable if it\n\t       is set or the shell specified by the invoking user's password\n\t       database entry.\tIf a command is specified, it is passed to the\n\t       shell as a simple command using the -c option.  The command and\n\t       any args are concatenated, separated by spaces, after escaping\n\t       each character (including white space) with a backslash (‘\\’)\n\t       except for alphanumerics, underscores, hyphens, and dollar\n\t       signs.  If no command is specified, an interactive shell is\n\t       executed.  Most shells behave differently when a command is\n\t       specified as compared to an interactive session; consult the\n\t       shell's manual for details.\n\n       -t type, --type=type\n\t       Run the command with an SELinux security context that includes\n\t       the specified type.  If no type is specified, the default type\n\t       is derived from the role.\n\n       -U user, --other-user=user\n\t       Used in conjunction with the -l option to list the privileges\n\t       for user instead of for the invoking user.  The security policy\n\t       may restrict listing other users' privileges.  When using the\n\t       sudoers policy, the -U option is restricted to the root user\n\t       and users with either the “list” priviege for the specified\n\t       user or the ability to run any command as root or user on the\n\t       current host.\n\n       -T timeout, --command-timeout=timeout\n\t       Used to set a timeout for the command.  If the timeout expires\n\t       before the command has exited, the command will be terminated.\n\t       The security policy may restrict the user's ability to set\n\t       timeouts.  The sudoers policy requires that user-specified\n\t       timeouts be explicitly enabled.\n\n       -u user, --user=user\n\t       Run the command as a user other than the default target user\n\t       (usually root).\tThe user may be either a user name or a\n\t       numeric user-ID (UID) prefixed with the ‘#’ character (e.g.,\n\t       ‘#0’ for UID 0).  When running commands as a UID, many shells\n\t       require that the ‘#’ be escaped with a backslash (‘\\’).\tSome\n\t       security policies may restrict UIDs to those listed in the\n\t       password database.  The sudoers policy allows UIDs that are not\n\t       in the password database as long as the targetpw option is not\n\t       set.  Other security policies may not support this.\n\n       -V, --version\n\t       Print the sudo version string as well as the version string of\n\t       any configured plugins.\tIf the invoking user is already root,\n\t       the -V option will display the options passed to configure when\n\t       sudo was built; plugins may display additional information such\n\t       as default options.\n\n       -v, --validate\n\t       Update the user's cached credentials, authenticating the user\n\t       if necessary.  For the sudoers plugin, this extends the sudo\n\t       timeout for another 5 minutes by default, but does not run a\n\t       command.  Not all security policies support cached credentials.\n\n       --      The -- is used to delimit the end of the sudo options.\n\t       Subsequent options are passed to the command.\n\n       Options that take a value may only be specified once unless otherwise\n       indicated in the description.  This is to help guard against problems\n       caused by poorly written scripts that invoke sudo with user-controlled\n       input.\n\n       Environment variables to be set for the command may also be passed as\n       options to sudo in the form VAR=value, for example\n       LD_LIBRARY_PATH=/usr/local/pkg/lib.  Environment variables may be\n       subject to restrictions imposed by the security policy plugin.  The\n       sudoers policy subjects environment variables passed as options to the\n       same restrictions as existing environment variables with one important\n       difference.  If the setenv option is set in sudoers, the command to be\n       run has the SETENV tag set or the command matched is ALL, the user may\n       set variables that would otherwise be forbidden.  See sudoers(5) for\n       more information.\n",
        "       When sudo executes a command, the security policy specifies the\n       execution environment for the command.  Typically, the real and\n       effective user and group and IDs are set to match those of the target\n       user, as specified in the password database, and the group vector is\n       initialized based on the group database (unless the -P option was\n       specified).\n\n       The following parameters may be specified by security policy:\n\n       •  real and effective user-ID\n\n       •  real and effective group-ID\n\n       •  supplementary group-IDs\n\n       •  the environment list\n\n       •  current working directory\n\n       •  file creation mode mask (umask)\n\n       •  scheduling priority (aka nice value)\n",
        "       There are two distinct ways sudo can run a command.\n\n       If an I/O logging plugin is configured to log terminal I/O, or if the\n       security policy explicitly requests it, a new pseudo-terminal (“pty”)\n       is allocated and fork(2) is used to create a second sudo process,\n       referred to as the monitor.  The monitor creates a new terminal session\n       with itself as the leader and the pty as its controlling terminal,\n       calls fork(2) again, sets up the execution environment as described\n       above, and then uses the execve(2) system call to run the command in\n       the child process.  The monitor exists to relay job control signals\n       between the user's terminal and the pty the command is being run in.\n       This makes it possible to suspend and resume the command normally.\n       Without the monitor, the command would be in what POSIX terms an\n       “orphaned process group” and it would not receive any job control\n       signals from the kernel.  When the command exits or is terminated by a\n       signal, the monitor passes the command's exit status to the main sudo\n       process and exits.  After receiving the command's exit status, the main\n       sudo process passes the command's exit status to the security policy's\n       close function, as well as the close function of any configured audit\n       plugin, and exits.\n\n       If no pty is used, sudo calls fork(2), sets up the execution\n       environment as described above, and uses the execve(2) system call to\n       run the command in the child process.  The main sudo process waits\n       until the command has completed, then passes the command's exit status\n       to the security policy's close function, as well as the close function\n       of any configured audit plugins, and exits.  As a special case, if the\n       policy plugin does not define a close function, sudo will execute the\n       command directly instead of calling fork(2) first.  The sudoers policy\n       plugin will only define a close function when I/O logging is enabled, a\n       pty is required, an SELinux role is specified, the command has an\n       associated timeout, or the pam_session or pam_setcred options are\n       enabled.  Both pam_session and pam_setcred are enabled by default on\n       systems using PAM.\n\n       On systems that use PAM, the security policy's close function is\n       responsible for closing the PAM session.  It may also log the command's\n       exit status.\n",
        "       When the command is run as a child of the sudo process, sudo will relay\n       signals it receives to the command.  The SIGINT and SIGQUIT signals are\n       only relayed when the command is being run in a new pty or when the\n       signal was sent by a user process, not the kernel.  This prevents the\n       command from receiving SIGINT twice each time the user enters control-\n       C.  Some signals, such as SIGSTOP and SIGKILL, cannot be caught and\n       thus will not be relayed to the command.  As a general rule, SIGTSTP\n       should be used instead of SIGSTOP when you wish to suspend a command\n       being run by sudo.\n\n       As a special case, sudo will not relay signals that were sent by the\n       command it is running.  This prevents the command from accidentally\n       killing itself.\tOn some systems, the reboot(8) utility sends SIGTERM\n       to all non-system processes other than itself before rebooting the\n       system.\tThis prevents sudo from relaying the SIGTERM signal it\n       received back to reboot(8), which might then exit before the system was\n       actually rebooted, leaving it in a half-dead state similar to single\n       user mode.  Note, however, that this check only applies to the command\n       run by sudo and not any other processes that the command may create.\n       As a result, running a script that calls reboot(8) or shutdown(8) via\n       sudo may cause the system to end up in this undefined state unless the\n       reboot(8) or shutdown(8) are run using the exec() family of functions\n       instead of system() (which interposes a shell between the command and\n       the calling process).\n",
        "       Plugins may be specified via Plugin directives in the sudo.conf(5)\n       file.  They may be loaded as dynamic shared objects (on systems that\n       support them), or compiled directly into the sudo binary.  If no\n       sudo.conf(5) file is present, or if it doesn't contain any Plugin\n       lines, sudo will use sudoers(5) for the policy, auditing, and I/O\n       logging plugins.  See the sudo.conf(5) manual for details of the\n       /private/etc/sudo.conf file and the sudo_plugin(5) manual for more\n       information about the sudo plugin architecture.\n",
        "       Upon successful execution of a command, the exit status from sudo will\n       be the exit status of the program that was executed.  If the command\n       terminated due to receipt of a signal, sudo will send itself the same\n       signal that terminated the command.\n\n       If the -l option was specified without a command, sudo will exit with a\n       value of 0 if the user is allowed to run sudo and they authenticated\n       successfully (as required by the security policy).  If a command is\n       specified with the -l option, the exit value will only be 0 if the\n       command is permitted by the security policy, otherwise it will be 1.\n\n       If there is an authentication failure, a configuration/permission\n       problem, or if the given command cannot be executed, sudo exits with a\n       value of 1.  In the latter case, the error string is printed to the\n       standard error.\tIf sudo cannot stat(2) one or more entries in the\n       user's PATH, an error is printed to the standard error.\t(If the\n       directory does not exist or if it is not really a directory, the entry\n       is ignored and no error is printed.)  This should not happen under\n       normal circumstances.  The most common reason for stat(2) to return\n       “permission denied” is if you are running an automounter and one of the\n       directories in your PATH is on a machine that is currently unreachable.\n",
        "       sudo tries to be safe when executing external commands.\n\n       To prevent command spoofing, sudo checks \".\" and \"\" (both denoting\n       current directory) last when searching for a command in the user's PATH\n       (if one or both are in the PATH).  Depending on the security policy,\n       the user's PATH environment variable may be modified, replaced, or\n       passed unchanged to the program that sudo executes.\n\n       Users should never be granted sudo privileges to execute files that are\n       writable by the user or that reside in a directory that is writable by\n       the user.  If the user can modify or replace the command there is no\n       way to limit what additional commands they can run.\n\n       By default, sudo will only log the command it explicitly runs.  If a\n       user runs a command such as ‘sudo su’ or ‘sudo sh’, subsequent commands\n       run from that shell are not subject to sudo's security policy.  The\n       same is true for commands that offer shell escapes (including most\n       editors).  If I/O logging is enabled, subsequent commands will have\n       their input and/or output logged, but there will not be traditional\n       logs for those commands.  Because of this, care must be taken when\n       giving users access to commands via sudo to verify that the command\n       does not inadvertently give the user an effective root shell.  For\n       information on ways to address this, see the Preventing shell escapes\n       section in sudoers(5).\n\n       To prevent the disclosure of potentially sensitive information, sudo\n       disables core dumps by default while it is executing (they are re-\n       enabled for the command that is run).  This historical practice dates\n       from a time when most operating systems allowed set-user-ID processes\n       to dump core by default.  To aid in debugging sudo crashes, you may\n       wish to re-enable core dumps by setting “disable_coredump” to false in\n       the sudo.conf(5) file as follows:\n\n\t   Set disable_coredump false\n\n       See the sudo.conf(5) manual for more information.\n",
        "       sudo utilizes the following environment variables.  The security policy\n       has control over the actual content of the command's environment.\n\n       EDITOR\t\tDefault editor to use in -e (sudoedit) mode if neither",
        "       MAIL\t\tSet to the mail spool of the target user when the -i",
        "       HOME\t\tSet to the home directory of the target user when the",
        "       LOGNAME\t\tSet to the login name of the target user when the -i",
        "       PATH\t\tMay be overridden by the security policy.\n\n       SHELL\t\tUsed to determine shell to run with -s option.\n\n       SUDO_ASKPASS\tSpecifies the path to a helper program used to read",
        "       SUDO_COMMAND\tSet to the command run by sudo, including any args.",
        "       SUDO_EDITOR\tDefault editor to use in -e (sudoedit) mode.\n\n       SUDO_GID \tSet to the group-ID of the user who invoked sudo.\n\n       SUDO_PROMPT\tUsed as the default password prompt unless the -p",
        "       SUDO_PS1 \tIf set, PS1 will be set to its value for the program",
        "       SUDO_UID \tSet to the user-ID of the user who invoked sudo.\n\n       SUDO_USER\tSet to the login name of the user who invoked sudo.\n\n       USER\t\tSet to the same value as LOGNAME, described above.\n\n       VISUAL\t\tDefault editor to use in -e (sudoedit) mode if"
      ]
    },
    {
      "id": "files",
      "title": "FILES",
      "content": "Sudo 1.9.13p2\t\t       January 16, 2023 \t\t       SUDO(8)",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "       /private/etc/sudo.conf\t sudo front-end configuration\n",
        "       The following examples assume a properly configured security policy.\n\n       To get a file listing of an unreadable directory:\n\n\t   $ sudo ls /usr/local/protected\n\n       To list the home directory of user yaz on a machine where the file\n       system holding ~yaz is not exported as root:\n\n\t   $ sudo -u yaz ls ~yaz\n\n       To edit the index.html file as user www:\n\n\t   $ sudoedit -u www ~www/htdocs/index.html\n\n       To view system logs only accessible to root and users in the adm group:\n\n\t   $ sudo -g adm more /var/log/syslog\n\n       To run an editor as jim with a different primary group:\n\n\t   $ sudoedit -u jim -g audio ~jim/sound.txt\n\n       To shut down a machine:\n\n\t   $ sudo shutdown -r +15 \"quick reboot\"\n\n       To make a usage listing of the directories in the /home partition.  The\n       commands are run in a sub-shell to allow the ‘cd’ command and file\n       redirection to work.\n\n\t   $ sudo sh -c \"cd /home ; du -s * | sort -rn > USAGE\"\n",
        "       Error messages produced by sudo include:\n\n       editing files in a writable directory is not permitted\n\t     By default, sudoedit does not permit editing a file when any of\n\t     the parent directories are writable by the invoking user.\tThis\n\t     avoids a race condition that could allow the user to overwrite an\n\t     arbitrary file.  See the sudoedit_checkdir option in sudoers(5)\n\t     for more information.\n\n       editing symbolic links is not permitted\n\t     By default, sudoedit does not follow symbolic links when opening\n\t     files.  See the sudoedit_follow option in sudoers(5) for more\n\t     information.\n\n       effective uid is not 0, is sudo installed setuid root?\n\t     sudo was not run with root privileges.  The sudo binary must be\n\t     owned by the root user and have the set-user-ID bit set.  Also,\n\t     it must not be located on a file system mounted with the ‘nosuid’\n\t     option or on an NFS file system that maps uid 0 to an\n\t     unprivileged uid.\n\n       effective uid is not 0, is sudo on a file system with the 'nosuid'\n       option set or an NFS file system without root privileges?\n\t     sudo was not run with root privileges.  The sudo binary has the\n\t     proper owner and permissions but it still did not run with root\n\t     privileges.  The most common reason for this is that the file\n\t     system the sudo binary is located on is mounted with the ‘nosuid’\n\t     option or it is an NFS file system that maps uid 0 to an\n\t     unprivileged uid.\n\n       fatal error, unable to load plugins\n\t     An error occurred while loading or initializing the plugins\n\t     specified in sudo.conf(5).\n\n       invalid environment variable name\n\t     One or more environment variable names specified via the -E\n\t     option contained an equal sign (‘=’).  The arguments to the -E\n\t     option should be environment variable names without an associated\n\t     value.\n\n       no password was provided\n\t     When sudo tried to read the password, it did not receive any\n\t     characters.  This may happen if no terminal is available (or the\n\t     -S option is specified) and the standard input has been\n\t     redirected from /dev/null.\n\n       a terminal is required to read the password\n\t     sudo needs to read the password but there is no mechanism\n\t     available for it to do so.  A terminal is not present to read the\n\t     password from, sudo has not been configured to read from the\n\t     standard input, the -S option was not used, and no askpass helper\n\t     has been specified either via the sudo.conf(5) file or the\n\t     SUDO_ASKPASS environment variable.\n\n       no writable temporary directory found\n\t     sudoedit was unable to find a usable temporary directory in which\n\t     to store its intermediate files.\n\n       The “no new privileges” flag is set, which prevents sudo from running\n       as root.\n\t     sudo was run by a process that has the Linux “no new privileges”\n\t     flag is set.  This causes the set-user-ID bit to be ignored when\n\t     running an executable, which will prevent sudo from functioning.\n\t     The most likely cause for this is running sudo within a container\n\t     that sets this flag.  Check the documentation to see if it is\n\t     possible to configure the container such that the flag is not\n\t     set.\n\n       sudo must be owned by uid 0 and have the setuid bit set\n\t     sudo was not run with root privileges.  The sudo binary does not\n\t     have the correct owner or permissions.  It must be owned by the\n\t     root user and have the set-user-ID bit set.\n\n       sudoedit is not supported on this platform\n\t     It is only possible to run sudoedit on systems that support\n\t     setting the effective user-ID.\n\n       timed out reading password\n\t     The user did not enter a password before the password timeout (5\n\t     minutes by default) expired.\n\n       you do not exist in the passwd database\n\t     Your user-ID does not appear in the system passwd database.\n\n       you may not specify environment variables in edit mode\n\t     It is only possible to specify environment variables when running\n\t     a command.  When editing a file, the editor is run with the\n\t     user's environment unmodified.\n",
        "       su(1), stat(2), login_cap(3), passwd(5), sudo.conf(5), sudo_plugin(5),\n       sudoers(5), sudoers_timestamp(5), sudoreplay(8), visudo(8)\n",
        "       See the HISTORY.md file in the sudo distribution\n       (https://www.sudo.ws/about/history/) for a brief history of sudo.\n",
        "       Many people have worked on sudo over the years; this version consists\n       of code written primarily by:\n\n\t     Todd C. Miller\n\n       See the CONTRIBUTORS.md file in the sudo distribution\n       (https://www.sudo.ws/about/contributors/) for an exhaustive list of\n       people who have contributed to sudo.\n",
        "       There is no easy way to prevent a user from gaining a root shell if\n       that user is allowed to run arbitrary commands via sudo.  Also, many\n       programs (such as editors) allow the user to run commands via shell\n       escapes, thus avoiding sudo's checks.  However, on most systems it is\n       possible to prevent shell escapes with the sudoers(5) plugin's noexec\n       functionality.\n\n       It is not meaningful to run the ‘cd’ command directly via sudo, e.g.,\n\n\t   $ sudo cd /usr/local/protected\n\n       since when the command exits the parent process (your shell) will still\n       be the same.  The -D option can be used to run a command in a specific\n       directory.\n\n       Running shell scripts via sudo can expose the same kernel bugs that\n       make set-user-ID shell scripts unsafe on some operating systems (if\n       your OS has a /dev/fd/ directory, set-user-ID shell scripts are\n       generally safe).\n",
        "       If you believe you have found a bug in sudo, you can submit a bug\n       report at https://bugzilla.sudo.ws/\n",
        "       Limited free support is available via the sudo-users mailing list, see\n       https://www.sudo.ws/mailman/listinfo/sudo-users to subscribe or search\n       the archives.\n",
        "       sudo is provided “AS IS” and any express or implied warranties,\n       including, but not limited to, the implied warranties of\n       merchantability and fitness for a particular purpose are disclaimed.\n       See the LICENSE.md file distributed with sudo or\n       https://www.sudo.ws/about/license/ for complete details.\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "-v",
      "description": " command. On systems where sudo is the primary method of gaining superuser privileges, it is imperative to avoid syntax errors in the security policy configuration files.  For the default security policy, sudoers(5), changes to the configuration files should be made using the visudo(8) utility which will ensure that no syntax errors are introduced. When invoked as sudoedit, the -e option (described below), is implied. Security policies and audit plugins may log successful and failed attempts to run sudo.  If an I/O plugin is configured, the running command's input and output may be logged as well. The options are as follows: Update the user's cached credentials, authenticating the user if necessary.  For the sudoers plugin, this extends the sudo timeout for another 5 minutes by default, but does not run a command.  Not all security policies support cached credentials. --      The -- is used to delimit the end of the sudo options. Subsequent options are passed to the command. Options that take a value may only be specified once unless otherwise indicated in the description.  This is to help guard against problems caused by poorly written scripts that invoke sudo with user-controlled input. Environment variables to be set for the command may also be passed as options to sudo in the form VAR=value, for example LD_LIBRARY_PATH=/usr/local/pkg/lib.  Environment variables may be subject to restrictions imposed by the security policy plugin.  The sudoers policy subjects environment variables passed as options to the same restrictions as existing environment variables with one important difference.  If the setenv option is set in sudoers, the command to be run has the SETENV tag set or the command matched is ALL, the user may set variables that would otherwise be forbidden.  See sudoers(5) for more information. COMMAND EXECUTION When sudo executes a command, the security policy specifies the execution environment for the command.  Typically, the real and effective user and group and IDs are set to match those of the target user, as specified in the password database, and the group vector is initialized based on the group database (unless the -P option was specified). The following parameters may be specified by security policy: •  real and effective user-ID •  real and effective group-ID •  supplementary group-IDs •  the environment list •  current working directory •  file creation mode mask (umask) •  scheduling priority (aka nice value) Process model There are two distinct ways sudo can run a command. If an I/O logging plugin is configured to log terminal I/O, or if the security policy explicitly requests it, a new pseudo-terminal (“pty”) is allocated and fork(2) is used to create a second sudo process, referred to as the monitor.  The monitor creates a new terminal session with itself as the leader and the pty as its controlling terminal, calls fork(2) again, sets up the execution environment as described above, and then uses the execve(2) system call to run the command in the child process.  The monitor exists to relay job control signals between the user's terminal and the pty the command is being run in. This makes it possible to suspend and resume the command normally. Without the monitor, the command would be in what POSIX terms an “orphaned process group” and it would not receive any job control signals from the kernel.  When the command exits or is terminated by a signal, the monitor passes the command's exit status to the main sudo process and exits.  After receiving the command's exit status, the main sudo process passes the command's exit status to the security policy's close function, as well as the close function of any configured audit plugin, and exits. If no pty is used, sudo calls fork(2), sets up the execution environment as described above, and uses the execve(2) system call to run the command in the child process.  The main sudo process waits until the command has completed, then passes the command's exit status to the security policy's close function, as well as the close function of any configured audit plugins, and exits.  As a special case, if the policy plugin does not define a close function, sudo will execute the command directly instead of calling fork(2) first.  The sudoers policy plugin will only define a close function when I/O logging is enabled, a pty is required, an SELinux role is specified, the command has an associated timeout, or the pam_session or pam_setcred options are enabled.  Both pam_session and pam_setcred are enabled by default on systems using PAM. On systems that use PAM, the security policy's close function is responsible for closing the PAM session.  It may also log the command's exit status. Signal handling When the command is run as a child of the sudo process, sudo will relay signals it receives to the command.  The SIGINT and SIGQUIT signals are only relayed when the command is being run in a new pty or when the signal was sent by a user process, not the kernel.  This prevents the command from receiving SIGINT twice each time the user enters control- C.  Some signals, such as SIGSTOP and SIGKILL, cannot be caught and thus will not be relayed to the command.  As a general rule, SIGTSTP should be used instead of SIGSTOP when you wish to suspend a command being run by sudo. As a special case, sudo will not relay signals that were sent by the command it is running.  This prevents the command from accidentally killing itself.\tOn some systems, the reboot(8) utility sends SIGTERM to all non-system processes other than itself before rebooting the system.\tThis prevents sudo from relaying the SIGTERM signal it received back to reboot(8), which might then exit before the system was actually rebooted, leaving it in a half-dead state similar to single user mode.  Note, however, that this check only applies to the command run by sudo and not any other processes that the command may create. As a result, running a script that calls reboot(8) or shutdown(8) via sudo may cause the system to end up in this undefined state unless the reboot(8) or shutdown(8) are run using the exec() family of functions instead of system() (which interposes a shell between the command and the calling process). Plugins Plugins may be specified via Plugin directives in the sudo.conf(5) file.  They may be loaded as dynamic shared objects (on systems that support them), or compiled directly into the sudo binary.  If no sudo.conf(5) file is present, or if it doesn't contain any Plugin lines, sudo will use sudoers(5) for the policy, auditing, and I/O logging plugins.  See the sudo.conf(5) manual for details of the /private/etc/sudo.conf file and the sudo_plugin(5) manual for more information about the sudo plugin architecture. EXIT VALUE Upon successful execution of a command, the exit status from sudo will be the exit status of the program that was executed.  If the command terminated due to receipt of a signal, sudo will send itself the same signal that terminated the command. If the -l option was specified without a command, sudo will exit with a value of 0 if the user is allowed to run sudo and they authenticated successfully (as required by the security policy).  If a command is specified with the -l option, the exit value will only be 0 if the command is permitted by the security policy, otherwise it will be 1. If there is an authentication failure, a configuration/permission problem, or if the given command cannot be executed, sudo exits with a value of 1.  In the latter case, the error string is printed to the standard error.\tIf sudo cannot stat(2) one or more entries in the user's PATH, an error is printed to the standard error.\t(If the directory does not exist or if it is not really a directory, the entry is ignored and no error is printed.)  This should not happen under normal circumstances.  The most common reason for stat(2) to return “permission denied” is if you are running an automounter and one of the directories in your PATH is on a machine that is currently unreachable. SECURITY NOTES sudo tries to be safe when executing external commands. To prevent command spoofing, sudo checks \".\" and \"\" (both denoting current directory) last when searching for a command in the user's PATH (if one or both are in the PATH).  Depending on the security policy, the user's PATH environment variable may be modified, replaced, or passed unchanged to the program that sudo executes. Users should never be granted sudo privileges to execute files that are writable by the user or that reside in a directory that is writable by the user.  If the user can modify or replace the command there is no way to limit what additional commands they can run. By default, sudo will only log the command it explicitly runs.  If a user runs a command such as ‘sudo su’ or ‘sudo sh’, subsequent commands run from that shell are not subject to sudo's security policy.  The same is true for commands that offer shell escapes (including most editors).  If I/O logging is enabled, subsequent commands will have their input and/or output logged, but there will not be traditional logs for those commands.  Because of this, care must be taken when giving users access to commands via sudo to verify that the command does not inadvertently give the user an effective root shell.  For information on ways to address this, see the Preventing shell escapes section in sudoers(5). To prevent the disclosure of potentially sensitive information, sudo disables core dumps by default while it is executing (they are re- enabled for the command that is run).  This historical practice dates from a time when most operating systems allowed set-user-ID processes to dump core by default.  To aid in debugging sudo crashes, you may wish to re-enable core dumps by setting “disable_coredump” to false in the sudo.conf(5) file as follows: Set disable_coredump false See the sudo.conf(5) manual for more information.",
      "argument": "-ABkNnS",
      "optional": false
    },
    {
      "flag": "-A",
      "description": ", --askpass Normally, if sudo requires a password, it will read it from the user's terminal.  If the -A (askpass) option is specified, a (possibly graphical) helper program is executed to read the user's password and output the password to the standard output. If the SUDO_ASKPASS environment variable is set, it specifies the path to the helper program.\tOtherwise, if sudo.conf(5) contains a line specifying the askpass program, that value will be used.  For example: # Path to askpass helper program Path askpass /usr/X11R6/bin/ssh-askpass If no askpass program is available, sudo will exit with an error."
    },
    {
      "flag": "-a",
      "description": "type, --auth-type=type Use the specified BSD authentication type when validating the user, if allowed by /etc/login.conf.  The system administrator may specify a list of sudo-specific authentication methods by adding an “auth-sudo” entry in /etc/login.conf.\tThis option is only available on systems that support BSD authentication."
    },
    {
      "flag": "-B",
      "description": ", --bell Ring the bell as part of the password prompt when a terminal is present.  This option has no effect if an askpass program is used."
    },
    {
      "flag": "-b",
      "description": ", --background Run the given command in the background.  It is not possible to use shell job control to manipulate background processes started by sudo.  Most interactive commands will fail to work properly in background mode."
    },
    {
      "flag": "-C",
      "description": " Close all file descriptors greater than or equal to num before executing a command.  Values less than three are not permitted. By default, sudo will close all open file descriptors other than standard input, standard output, and standard error when executing a command.  The security policy may restrict the user's ability to use this option.  The sudoers policy only permits use of the -C option when the administrator has enabled the closefrom_override option.",
      "optional": true
    },
    {
      "flag": "-c",
      "description": "class, --login-class=class Run the command with resource limits and scheduling priority of the specified login class.  The class argument can be either a class name as defined in /etc/login.conf, or a single ‘-’ character.  If class is -, the default login class of the target user will be used.  Otherwise, the command must be run as the superuser (user-ID 0), or sudo must be run from a shell that is already running as the superuser.  If the command is being run as a login shell, additional /etc/login.conf settings, such as the umask and environment variables, will be applied, if present.  This option is only available on systems with BSD login classes."
    },
    {
      "flag": "-D",
      "description": " Run the command in the specified directory instead of the current working directory.  The security policy may return an error if the user does not have permission to specify the working directory.",
      "optional": true
    },
    {
      "flag": "--preserve-env",
      "description": "=list Indicates to the security policy that the user wishes to add the comma-separated list of environment variables to those preserved from the user's environment.  The security policy may return an error if the user does not have permission to preserve the environment.  This option may be specified multiple times.",
      "shortFlag": "-E"
    },
    {
      "flag": "-e",
      "description": ", --edit Edit one or more files instead of running a command.  In lieu of a path name, the string \"sudoedit\" is used when consulting the security policy.  If the user is authorized by the policy, the following steps are taken: 1.\tTemporary copies are made of the files to be edited with the owner set to the invoking user. 2.\tThe editor specified by the policy is run to edit the temporary files.  The sudoers policy uses the SUDO_EDITOR, VISUAL and EDITOR environment variables (in that order).  If none of SUDO_EDITOR, VISUAL or EDITOR are set, the first program listed in the editor sudoers(5) option is used. 3.\tIf they have been modified, the temporary files are copied back to their original location and the temporary versions are removed. To help prevent the editing of unauthorized files, the following restrictions are enforced unless explicitly allowed by the security policy: •  Symbolic links may not be edited (version 1.8.15 and higher). •  Symbolic links along the path to be edited are not followed when the parent directory is writable by the invoking user unless that user is root (version 1.8.16 and higher). •  Files located in a directory that is writable by the invoking user may not be edited unless that user is root (version 1.8.16 and higher). Users are never allowed to edit device special files. If the specified file does not exist, it will be created. Unlike most commands run by sudo, the editor is run with the invoking user's environment unmodified.\tIf the temporary file becomes empty after editing, the user will be prompted before it is installed.  If, for some reason, sudo is unable to update a file with its edited version, the user will receive a warning and the edited copy will remain in a temporary file."
    },
    {
      "flag": "-g",
      "description": " Run the command with the primary group set to group instead of the primary group specified by the target user's password database entry.\tThe group may be either a group name or a numeric group-ID (GID) prefixed with the ‘#’ character (e.g., ‘#0’ for GID 0).  When running a command as a GID, many shells require that the ‘#’ be escaped with a backslash (‘\\’).\tIf no",
      "optional": true
    },
    {
      "flag": "-u",
      "description": " user.  In either case, the primary group will be set to group. The sudoers policy permits any of the target user's groups to be specified via the -g option as long as the -P option is not in use. Run the command as a user other than the default target user (usually root).\tThe user may be either a user name or a numeric user-ID (UID) prefixed with the ‘#’ character (e.g., ‘#0’ for UID 0).  When running commands as a UID, many shells require that the ‘#’ be escaped with a backslash (‘\\’).\tSome security policies may restrict UIDs to those listed in the password database.  The sudoers policy allows UIDs that are not in the password database as long as the targetpw option is not set.  Other security policies may not support this.",
      "optional": true
    },
    {
      "flag": "-H",
      "description": ", --set-home Request that the security policy set the HOME environment variable to the home directory specified by the target user's password database entry.  Depending on the policy, this may be the default behavior."
    },
    {
      "flag": "-h",
      "description": " Display a short help message to the standard output and exit. Run the command on the specified host if the security policy plugin supports remote commands.  The sudoers plugin does not currently support running remote commands.  This may also be used in conjunction with the -l option to list a user's privileges for the remote host.",
      "optional": true
    },
    {
      "flag": "-h",
      "description": " Display a short help message to the standard output and exit. Run the command on the specified host if the security policy plugin supports remote commands.  The sudoers plugin does not currently support running remote commands.  This may also be used in conjunction with the -l option to list a user's privileges for the remote host.",
      "optional": true
    },
    {
      "flag": "-i",
      "description": " Run the shell specified by the target user's password database entry as a login shell.\tThis means that login-specific resource files such as .profile, .bash_profile, or .login will be read by the shell.  If a command is specified, it is passed to the shell as a simple command using the -c option.  The command and any args are concatenated, separated by spaces, after escaping each character (including white space) with a backslash (‘\\’) except for alphanumerics, underscores, hyphens, and dollar signs.  If no command is specified, an interactive shell is executed.  sudo attempts to change to that user's home directory before running the shell.  The command is run with an environment similar to the one a user would receive at log in. Most shells behave differently when a command is specified as compared to an interactive session; consult the shell's manual for details.  The Command environment section in the sudoers(5) manual documents how the -i option affects the environment in which a command is run when the sudoers policy is in use.",
      "optional": true
    },
    {
      "flag": "-K",
      "description": " Similar to the -k option, except that it removes every cached credential for the user, regardless of the terminal or parent process ID.  The next time sudo is run, a password must be entered if the security policy requires authentication.\tIt is not possible to use the -K option in conjunction with a command or other option.  This option does not require a password.  Not all security policies support credential caching.",
      "optional": false
    },
    {
      "flag": "-k",
      "description": " When used without a command, invalidates the user's cached credentials for the current session.  The next time sudo is run in the session, a password must be entered if the security policy requires authentication.\tBy default, the sudoers policy uses a separate record in the credential cache for each terminal (or parent process ID if no terminal is present). This prevents the -k option from interfering with sudo commands run in a different terminal session.  See the timestamp_type option in sudoers(5) for more information.  This option does not require a password, and was added to allow a user to revoke sudo permissions from a .logout file. When used in conjunction with a command or an option that may require a password, this option will cause sudo to ignore the user's cached credentials.  As a result, sudo will prompt for a password (if one is required by the security policy) and will not update the user's cached credentials. Not all security policies support credential caching.",
      "optional": false
    },
    {
      "flag": "-l",
      "description": " If no command is specified, list the privileges for the invoking user (or the user specified by the -U option) on the current host.  A longer list format is used if this option is specified multiple times and the security policy supports a verbose output format. If a command is specified and is permitted by the security policy, the fully-qualified path to the command is displayed along with any args.  If a command is specified but not allowed by the policy, sudo will exit with a status value of 1.",
      "argument": "-ABkNnS",
      "optional": false
    },
    {
      "flag": "-N",
      "description": ", --no-update Do not update the user's cached credentials, even if the user successfully authenticates.  Unlike the -k flag, existing cached credentials are used if they are valid.  To detect when the user's cached credentials are valid (or when no authentication is required), the following can be used: sudo -Nnv Not all security policies support credential caching."
    },
    {
      "flag": "-n",
      "description": ", --non-interactive Avoid prompting the user for input of any kind.\tIf a password is required for the command to run, sudo will display an error message and exit."
    },
    {
      "flag": "-P",
      "description": ", --preserve-groups Preserve the invoking user's group vector unaltered.  By default, the sudoers policy will initialize the group vector to the list of groups the target user is a member of.  The real and effective group-IDs, however, are still set to match the target user."
    },
    {
      "flag": "-p",
      "description": " Use a custom password prompt with optional escape sequences. The following percent (‘%’) escape sequences are supported by the sudoers policy: %H  expanded to the host name including the domain name (only if the machine's host name is fully qualified or the fqdn option is set in sudoers(5)) %h  expanded to the local host name without the domain name %p  expanded to the name of the user whose password is being requested (respects the rootpw, targetpw, and runaspw flags in sudoers(5)) %U  expanded to the login name of the user the command will be run as (defaults to root unless the -u option is also specified) %u  expanded to the invoking user's login name %%  two consecutive ‘%’ characters are collapsed into a single ‘%’ character The custom prompt will override the default prompt specified by either the security policy or the SUDO_PROMPT environment variable.  On systems that use PAM, the custom prompt will also override the prompt specified by a PAM module unless the passprompt_override flag is disabled in sudoers.",
      "optional": true
    },
    {
      "flag": "-R",
      "description": " Change to the specified root directory (see chroot(8)) before running the command.  The security policy may return an error if the user does not have permission to specify the root directory.",
      "optional": true
    },
    {
      "flag": "-r",
      "description": "role, --role=role Run the command with an SELinux security context that includes the specified role."
    },
    {
      "flag": "-S",
      "description": ", --stdin Write the prompt to the standard error and read the password from the standard input instead of using the terminal device."
    },
    {
      "flag": "-s",
      "description": " Run the shell specified by the SHELL environment variable if it is set or the shell specified by the invoking user's password database entry.\tIf a command is specified, it is passed to the shell as a simple command using the -c option.  The command and any args are concatenated, separated by spaces, after escaping each character (including white space) with a backslash (‘\\’) except for alphanumerics, underscores, hyphens, and dollar signs.  If no command is specified, an interactive shell is executed.  Most shells behave differently when a command is specified as compared to an interactive session; consult the shell's manual for details.",
      "optional": false
    },
    {
      "flag": "-t",
      "description": "type, --type=type Run the command with an SELinux security context that includes the specified type.  If no type is specified, the default type is derived from the role."
    },
    {
      "flag": "-U",
      "description": " Used in conjunction with the -l option to list the privileges for user instead of for the invoking user.  The security policy may restrict listing other users' privileges.  When using the sudoers policy, the -U option is restricted to the root user and users with either the “list” priviege for the specified user or the ability to run any command as root or user on the current host.",
      "optional": true
    },
    {
      "flag": "-T",
      "description": " Used to set a timeout for the command.  If the timeout expires before the command has exited, the command will be terminated. The security policy may restrict the user's ability to set timeouts.  The sudoers policy requires that user-specified timeouts be explicitly enabled.",
      "optional": true
    },
    {
      "flag": "-u",
      "description": " user.  In either case, the primary group will be set to group. The sudoers policy permits any of the target user's groups to be specified via the -g option as long as the -P option is not in use. Run the command as a user other than the default target user (usually root).\tThe user may be either a user name or a numeric user-ID (UID) prefixed with the ‘#’ character (e.g., ‘#0’ for UID 0).  When running commands as a UID, many shells require that the ‘#’ be escaped with a backslash (‘\\’).\tSome security policies may restrict UIDs to those listed in the password database.  The sudoers policy allows UIDs that are not in the password database as long as the targetpw option is not set.  Other security policies may not support this.",
      "optional": true
    },
    {
      "flag": "-V",
      "description": " Print the sudo version string as well as the version string of any configured plugins.\tIf the invoking user is already root, the -V option will display the options passed to configure when sudo was built; plugins may display additional information such as default options.",
      "optional": false
    },
    {
      "flag": "-v",
      "description": " command. On systems where sudo is the primary method of gaining superuser privileges, it is imperative to avoid syntax errors in the security policy configuration files.  For the default security policy, sudoers(5), changes to the configuration files should be made using the visudo(8) utility which will ensure that no syntax errors are introduced. When invoked as sudoedit, the -e option (described below), is implied. Security policies and audit plugins may log successful and failed attempts to run sudo.  If an I/O plugin is configured, the running command's input and output may be logged as well. The options are as follows: Update the user's cached credentials, authenticating the user if necessary.  For the sudoers plugin, this extends the sudo timeout for another 5 minutes by default, but does not run a command.  Not all security policies support cached credentials. --      The -- is used to delimit the end of the sudo options. Subsequent options are passed to the command. Options that take a value may only be specified once unless otherwise indicated in the description.  This is to help guard against problems caused by poorly written scripts that invoke sudo with user-controlled input. Environment variables to be set for the command may also be passed as options to sudo in the form VAR=value, for example LD_LIBRARY_PATH=/usr/local/pkg/lib.  Environment variables may be subject to restrictions imposed by the security policy plugin.  The sudoers policy subjects environment variables passed as options to the same restrictions as existing environment variables with one important difference.  If the setenv option is set in sudoers, the command to be run has the SETENV tag set or the command matched is ALL, the user may set variables that would otherwise be forbidden.  See sudoers(5) for more information. COMMAND EXECUTION When sudo executes a command, the security policy specifies the execution environment for the command.  Typically, the real and effective user and group and IDs are set to match those of the target user, as specified in the password database, and the group vector is initialized based on the group database (unless the -P option was specified). The following parameters may be specified by security policy: •  real and effective user-ID •  real and effective group-ID •  supplementary group-IDs •  the environment list •  current working directory •  file creation mode mask (umask) •  scheduling priority (aka nice value) Process model There are two distinct ways sudo can run a command. If an I/O logging plugin is configured to log terminal I/O, or if the security policy explicitly requests it, a new pseudo-terminal (“pty”) is allocated and fork(2) is used to create a second sudo process, referred to as the monitor.  The monitor creates a new terminal session with itself as the leader and the pty as its controlling terminal, calls fork(2) again, sets up the execution environment as described above, and then uses the execve(2) system call to run the command in the child process.  The monitor exists to relay job control signals between the user's terminal and the pty the command is being run in. This makes it possible to suspend and resume the command normally. Without the monitor, the command would be in what POSIX terms an “orphaned process group” and it would not receive any job control signals from the kernel.  When the command exits or is terminated by a signal, the monitor passes the command's exit status to the main sudo process and exits.  After receiving the command's exit status, the main sudo process passes the command's exit status to the security policy's close function, as well as the close function of any configured audit plugin, and exits. If no pty is used, sudo calls fork(2), sets up the execution environment as described above, and uses the execve(2) system call to run the command in the child process.  The main sudo process waits until the command has completed, then passes the command's exit status to the security policy's close function, as well as the close function of any configured audit plugins, and exits.  As a special case, if the policy plugin does not define a close function, sudo will execute the command directly instead of calling fork(2) first.  The sudoers policy plugin will only define a close function when I/O logging is enabled, a pty is required, an SELinux role is specified, the command has an associated timeout, or the pam_session or pam_setcred options are enabled.  Both pam_session and pam_setcred are enabled by default on systems using PAM. On systems that use PAM, the security policy's close function is responsible for closing the PAM session.  It may also log the command's exit status. Signal handling When the command is run as a child of the sudo process, sudo will relay signals it receives to the command.  The SIGINT and SIGQUIT signals are only relayed when the command is being run in a new pty or when the signal was sent by a user process, not the kernel.  This prevents the command from receiving SIGINT twice each time the user enters control- C.  Some signals, such as SIGSTOP and SIGKILL, cannot be caught and thus will not be relayed to the command.  As a general rule, SIGTSTP should be used instead of SIGSTOP when you wish to suspend a command being run by sudo. As a special case, sudo will not relay signals that were sent by the command it is running.  This prevents the command from accidentally killing itself.\tOn some systems, the reboot(8) utility sends SIGTERM to all non-system processes other than itself before rebooting the system.\tThis prevents sudo from relaying the SIGTERM signal it received back to reboot(8), which might then exit before the system was actually rebooted, leaving it in a half-dead state similar to single user mode.  Note, however, that this check only applies to the command run by sudo and not any other processes that the command may create. As a result, running a script that calls reboot(8) or shutdown(8) via sudo may cause the system to end up in this undefined state unless the reboot(8) or shutdown(8) are run using the exec() family of functions instead of system() (which interposes a shell between the command and the calling process). Plugins Plugins may be specified via Plugin directives in the sudo.conf(5) file.  They may be loaded as dynamic shared objects (on systems that support them), or compiled directly into the sudo binary.  If no sudo.conf(5) file is present, or if it doesn't contain any Plugin lines, sudo will use sudoers(5) for the policy, auditing, and I/O logging plugins.  See the sudo.conf(5) manual for details of the /private/etc/sudo.conf file and the sudo_plugin(5) manual for more information about the sudo plugin architecture. EXIT VALUE Upon successful execution of a command, the exit status from sudo will be the exit status of the program that was executed.  If the command terminated due to receipt of a signal, sudo will send itself the same signal that terminated the command. If the -l option was specified without a command, sudo will exit with a value of 0 if the user is allowed to run sudo and they authenticated successfully (as required by the security policy).  If a command is specified with the -l option, the exit value will only be 0 if the command is permitted by the security policy, otherwise it will be 1. If there is an authentication failure, a configuration/permission problem, or if the given command cannot be executed, sudo exits with a value of 1.  In the latter case, the error string is printed to the standard error.\tIf sudo cannot stat(2) one or more entries in the user's PATH, an error is printed to the standard error.\t(If the directory does not exist or if it is not really a directory, the entry is ignored and no error is printed.)  This should not happen under normal circumstances.  The most common reason for stat(2) to return “permission denied” is if you are running an automounter and one of the directories in your PATH is on a machine that is currently unreachable. SECURITY NOTES sudo tries to be safe when executing external commands. To prevent command spoofing, sudo checks \".\" and \"\" (both denoting current directory) last when searching for a command in the user's PATH (if one or both are in the PATH).  Depending on the security policy, the user's PATH environment variable may be modified, replaced, or passed unchanged to the program that sudo executes. Users should never be granted sudo privileges to execute files that are writable by the user or that reside in a directory that is writable by the user.  If the user can modify or replace the command there is no way to limit what additional commands they can run. By default, sudo will only log the command it explicitly runs.  If a user runs a command such as ‘sudo su’ or ‘sudo sh’, subsequent commands run from that shell are not subject to sudo's security policy.  The same is true for commands that offer shell escapes (including most editors).  If I/O logging is enabled, subsequent commands will have their input and/or output logged, but there will not be traditional logs for those commands.  Because of this, care must be taken when giving users access to commands via sudo to verify that the command does not inadvertently give the user an effective root shell.  For information on ways to address this, see the Preventing shell escapes section in sudoers(5). To prevent the disclosure of potentially sensitive information, sudo disables core dumps by default while it is executing (they are re- enabled for the command that is run).  This historical practice dates from a time when most operating systems allowed set-user-ID processes to dump core by default.  To aid in debugging sudo crashes, you may wish to re-enable core dumps by setting “disable_coredump” to false in the sudo.conf(5) file as follows: Set disable_coredump false See the sudo.conf(5) manual for more information.",
      "argument": "-ABkNnS",
      "optional": false
    }
  ],
  "examples": [],
  "relatedCommands": [
    "su",
    "stat",
    "login_cap",
    "passwd",
    "conf",
    "sudo_plugin",
    "sudoers",
    "sudoers_timestamp",
    "sudoreplay",
    "visudo",
    "sudo",
    "sudoedit",
    "execute",
    "command",
    "another"
  ],
  "seeAlso": [
    {
      "name": "su",
      "section": 1
    },
    {
      "name": "stat",
      "section": 2
    },
    {
      "name": "login_cap",
      "section": 3
    },
    {
      "name": "passwd",
      "section": 5
    },
    {
      "name": "conf",
      "section": 5
    },
    {
      "name": "sudo_plugin",
      "section": 5
    },
    {
      "name": "sudoers",
      "section": 5
    },
    {
      "name": "sudoers_timestamp",
      "section": 5
    },
    {
      "name": "sudoreplay",
      "section": 8
    },
    {
      "name": "visudo",
      "section": 8
    }
  ],
  "metadata": {
    "author": "ized by the policy,"
  },
  "searchContent": "sudo sudo manual page sudo allows a permitted user to execute a command as the superuser or another user as specified by the security policy sudo -h -k -k -v sudo -v -abknns -g group -h host -p prompt -u user sudo -l -abknns -g group -h host -p prompt -u user -u user command arg sudo -abbehnps -c num -d directory -g group -h host -p prompt -r directory -t timeout -u user var value -i -s command arg sudoedit -abknns -c num -d directory -g group -h host -p prompt -r directory -t timeout -u user file sudo manual page allows permitted execute command superuser another user specified security policy -v command on systems where sudo is the primary method of gaining superuser privileges it is imperative to avoid syntax errors in the security policy configuration files for the default security policy sudoers 5 changes to the configuration files should be made using the visudo 8 utility which will ensure that no syntax errors are introduced when invoked as sudoedit the -e option described below is implied security policies and audit plugins may log successful and failed attempts to run sudo if an i o plugin is configured the running command s input and output may be logged as well the options are as follows update the user s cached credentials authenticating the user if necessary for the sudoers plugin this extends the sudo timeout for another 5 minutes by default but does not run a command not all security policies support cached credentials -- the -- is used to delimit the end of the sudo options subsequent options are passed to the command options that take a value may only be specified once unless otherwise indicated in the description this is to help guard against problems caused by poorly written scripts that invoke sudo with user-controlled input environment variables to be set for the command may also be passed as options to sudo in the form var value for example ld library path usr local pkg lib environment variables may be subject to restrictions imposed by the security policy plugin the sudoers policy subjects environment variables passed as options to the same restrictions as existing environment variables with one important difference if the setenv option is set in sudoers the command to be run has the setenv tag set or the command matched is all the user may set variables that would otherwise be forbidden see sudoers 5 for more information command execution when sudo executes a command the security policy specifies the execution environment for the command typically the real and effective user and group and ids are set to match those of the target user as specified in the password database and the group vector is initialized based on the group database unless the -p option was specified the following parameters may be specified by security policy real and effective user-id real and effective group-id supplementary group-ids the environment list current working directory file creation mode mask umask scheduling priority aka nice value process model there are two distinct ways sudo can run a command if an i o logging plugin is configured to log terminal i o or if the security policy explicitly requests it a new pseudo-terminal pty is allocated and fork 2 is used to create a second sudo process referred to as the monitor the monitor creates a new terminal session with itself as the leader and the pty as its controlling terminal calls fork 2 again sets up the execution environment as described above and then uses the execve 2 system call to run the command in the child process the monitor exists to relay job control signals between the user s terminal and the pty the command is being run in this makes it possible to suspend and resume the command normally without the monitor the command would be in what posix terms an orphaned process group and it would not receive any job control signals from the kernel when the command exits or is terminated by a signal the monitor passes the command s exit status to the main sudo process and exits after receiving the command s exit status the main sudo process passes the command s exit status to the security policy s close function as well as the close function of any configured audit plugin and exits if no pty is used sudo calls fork 2 sets up the execution environment as described above and uses the execve 2 system call to run the command in the child process the main sudo process waits until the command has completed then passes the command s exit status to the security policy s close function as well as the close function of any configured audit plugins and exits as a special case if the policy plugin does not define a close function sudo will execute the command directly instead of calling fork 2 first the sudoers policy plugin will only define a close function when i o logging is enabled a pty is required an selinux role is specified the command has an associated timeout or the pam session or pam setcred options are enabled both pam session and pam setcred are enabled by default on systems using pam on systems that use pam the security policy s close function is responsible for closing the pam session it may also log the command s exit status signal handling when the command is run as a child of the sudo process sudo will relay signals it receives to the command the sigint and sigquit signals are only relayed when the command is being run in a new pty or when the signal was sent by a user process not the kernel this prevents the command from receiving sigint twice each time the user enters control- c some signals such as sigstop and sigkill cannot be caught and thus will not be relayed to the command as a general rule sigtstp should be used instead of sigstop when you wish to suspend a command being run by sudo as a special case sudo will not relay signals that were sent by the command it is running this prevents the command from accidentally killing itself on some systems the reboot 8 utility sends sigterm to all non-system processes other than itself before rebooting the system this prevents sudo from relaying the sigterm signal it received back to reboot 8 which might then exit before the system was actually rebooted leaving it in a half-dead state similar to single user mode note however that this check only applies to the command run by sudo and not any other processes that the command may create as a result running a script that calls reboot 8 or shutdown 8 via sudo may cause the system to end up in this undefined state unless the reboot 8 or shutdown 8 are run using the exec family of functions instead of system which interposes a shell between the command and the calling process plugins plugins may be specified via plugin directives in the sudo conf 5 file they may be loaded as dynamic shared objects on systems that support them or compiled directly into the sudo binary if no sudo conf 5 file is present or if it doesn t contain any plugin lines sudo will use sudoers 5 for the policy auditing and i o logging plugins see the sudo conf 5 manual for details of the private etc sudo conf file and the sudo plugin 5 manual for more information about the sudo plugin architecture exit value upon successful execution of a command the exit status from sudo will be the exit status of the program that was executed if the command terminated due to receipt of a signal sudo will send itself the same signal that terminated the command if the -l option was specified without a command sudo will exit with a value of 0 if the user is allowed to run sudo and they authenticated successfully as required by the security policy if a command is specified with the -l option the exit value will only be 0 if the command is permitted by the security policy otherwise it will be 1 if there is an authentication failure a configuration permission problem or if the given command cannot be executed sudo exits with a value of 1 in the latter case the error string is printed to the standard error if sudo cannot stat 2 one or more entries in the user s path an error is printed to the standard error if the directory does not exist or if it is not really a directory the entry is ignored and no error is printed this should not happen under normal circumstances the most common reason for stat 2 to return permission denied is if you are running an automounter and one of the directories in your path is on a machine that is currently unreachable security notes sudo tries to be safe when executing external commands to prevent command spoofing sudo checks and both denoting current directory last when searching for a command in the user s path if one or both are in the path depending on the security policy the user s path environment variable may be modified replaced or passed unchanged to the program that sudo executes users should never be granted sudo privileges to execute files that are writable by the user or that reside in a directory that is writable by the user if the user can modify or replace the command there is no way to limit what additional commands they can run by default sudo will only log the command it explicitly runs if a user runs a command such as sudo su or sudo sh subsequent commands run from that shell are not subject to sudo s security policy the same is true for commands that offer shell escapes including most editors if i o logging is enabled subsequent commands will have their input and or output logged but there will not be traditional logs for those commands because of this care must be taken when giving users access to commands via sudo to verify that the command does not inadvertently give the user an effective root shell for information on ways to address this see the preventing shell escapes section in sudoers 5 to prevent the disclosure of potentially sensitive information sudo disables core dumps by default while it is executing they are re- enabled for the command that is run this historical practice dates from a time when most operating systems allowed set-user-id processes to dump core by default to aid in debugging sudo crashes you may wish to re-enable core dumps by setting disable coredump to false in the sudo conf 5 file as follows set disable coredump false see the sudo conf 5 manual for more information -a --askpass normally if sudo requires a password it will read it from the user s terminal if the -a askpass option is specified a possibly graphical helper program is executed to read the user s password and output the password to the standard output if the sudo askpass environment variable is set it specifies the path to the helper program otherwise if sudo conf 5 contains a line specifying the askpass program that value will be used for example path to askpass helper program path askpass usr x11r6 bin ssh-askpass if no askpass program is available sudo will exit with an error -a type --auth-type type use the specified bsd authentication type when validating the user if allowed by etc login conf the system administrator may specify a list of sudo-specific authentication methods by adding an auth-sudo entry in etc login conf this option is only available on systems that support bsd authentication -b --bell ring the bell as part of the password prompt when a terminal is present this option has no effect if an askpass program is used -b --background run the given command in the background it is not possible to use shell job control to manipulate background processes started by sudo most interactive commands will fail to work properly in background mode -c close all file descriptors greater than or equal to num before executing a command values less than three are not permitted by default sudo will close all open file descriptors other than standard input standard output and standard error when executing a command the security policy may restrict the user s ability to use this option the sudoers policy only permits use of the -c option when the administrator has enabled the closefrom override option -c class --login-class class run the command with resource limits and scheduling priority of the specified login class the class argument can be either a class name as defined in etc login conf or a single - character if class is - the default login class of the target user will be used otherwise the command must be run as the superuser user-id 0 or sudo must be run from a shell that is already running as the superuser if the command is being run as a login shell additional etc login conf settings such as the umask and environment variables will be applied if present this option is only available on systems with bsd login classes -d run the command in the specified directory instead of the current working directory the security policy may return an error if the user does not have permission to specify the working directory --preserve-env list indicates to the security policy that the user wishes to add the comma-separated list of environment variables to those preserved from the user s environment the security policy may return an error if the user does not have permission to preserve the environment this option may be specified multiple times -e --edit edit one or more files instead of running a command in lieu of a path name the string sudoedit is used when consulting the security policy if the user is authorized by the policy the following steps are taken 1 temporary copies are made of the files to be edited with the owner set to the invoking user 2 the editor specified by the policy is run to edit the temporary files the sudoers policy uses the sudo editor visual and editor environment variables in that order if none of sudo editor visual or editor are set the first program listed in the editor sudoers 5 option is used 3 if they have been modified the temporary files are copied back to their original location and the temporary versions are removed to help prevent the editing of unauthorized files the following restrictions are enforced unless explicitly allowed by the security policy symbolic links may not be edited version 1 8 15 and higher symbolic links along the path to be edited are not followed when the parent directory is writable by the invoking user unless that user is root version 1 8 16 and higher files located in a directory that is writable by the invoking user may not be edited unless that user is root version 1 8 16 and higher users are never allowed to edit device special files if the specified file does not exist it will be created unlike most commands run by sudo the editor is run with the invoking user s environment unmodified if the temporary file becomes empty after editing the user will be prompted before it is installed if for some reason sudo is unable to update a file with its edited version the user will receive a warning and the edited copy will remain in a temporary file -g run the command with the primary group set to group instead of the primary group specified by the target user s password database entry the group may be either a group name or a numeric group-id gid prefixed with the character e g 0 for gid 0 when running a command as a gid many shells require that the be escaped with a backslash if no -u user in either case the primary group will be set to group the sudoers policy permits any of the target user s groups to be specified via the -g option as long as the -p option is not in use run the command as a user other than the default target user usually root the user may be either a user name or a numeric user-id uid prefixed with the character e g 0 for uid 0 when running commands as a uid many shells require that the be escaped with a backslash some security policies may restrict uids to those listed in the password database the sudoers policy allows uids that are not in the password database as long as the targetpw option is not set other security policies may not support this -h --set-home request that the security policy set the home environment variable to the home directory specified by the target user s password database entry depending on the policy this may be the default behavior -h display a short help message to the standard output and exit run the command on the specified host if the security policy plugin supports remote commands the sudoers plugin does not currently support running remote commands this may also be used in conjunction with the -l option to list a user s privileges for the remote host -h display a short help message to the standard output and exit run the command on the specified host if the security policy plugin supports remote commands the sudoers plugin does not currently support running remote commands this may also be used in conjunction with the -l option to list a user s privileges for the remote host -i run the shell specified by the target user s password database entry as a login shell this means that login-specific resource files such as profile bash profile or login will be read by the shell if a command is specified it is passed to the shell as a simple command using the -c option the command and any args are concatenated separated by spaces after escaping each character including white space with a backslash except for alphanumerics underscores hyphens and dollar signs if no command is specified an interactive shell is executed sudo attempts to change to that user s home directory before running the shell the command is run with an environment similar to the one a user would receive at log in most shells behave differently when a command is specified as compared to an interactive session consult the shell s manual for details the command environment section in the sudoers 5 manual documents how the -i option affects the environment in which a command is run when the sudoers policy is in use -k similar to the -k option except that it removes every cached credential for the user regardless of the terminal or parent process id the next time sudo is run a password must be entered if the security policy requires authentication it is not possible to use the -k option in conjunction with a command or other option this option does not require a password not all security policies support credential caching -k when used without a command invalidates the user s cached credentials for the current session the next time sudo is run in the session a password must be entered if the security policy requires authentication by default the sudoers policy uses a separate record in the credential cache for each terminal or parent process id if no terminal is present this prevents the -k option from interfering with sudo commands run in a different terminal session see the timestamp type option in sudoers 5 for more information this option does not require a password and was added to allow a user to revoke sudo permissions from a logout file when used in conjunction with a command or an option that may require a password this option will cause sudo to ignore the user s cached credentials as a result sudo will prompt for a password if one is required by the security policy and will not update the user s cached credentials not all security policies support credential caching -l if no command is specified list the privileges for the invoking user or the user specified by the -u option on the current host a longer list format is used if this option is specified multiple times and the security policy supports a verbose output format if a command is specified and is permitted by the security policy the fully-qualified path to the command is displayed along with any args if a command is specified but not allowed by the policy sudo will exit with a status value of 1 -n --no-update do not update the user s cached credentials even if the user successfully authenticates unlike the -k flag existing cached credentials are used if they are valid to detect when the user s cached credentials are valid or when no authentication is required the following can be used sudo -nnv not all security policies support credential caching -n --non-interactive avoid prompting the user for input of any kind if a password is required for the command to run sudo will display an error message and exit -p --preserve-groups preserve the invoking user s group vector unaltered by default the sudoers policy will initialize the group vector to the list of groups the target user is a member of the real and effective group-ids however are still set to match the target user -p use a custom password prompt with optional escape sequences the following percent escape sequences are supported by the sudoers policy h expanded to the host name including the domain name only if the machine s host name is fully qualified or the fqdn option is set in sudoers 5 h expanded to the local host name without the domain name p expanded to the name of the user whose password is being requested respects the rootpw targetpw and runaspw flags in sudoers 5 u expanded to the login name of the user the command will be run as defaults to root unless the -u option is also specified u expanded to the invoking user s login name two consecutive characters are collapsed into a single character the custom prompt will override the default prompt specified by either the security policy or the sudo prompt environment variable on systems that use pam the custom prompt will also override the prompt specified by a pam module unless the passprompt override flag is disabled in sudoers -r change to the specified root directory see chroot 8 before running the command the security policy may return an error if the user does not have permission to specify the root directory -r role --role role run the command with an selinux security context that includes the specified role -s --stdin write the prompt to the standard error and read the password from the standard input instead of using the terminal device -s run the shell specified by the shell environment variable if it is set or the shell specified by the invoking user s password database entry if a command is specified it is passed to the shell as a simple command using the -c option the command and any args are concatenated separated by spaces after escaping each character including white space with a backslash except for alphanumerics underscores hyphens and dollar signs if no command is specified an interactive shell is executed most shells behave differently when a command is specified as compared to an interactive session consult the shell s manual for details -t type --type type run the command with an selinux security context that includes the specified type if no type is specified the default type is derived from the role -u used in conjunction with the -l option to list the privileges for user instead of for the invoking user the security policy may restrict listing other users privileges when using the sudoers policy the -u option is restricted to the root user and users with either the list priviege for the specified user or the ability to run any command as root or user on the current host -t used to set a timeout for the command if the timeout expires before the command has exited the command will be terminated the security policy may restrict the user s ability to set timeouts the sudoers policy requires that user-specified timeouts be explicitly enabled -u user in either case the primary group will be set to group the sudoers policy permits any of the target user s groups to be specified via the -g option as long as the -p option is not in use run the command as a user other than the default target user usually root the user may be either a user name or a numeric user-id uid prefixed with the character e g 0 for uid 0 when running commands as a uid many shells require that the be escaped with a backslash some security policies may restrict uids to those listed in the password database the sudoers policy allows uids that are not in the password database as long as the targetpw option is not set other security policies may not support this -v print the sudo version string as well as the version string of any configured plugins if the invoking user is already root the -v option will display the options passed to configure when sudo was built plugins may display additional information such as default options -v command on systems where sudo is the primary method of gaining superuser privileges it is imperative to avoid syntax errors in the security policy configuration files for the default security policy sudoers 5 changes to the configuration files should be made using the visudo 8 utility which will ensure that no syntax errors are introduced when invoked as sudoedit the -e option described below is implied security policies and audit plugins may log successful and failed attempts to run sudo if an i o plugin is configured the running command s input and output may be logged as well the options are as follows update the user s cached credentials authenticating the user if necessary for the sudoers plugin this extends the sudo timeout for another 5 minutes by default but does not run a command not all security policies support cached credentials -- the -- is used to delimit the end of the sudo options subsequent options are passed to the command options that take a value may only be specified once unless otherwise indicated in the description this is to help guard against problems caused by poorly written scripts that invoke sudo with user-controlled input environment variables to be set for the command may also be passed as options to sudo in the form var value for example ld library path usr local pkg lib environment variables may be subject to restrictions imposed by the security policy plugin the sudoers policy subjects environment variables passed as options to the same restrictions as existing environment variables with one important difference if the setenv option is set in sudoers the command to be run has the setenv tag set or the command matched is all the user may set variables that would otherwise be forbidden see sudoers 5 for more information command execution when sudo executes a command the security policy specifies the execution environment for the command typically the real and effective user and group and ids are set to match those of the target user as specified in the password database and the group vector is initialized based on the group database unless the -p option was specified the following parameters may be specified by security policy real and effective user-id real and effective group-id supplementary group-ids the environment list current working directory file creation mode mask umask scheduling priority aka nice value process model there are two distinct ways sudo can run a command if an i o logging plugin is configured to log terminal i o or if the security policy explicitly requests it a new pseudo-terminal pty is allocated and fork 2 is used to create a second sudo process referred to as the monitor the monitor creates a new terminal session with itself as the leader and the pty as its controlling terminal calls fork 2 again sets up the execution environment as described above and then uses the execve 2 system call to run the command in the child process the monitor exists to relay job control signals between the user s terminal and the pty the command is being run in this makes it possible to suspend and resume the command normally without the monitor the command would be in what posix terms an orphaned process group and it would not receive any job control signals from the kernel when the command exits or is terminated by a signal the monitor passes the command s exit status to the main sudo process and exits after receiving the command s exit status the main sudo process passes the command s exit status to the security policy s close function as well as the close function of any configured audit plugin and exits if no pty is used sudo calls fork 2 sets up the execution environment as described above and uses the execve 2 system call to run the command in the child process the main sudo process waits until the command has completed then passes the command s exit status to the security policy s close function as well as the close function of any configured audit plugins and exits as a special case if the policy plugin does not define a close function sudo will execute the command directly instead of calling fork 2 first the sudoers policy plugin will only define a close function when i o logging is enabled a pty is required an selinux role is specified the command has an associated timeout or the pam session or pam setcred options are enabled both pam session and pam setcred are enabled by default on systems using pam on systems that use pam the security policy s close function is responsible for closing the pam session it may also log the command s exit status signal handling when the command is run as a child of the sudo process sudo will relay signals it receives to the command the sigint and sigquit signals are only relayed when the command is being run in a new pty or when the signal was sent by a user process not the kernel this prevents the command from receiving sigint twice each time the user enters control- c some signals such as sigstop and sigkill cannot be caught and thus will not be relayed to the command as a general rule sigtstp should be used instead of sigstop when you wish to suspend a command being run by sudo as a special case sudo will not relay signals that were sent by the command it is running this prevents the command from accidentally killing itself on some systems the reboot 8 utility sends sigterm to all non-system processes other than itself before rebooting the system this prevents sudo from relaying the sigterm signal it received back to reboot 8 which might then exit before the system was actually rebooted leaving it in a half-dead state similar to single user mode note however that this check only applies to the command run by sudo and not any other processes that the command may create as a result running a script that calls reboot 8 or shutdown 8 via sudo may cause the system to end up in this undefined state unless the reboot 8 or shutdown 8 are run using the exec family of functions instead of system which interposes a shell between the command and the calling process plugins plugins may be specified via plugin directives in the sudo conf 5 file they may be loaded as dynamic shared objects on systems that support them or compiled directly into the sudo binary if no sudo conf 5 file is present or if it doesn t contain any plugin lines sudo will use sudoers 5 for the policy auditing and i o logging plugins see the sudo conf 5 manual for details of the private etc sudo conf file and the sudo plugin 5 manual for more information about the sudo plugin architecture exit value upon successful execution of a command the exit status from sudo will be the exit status of the program that was executed if the command terminated due to receipt of a signal sudo will send itself the same signal that terminated the command if the -l option was specified without a command sudo will exit with a value of 0 if the user is allowed to run sudo and they authenticated successfully as required by the security policy if a command is specified with the -l option the exit value will only be 0 if the command is permitted by the security policy otherwise it will be 1 if there is an authentication failure a configuration permission problem or if the given command cannot be executed sudo exits with a value of 1 in the latter case the error string is printed to the standard error if sudo cannot stat 2 one or more entries in the user s path an error is printed to the standard error if the directory does not exist or if it is not really a directory the entry is ignored and no error is printed this should not happen under normal circumstances the most common reason for stat 2 to return permission denied is if you are running an automounter and one of the directories in your path is on a machine that is currently unreachable security notes sudo tries to be safe when executing external commands to prevent command spoofing sudo checks and both denoting current directory last when searching for a command in the user s path if one or both are in the path depending on the security policy the user s path environment variable may be modified replaced or passed unchanged to the program that sudo executes users should never be granted sudo privileges to execute files that are writable by the user or that reside in a directory that is writable by the user if the user can modify or replace the command there is no way to limit what additional commands they can run by default sudo will only log the command it explicitly runs if a user runs a command such as sudo su or sudo sh subsequent commands run from that shell are not subject to sudo s security policy the same is true for commands that offer shell escapes including most editors if i o logging is enabled subsequent commands will have their input and or output logged but there will not be traditional logs for those commands because of this care must be taken when giving users access to commands via sudo to verify that the command does not inadvertently give the user an effective root shell for information on ways to address this see the preventing shell escapes section in sudoers 5 to prevent the disclosure of potentially sensitive information sudo disables core dumps by default while it is executing they are re- enabled for the command that is run this historical practice dates from a time when most operating systems allowed set-user-id processes to dump core by default to aid in debugging sudo crashes you may wish to re-enable core dumps by setting disable coredump to false in the sudo conf 5 file as follows set disable coredump false see the sudo conf 5 manual for more information name -p prompt -r directory -t timeout -u user file description sudo editor is not set files sudo 1 9 13p2 january 16 2023 sudo 8",
  "keywords": [
    "sudo",
    "manual",
    "page",
    "allows",
    "permitted",
    "execute",
    "command",
    "superuser",
    "another",
    "user,",
    "specified",
    "security",
    "policy."
  ],
  "complexity": "advanced",
  "hash": "9a60aeda69ac67b8",
  "parsedAt": "2025-06-17T19:42:08.078Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": false,
  "hasDiagrams": false
}