{
  "name": "nc",
  "section": 1,
  "title": "nc manual page",
  "description": "The nc (or netcat) utility is used for just about anything under the sun involving TCP or UDP.",
  "synopsis": "nc [-46AcDCdhklnrtUuvz] [-b boundif] [-i interval] [-p source_port] [-s source_ip_address] [-w timeout] [-X proxy_protocol] [-x proxy_address[:port]] [--apple-delegate-pid pid] [--apple-delegate-uuid uuid] [--apple-ext-bk-idle] [--apple-nowakefromsleep n] [--apple-ecn mode] [hostname] [port[s]]",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "[-s source_ip_address] [-w timeout] [-X proxy_protocol]\n\t[-x proxy_address[:port]] [--apple-delegate-pid pid]\n\t[--apple-delegate-uuid uuid] [--apple-ext-bk-idle]\n\t[--apple-nowakefromsleep n] [--apple-ecn mode] [hostname] [port[s]]",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     nc – arbitrary TCP and UDP connections and listens\n",
        "     nc [-46AcDCdhklnrtUuvz] [-b boundif] [-i interval] [-p source_port]"
      ]
    },
    {
      "id": "description",
      "title": "DESCRIPTION",
      "content": "macOS 15.5\t\t\t June 25, 2001\t\t\t    macOS 15.5",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     The nc (or netcat) utility is used for just about anything under the sun\n     involving TCP or UDP.  It can open TCP connections, send UDP packets,\n     listen on arbitrary TCP and UDP ports, do port scanning, and deal with\n     both IPv4 and IPv6.  Unlike telnet(1), nc scripts nicely, and separates\n     error messages onto standard error instead of sending them to standard\n     output, as telnet(1) does with some.\n\n     Common uses include:\n\n\t   •   simple TCP proxies\n\t   •   shell-script based HTTP clients and servers\n\t   •   network daemon testing\n\t   •   a SOCKS or HTTP ProxyCommand for ssh(1)\n\t   •   and much, much more\n\n     The options are as follows:\n\n     -4      Forces nc to use IPv4 addresses only.\n\n     -6      Forces nc to use IPv6 addresses only.\n\n     -A      Set SO_RECV_ANYIF on socket.\n\n     -b boundif\n\t     Specifies the interface to bind the socket to.\n\n     -c      Send CRLF as line-ending\n\n     -D      Enable debugging on the socket.\n\n     -C      Forces nc not to use cellular data context.\n\n     -d      Do not attempt to read from stdin.\n\n     -h      Prints out nc help.\n\n     -i interval\n\t     Specifies a delay time interval between lines of text sent and\n\t     received.\tAlso causes a delay time between connections to\n\t     multiple ports.\n\n     -G conntimeout\n\t     TCP connection timeout in seconds.\n\n     -H keepidle\n\t     Initial TCP keep alive timeout in seconds.\n\n     -I keepintvl\n\t     Interval for repeating TCP keep alive timeouts in seconds.\n\n     -J keepcnt\n\t     Number of times to repeat TCP keep alive packets.\n\n     -k      Forces nc to stay listening for another connection after its\n\t     current connection is completed.  It is an error to use this\n\t     option without the -l option.\n\n     -l      Used to specify that nc should listen for an incoming connection\n\t     rather than initiate a connection to a remote host.  It is an\n\t     error to use this option in conjunction with the -p, -s, or -z\n\t     options.  Additionally, any timeouts specified with the -w option\n\t     are ignored.\n\n     -L num_probes\n\t     Number of probes to send to the peer before declaring that the\n\t     peer is not reachable and generating an adaptive timeout\n\t     read/write event.\n\n     -n      Do not do any DNS or service lookups on any specified addresses,\n\t     hostnames or ports.\n\n     -p source_port\n\t     Specifies the source port nc should use, subject to privilege\n\t     restrictions and availability.  It is an error to use this option\n\t     in conjunction with the -l option.\n\n     -r      Specifies that source and/or destination ports should be chosen\n\t     randomly instead of sequentially within a range or in the order\n\t     that the system assigns them.\n\n     -s source_ip_address\n\t     Specifies the IP of the interface which is used to send the\n\t     packets.  It is an error to use this option in conjunction with\n\t     the -l option.\n\n     -t      Causes nc to send RFC 854 DON'T and WON'T responses to RFC 854 DO\n\t     and WILL requests.  This makes it possible to use nc to script\n\t     telnet sessions.\n\n     -U      Specifies to use Unix Domain Sockets.\n\n     -u      Use UDP instead of the default option of TCP.\n\n     -v      Have nc give more verbose output.\n\n     -w timeout\n\t     If a connection and stdin are idle for more than timeout seconds,\n\t     then the connection is silently closed.  The -w flag has no\n\t     effect on the -l option, i.e. nc will listen forever for a\n\t     connection, with or without the -w flag.  The default is no\n\t     timeout.\n\n     -X proxy_version\n\t     Requests that nc should use the specified protocol when talking\n\t     to the proxy server.  Supported protocols are “4” (SOCKS v.4),\n\t     “5” (SOCKS v.5) and “connect” (HTTPS proxy).  If the protocol is\n\t     not specified, SOCKS version 5 is used.\n\n     -x proxy_address[:port]\n\t     Requests that nc should connect to hostname using a proxy at\n\t     proxy_address and port.  If port is not specified, the well-known\n\t     port for the proxy protocol is used (1080 for SOCKS, 3128 for\n\t     HTTPS).\n\n     -z      Specifies that nc should just scan for listening daemons, without\n\t     sending any data to them.\tIt is an error to use this option in\n\t     conjunction with the -l option.\n\n     --apple-delegate-pid\n\t     Requests that nc should delegate the socket for the specified\n\t     PID.  It is an error to use this option in conjunction with the\n\t     --apple-delegate-uuid option.\n\n     --apple-delegate-uuid\n\t     Requests that nc should delegate the socket for the specified\n\t     UUID.  It is an error to use this option in conjunction with the\n\t     --apple-delegate-pid option.\n\n     --apple-ext-bk-idle\n\t     Requests that nc marks its socket for extended background idle\n\t     time when the process becomes suspended.\n\n     --apple-nowakefromsleep\n\t     When the parameter n is greater than 0, requests that nc marks\n\t     its socket to exclude the local port from the list of opened\n\t     ports that is queried by drivers when the system goes to sleep.\n\t     When n is greater than 1, set the socket option that generates\n\t     the KEV_SOCKET_CLOSED kernel event when the socket gets closed.\n\n     --apple-ecn\n\t     Requests that nc marks to use the socket option TCP_ECN_MODE to\n\t     set the ECN mode (default, enable, disable)\n\n     hostname can be a numerical IP address or a symbolic hostname (unless the\n     -n option is given).  In general, a hostname must be specified, unless\n     the -l option is given (in which case the local host is used).\n\n     port[s] can be single integers or ranges.\tRanges are in the form nn-mm.\n     In general, a destination port must be specified, unless the -U option is\n     given (in which case a socket must be specified).\n",
        "     It is quite simple to build a very basic client/server model using nc.\n     On one console, start nc listening on a specific port for a connection.\n     For example:\n\n\t   $ nc -l 1234\n\n     nc is now listening on port 1234 for a connection.  On a second console\n     (or a second machine), connect to the machine and port being listened on:\n\n\t   $ nc 127.0.0.1 1234\n\n     There should now be a connection between the ports.  Anything typed at\n     the second console will be concatenated to the first, and vice-versa.\n     After the connection has been set up, nc does not really care which side\n     is being used as a ‘server’ and which side is being used as a ‘client’.\n     The connection may be terminated using an EOF (‘^D’).\n",
        "     The example in the previous section can be expanded to build a basic data\n     transfer model.  Any information input into one end of the connection\n     will be output to the other end, and input and output can be easily\n     captured in order to emulate file transfer.\n\n     Start by using nc to listen on a specific port, with output captured into\n     a file:\n\n\t   $ nc -l 1234 > filename.out\n\n     Using a second machine, connect to the listening nc process, feeding it\n     the file which is to be transferred:\n\n\t   $ nc host.example.com 1234 < filename.in\n\n     After the file has been transferred, the connection will close\n     automatically.\n",
        "     It is sometimes useful to talk to servers “by hand” rather than through a\n     user interface.  It can aid in troubleshooting, when it might be\n     necessary to verify what data a server is sending in response to commands\n     issued by the client.  For example, to retrieve the home page of a web\n     site:\n\n\t   $ echo -n \"GET / HTTP/1.0\\r\\n\\r\\n\" | nc host.example.com 80\n\n     Note that this also displays the headers sent by the web server.  They\n     can be filtered, using a tool such as sed(1), if necessary.\n\n     More complicated examples can be built up when the user knows the format\n     of requests required by the server.  As another example, an email may be\n     submitted to an SMTP server using:\n\n\t   $ nc localhost 25 << EOF\n\t   HELO host.example.com\n\t   MAIL FROM: <user@host.example.com>\n\t   RCPT TO: <user2@host.example.com>\n\t   DATA\n\t   Body of email.\n\t   .\n\t   QUIT\n\t   EOF\n",
        "     It may be useful to know which ports are open and running services on a\n     target machine.  The -z flag can be used to tell nc to report open ports,\n     rather than initiate a connection.  For example:\n\n\t   $ nc -z host.example.com 20-30\n\t   Connection to host.example.com 22 port [tcp/ssh] succeeded!\n\t   Connection to host.example.com 25 port [tcp/smtp] succeeded!\n\n     The port range was specified to limit the search to ports 20 - 30.\n\n     Alternatively, it might be useful to know which server software is\n     running, and which versions.  This information is often contained within\n     the greeting banners.  In order to retrieve these, it is necessary to\n     first make a connection, and then break the connection when the banner\n     has been retrieved.  This can be accomplished by specifying a small\n     timeout with the -w flag, or perhaps by issuing a \"QUIT\" command to the\n     server:\n\n\t   $ echo \"QUIT\" | nc host.example.com 20-30\n\t   SSH-1.99-OpenSSH_3.6.1p2\n\t   Protocol mismatch.\n\t   220 host.example.com IMS SMTP Receiver Version 0.84 Ready\n",
        "     Open a TCP connection to port 42 of host.example.com, using port 31337 as\n     the source port, with a timeout of 5 seconds:\n\n\t   $ nc -p 31337 -w 5 host.example.com 42\n\n     Open a UDP connection to port 53 of host.example.com:\n\n\t   $ nc -u host.example.com 53\n\n     Open a TCP connection to port 42 of host.example.com using 10.1.2.3 as\n     the IP for the local end of the connection:\n\n\t   $ nc -s 10.1.2.3 host.example.com 42\n\n     Create and listen on a Unix Domain Socket:\n\n\t   $ nc -lU /var/tmp/dsocket\n\n     Connect to port 42 of host.example.com via an HTTP proxy at 10.2.3.4,\n     port 8080.  This example could also be used by ssh(1); see the\n     ProxyCommand directive in ssh_config(5) for more information.\n\n\t   $ nc -x10.2.3.4:8080 -Xconnect host.example.com 42\n",
        "     cat(1), ssh(1)\n",
        "     Original implementation by *Hobbit* ⟨hobbit@avian.org⟩.\n     Rewritten with IPv6 support by Eric Jackson ⟨ericj@monkey.org⟩.\n",
        "     UDP port scans will always succeed (i.e. report the port as open),\n     rendering the -uz combination of flags relatively useless.\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "-4",
      "description": "Forces nc to use IPv4 addresses only."
    },
    {
      "flag": "-6",
      "description": "Forces nc to use IPv6 addresses only."
    },
    {
      "flag": "-A",
      "description": "Set SO_RECV_ANYIF on socket."
    },
    {
      "flag": "-b",
      "description": " Specifies the interface to bind the socket to.",
      "optional": true
    },
    {
      "flag": "-c",
      "description": "Send CRLF as line-ending"
    },
    {
      "flag": "-D",
      "description": "Enable debugging on the socket."
    },
    {
      "flag": "-C",
      "description": "Forces nc not to use cellular data context."
    },
    {
      "flag": "-d",
      "description": "Do not attempt to read from stdin."
    },
    {
      "flag": "-h",
      "description": "Prints out nc help."
    },
    {
      "flag": "-i",
      "description": " Specifies a delay time interval between lines of text sent and received.\tAlso causes a delay time between connections to multiple ports.",
      "optional": true
    },
    {
      "flag": "-G",
      "description": "conntimeout TCP connection timeout in seconds."
    },
    {
      "flag": "-H",
      "description": "keepidle Initial TCP keep alive timeout in seconds."
    },
    {
      "flag": "-I",
      "description": "keepintvl Interval for repeating TCP keep alive timeouts in seconds."
    },
    {
      "flag": "-J",
      "description": "keepcnt Number of times to repeat TCP keep alive packets."
    },
    {
      "flag": "-k",
      "description": "Forces nc to stay listening for another connection after its current connection is completed.  It is an error to use this option without the -l option."
    },
    {
      "flag": "-l",
      "description": "Used to specify that nc should listen for an incoming connection rather than initiate a connection to a remote host.  It is an error to use this option in conjunction with the -p, -s, or -z options.  Additionally, any timeouts specified with the -w option are ignored."
    },
    {
      "flag": "-L",
      "description": "num_probes Number of probes to send to the peer before declaring that the peer is not reachable and generating an adaptive timeout read/write event."
    },
    {
      "flag": "-n",
      "description": "Do not do any DNS or service lookups on any specified addresses, hostnames or ports."
    },
    {
      "flag": "-p",
      "description": " Specifies the source port nc should use, subject to privilege restrictions and availability.  It is an error to use this option in conjunction with the -l option.",
      "optional": true
    },
    {
      "flag": "-r",
      "description": "Specifies that source and/or destination ports should be chosen randomly instead of sequentially within a range or in the order that the system assigns them."
    },
    {
      "flag": "-s",
      "description": " Specifies the IP of the interface which is used to send the packets.  It is an error to use this option in conjunction with the -l option.",
      "optional": true
    },
    {
      "flag": "-t",
      "description": "Causes nc to send RFC 854 DON'T and WON'T responses to RFC 854 DO and WILL requests.  This makes it possible to use nc to script telnet sessions."
    },
    {
      "flag": "-U",
      "description": "Specifies to use Unix Domain Sockets."
    },
    {
      "flag": "-u",
      "description": "Use UDP instead of the default option of TCP."
    },
    {
      "flag": "-v",
      "description": "Have nc give more verbose output."
    },
    {
      "flag": "-w",
      "description": " If a connection and stdin are idle for more than timeout seconds, then the connection is silently closed.  The -w flag has no effect on the -l option, i.e. nc will listen forever for a connection, with or without the -w flag.  The default is no timeout.",
      "optional": true
    },
    {
      "flag": "-X",
      "description": " Requests that nc should use the specified protocol when talking to the proxy server.  Supported protocols are “4” (SOCKS v.4), “5” (SOCKS v.5) and “connect” (HTTPS proxy).  If the protocol is not specified, SOCKS version 5 is used.",
      "optional": true
    },
    {
      "flag": "-x",
      "description": " Requests that nc should connect to hostname using a proxy at proxy_address and port.  If port is not specified, the well-known port for the proxy protocol is used (1080 for SOCKS, 3128 for HTTPS).",
      "optional": true
    },
    {
      "flag": "--apple-delegate-pid",
      "description": " Requests that nc should delegate the socket for the specified PID.  It is an error to use this option in conjunction with the",
      "optional": true,
      "shortFlag": "-z"
    },
    {
      "flag": "--apple-delegate-uuid",
      "description": " Requests that nc should delegate the socket for the specified UUID.  It is an error to use this option in conjunction with the",
      "optional": true
    },
    {
      "flag": "--apple-delegate-uuid",
      "description": " Requests that nc should delegate the socket for the specified UUID.  It is an error to use this option in conjunction with the",
      "optional": true
    },
    {
      "flag": "--apple-delegate-pid",
      "description": " Requests that nc should delegate the socket for the specified PID.  It is an error to use this option in conjunction with the",
      "optional": true,
      "shortFlag": "-z"
    },
    {
      "flag": "--apple-ext-bk-idle",
      "description": " Requests that nc marks its socket for extended background idle time when the process becomes suspended.",
      "optional": true
    },
    {
      "flag": "--apple-nowakefromsleep",
      "description": " When the parameter n is greater than 0, requests that nc marks its socket to exclude the local port from the list of opened ports that is queried by drivers when the system goes to sleep. When n is greater than 1, set the socket option that generates the KEV_SOCKET_CLOSED kernel event when the socket gets closed.",
      "optional": true
    },
    {
      "flag": "--apple-ecn",
      "description": " Requests that nc marks to use the socket option TCP_ECN_MODE to set the ECN mode (default, enable, disable) hostname can be a numerical IP address or a symbolic hostname (unless the",
      "optional": true
    },
    {
      "flag": "-n",
      "description": "option is given).  In general, a hostname must be specified, unless the -l option is given (in which case the local host is used). port[s] can be single integers or ranges.\tRanges are in the form nn-mm. In general, a destination port must be specified, unless the -U option is given (in which case a socket must be specified). CLIENT/SERVER MODEL It is quite simple to build a very basic client/server model using nc. On one console, start nc listening on a specific port for a connection. For example: $ nc -l 1234 nc is now listening on port 1234 for a connection.  On a second console (or a second machine), connect to the machine and port being listened on: $ nc 127.0.0.1 1234 There should now be a connection between the ports.  Anything typed at the second console will be concatenated to the first, and vice-versa. After the connection has been set up, nc does not really care which side is being used as a ‘server’ and which side is being used as a ‘client’. The connection may be terminated using an EOF (‘^D’). DATA TRANSFER The example in the previous section can be expanded to build a basic data transfer model.  Any information input into one end of the connection will be output to the other end, and input and output can be easily captured in order to emulate file transfer. Start by using nc to listen on a specific port, with output captured into a file: $ nc -l 1234 > filename.out Using a second machine, connect to the listening nc process, feeding it the file which is to be transferred: $ nc host.example.com 1234 < filename.in After the file has been transferred, the connection will close automatically. TALKING TO SERVERS It is sometimes useful to talk to servers “by hand” rather than through a user interface.  It can aid in troubleshooting, when it might be necessary to verify what data a server is sending in response to commands issued by the client.  For example, to retrieve the home page of a web site: $ echo -n \"GET / HTTP/1.0\\r\\n\\r\\n\" | nc host.example.com 80 Note that this also displays the headers sent by the web server.  They can be filtered, using a tool such as sed(1), if necessary. More complicated examples can be built up when the user knows the format of requests required by the server.  As another example, an email may be submitted to an SMTP server using: $ nc localhost 25 << EOF HELO host.example.com MAIL FROM: <user@host.example.com> RCPT TO: <user2@host.example.com> DATA Body of email. . QUIT EOF PORT SCANNING It may be useful to know which ports are open and running services on a target machine.  The -z flag can be used to tell nc to report open ports, rather than initiate a connection.  For example: $ nc -z host.example.com 20-30 Connection to host.example.com 22 port [tcp/ssh] succeeded! Connection to host.example.com 25 port [tcp/smtp] succeeded! The port range was specified to limit the search to ports 20 - 30. Alternatively, it might be useful to know which server software is running, and which versions.  This information is often contained within the greeting banners.  In order to retrieve these, it is necessary to first make a connection, and then break the connection when the banner has been retrieved.  This can be accomplished by specifying a small timeout with the -w flag, or perhaps by issuing a \"QUIT\" command to the server: $ echo \"QUIT\" | nc host.example.com 20-30 SSH-1.99-OpenSSH_3.6.1p2 Protocol mismatch. 220 host.example.com IMS SMTP Receiver Version 0.84 Ready"
    }
  ],
  "examples": [
    {
      "command": "nc -l 1234 > filename.out",
      "description": "",
      "tags": [
        "redirect"
      ],
      "output": "     Using a second machine, connect to the listening nc process, feeding it\n     the file which is to be transferred:\n"
    },
    {
      "command": "nc host.example.com 1234 < filename.in",
      "description": "",
      "tags": [],
      "output": "     After the file has been transferred, the connection will close\n     automatically.\nTALKING TO SERVERS\n     It is sometimes useful to talk to servers “by hand” rather than through a\n     user interface.  It can aid in troubleshooting, when it might be\n     necessary to verify what data a server is sending in response to commands\n     issued by the client.  For example, to retrieve the home page of a web\n     site:\n"
    },
    {
      "command": "echo -n \"GET / HTTP/1.0\\r\\n\\r\\n\" | nc host.example.com 80",
      "description": "",
      "tags": [
        "pipe"
      ],
      "output": "     Note that this also displays the headers sent by the web server.  They\n     can be filtered, using a tool such as sed(1), if necessary.\n     More complicated examples can be built up when the user knows the format\n     of requests required by the server.  As another example, an email may be\n     submitted to an SMTP server using:\n"
    },
    {
      "command": "nc localhost 25 << EOF",
      "description": "HELO host.example.com",
      "tags": [],
      "output": "\t   HELO host.example.com\n\t   MAIL FROM: <user@host.example.com>\n\t   RCPT TO: <user2@host.example.com>\n\t   DATA\n\t   Body of email.\n\t   .\n\t   QUIT\n\t   EOF\nPORT SCANNING\n     It may be useful to know which ports are open and running services on a\n     target machine.  The -z flag can be used to tell nc to report open ports,\n     rather than initiate a connection.  For example:\n"
    },
    {
      "command": "nc -z host.example.com 20-30",
      "description": "Connection to host.example.com 22 port [tcp/ssh] succeeded!",
      "tags": [],
      "output": "\t   Connection to host.example.com 22 port [tcp/ssh] succeeded!\n\t   Connection to host.example.com 25 port [tcp/smtp] succeeded!\n     The port range was specified to limit the search to ports 20 - 30.\n     Alternatively, it might be useful to know which server software is\n     running, and which versions.  This information is often contained within\n     the greeting banners.  In order to retrieve these, it is necessary to\n     first make a connection, and then break the connection when the banner\n     has been retrieved.  This can be accomplished by specifying a small\n     timeout with the -w flag, or perhaps by issuing a \"QUIT\" command to the\n     server:\n"
    },
    {
      "command": "echo \"QUIT\" | nc host.example.com 20-30",
      "description": "SSH-1.99-OpenSSH_3.6.1p2",
      "tags": [
        "pipe"
      ],
      "output": "\t   SSH-1.99-OpenSSH_3.6.1p2\n\t   Protocol mismatch.\n\t   220 host.example.com IMS SMTP Receiver Version 0.84 Ready\n"
    }
  ],
  "relatedCommands": [
    "cat",
    "ssh",
    "arbitrary",
    "connections",
    "listens",
    "boundif",
    "interval",
    "source_port",
    "timeout",
    "proxy_protocol",
    "proxy_address",
    "port",
    "pid",
    "uuid",
    "apple-ecn"
  ],
  "seeAlso": [
    {
      "name": "cat",
      "section": 1
    },
    {
      "name": "ssh",
      "section": 1
    }
  ],
  "metadata": {},
  "searchContent": "nc nc manual page the nc or netcat utility is used for just about anything under the sun involving tcp or udp nc -46acdcdhklnrtuuvz -b boundif -i interval -p source port -s source ip address -w timeout -x proxy protocol -x proxy address port --apple-delegate-pid pid --apple-delegate-uuid uuid --apple-ext-bk-idle --apple-nowakefromsleep n --apple-ecn mode hostname port s nc manual page netcat utility used just about anything under involving udp -4 forces nc to use ipv4 addresses only -6 forces nc to use ipv6 addresses only -a set so recv anyif on socket -b specifies the interface to bind the socket to -c send crlf as line-ending -d enable debugging on the socket -c forces nc not to use cellular data context -d do not attempt to read from stdin -h prints out nc help -i specifies a delay time interval between lines of text sent and received also causes a delay time between connections to multiple ports -g conntimeout tcp connection timeout in seconds -h keepidle initial tcp keep alive timeout in seconds -i keepintvl interval for repeating tcp keep alive timeouts in seconds -j keepcnt number of times to repeat tcp keep alive packets -k forces nc to stay listening for another connection after its current connection is completed it is an error to use this option without the -l option -l used to specify that nc should listen for an incoming connection rather than initiate a connection to a remote host it is an error to use this option in conjunction with the -p -s or -z options additionally any timeouts specified with the -w option are ignored -l num probes number of probes to send to the peer before declaring that the peer is not reachable and generating an adaptive timeout read write event -n do not do any dns or service lookups on any specified addresses hostnames or ports -p specifies the source port nc should use subject to privilege restrictions and availability it is an error to use this option in conjunction with the -l option -r specifies that source and or destination ports should be chosen randomly instead of sequentially within a range or in the order that the system assigns them -s specifies the ip of the interface which is used to send the packets it is an error to use this option in conjunction with the -l option -t causes nc to send rfc 854 don t and won t responses to rfc 854 do and will requests this makes it possible to use nc to script telnet sessions -u specifies to use unix domain sockets -u use udp instead of the default option of tcp -v have nc give more verbose output -w if a connection and stdin are idle for more than timeout seconds then the connection is silently closed the -w flag has no effect on the -l option i e nc will listen forever for a connection with or without the -w flag the default is no timeout -x requests that nc should use the specified protocol when talking to the proxy server supported protocols are 4 socks v 4 5 socks v 5 and connect https proxy if the protocol is not specified socks version 5 is used -x requests that nc should connect to hostname using a proxy at proxy address and port if port is not specified the well-known port for the proxy protocol is used 1080 for socks 3128 for https --apple-delegate-pid requests that nc should delegate the socket for the specified pid it is an error to use this option in conjunction with the --apple-delegate-uuid requests that nc should delegate the socket for the specified uuid it is an error to use this option in conjunction with the --apple-delegate-uuid requests that nc should delegate the socket for the specified uuid it is an error to use this option in conjunction with the --apple-delegate-pid requests that nc should delegate the socket for the specified pid it is an error to use this option in conjunction with the --apple-ext-bk-idle requests that nc marks its socket for extended background idle time when the process becomes suspended --apple-nowakefromsleep when the parameter n is greater than 0 requests that nc marks its socket to exclude the local port from the list of opened ports that is queried by drivers when the system goes to sleep when n is greater than 1 set the socket option that generates the kev socket closed kernel event when the socket gets closed --apple-ecn requests that nc marks to use the socket option tcp ecn mode to set the ecn mode default enable disable hostname can be a numerical ip address or a symbolic hostname unless the -n option is given in general a hostname must be specified unless the -l option is given in which case the local host is used port s can be single integers or ranges ranges are in the form nn-mm in general a destination port must be specified unless the -u option is given in which case a socket must be specified client server model it is quite simple to build a very basic client server model using nc on one console start nc listening on a specific port for a connection for example nc -l 1234 nc is now listening on port 1234 for a connection on a second console or a second machine connect to the machine and port being listened on nc 127 0 0 1 1234 there should now be a connection between the ports anything typed at the second console will be concatenated to the first and vice-versa after the connection has been set up nc does not really care which side is being used as a server and which side is being used as a client the connection may be terminated using an eof d data transfer the example in the previous section can be expanded to build a basic data transfer model any information input into one end of the connection will be output to the other end and input and output can be easily captured in order to emulate file transfer start by using nc to listen on a specific port with output captured into a file nc -l 1234 filename out using a second machine connect to the listening nc process feeding it the file which is to be transferred nc host example com 1234 filename in after the file has been transferred the connection will close automatically talking to servers it is sometimes useful to talk to servers by hand rather than through a user interface it can aid in troubleshooting when it might be necessary to verify what data a server is sending in response to commands issued by the client for example to retrieve the home page of a web site echo -n get http 1 0 r n r n nc host example com 80 note that this also displays the headers sent by the web server they can be filtered using a tool such as sed 1 if necessary more complicated examples can be built up when the user knows the format of requests required by the server as another example an email may be submitted to an smtp server using nc localhost 25 eof helo host example com mail from user host example com rcpt to user2 host example com data body of email quit eof port scanning it may be useful to know which ports are open and running services on a target machine the -z flag can be used to tell nc to report open ports rather than initiate a connection for example nc -z host example com 20-30 connection to host example com 22 port tcp ssh succeeded connection to host example com 25 port tcp smtp succeeded the port range was specified to limit the search to ports 20 - 30 alternatively it might be useful to know which server software is running and which versions this information is often contained within the greeting banners in order to retrieve these it is necessary to first make a connection and then break the connection when the banner has been retrieved this can be accomplished by specifying a small timeout with the -w flag or perhaps by issuing a quit command to the server echo quit nc host example com 20-30 ssh-1 99-openssh 3 6 1p2 protocol mismatch 220 host example com ims smtp receiver version 0 84 ready nc -l 1234 filename out nc host example com 1234 filename in echo -n get http 1 0 r n r n nc host example com 80 nc localhost 25 eof helo host example com nc -z host example com 20-30 connection to host example com 22 port tcp ssh succeeded echo quit nc host example com 20-30 ssh-1 99-openssh 3 6 1p2 name -s source ip address -w timeout -x proxy protocol -x proxy address port --apple-delegate-pid pid --apple-delegate-uuid uuid --apple-ext-bk-idle --apple-nowakefromsleep n --apple- description macos 15 5 june 25 2001 macos 15 5",
  "keywords": [
    "nc",
    "manual",
    "page",
    "netcat)",
    "utility",
    "used",
    "just",
    "about",
    "anything",
    "under",
    "involving",
    "udp."
  ],
  "complexity": "advanced",
  "hash": "224ecc252486b2e2",
  "parsedAt": "2025-06-17T19:42:04.229Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": true,
  "hasDiagrams": false
}