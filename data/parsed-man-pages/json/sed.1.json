{
  "name": "sed",
  "section": 1,
  "title": "sed manual page",
  "description": "The sed utility reads the specified files, or the standard input if no files are specified, modifying the input as specified by a list of commands.",
  "synopsis": "sed [-EHalnru] command [-I extension] [-i extension] [file ...] sed [-EHalnru] [-e command] [-f command_file] [-I extension] [-i extension] [file ...]",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "[-i extension] [file ...]",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     sed – stream editor\n",
        "     sed [-EHalnru] command [-I extension] [-i extension] [file ...]\n     sed [-EHalnru] [-e command] [-f command_file] [-I extension]"
      ]
    },
    {
      "id": "description",
      "title": "DESCRIPTION",
      "content": "macOS 15.5\t\t\t June 10, 2020\t\t\t    macOS 15.5",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     The sed utility reads the specified files, or the standard input if no\n     files are specified, modifying the input as specified by a list of\n     commands.\tThe input is then written to the standard output.\n\n     A single command may be specified as the first argument to sed.  Multiple\n     commands may be specified by using the -e or -f options.  All commands\n     are applied to the input in the order they are specified regardless of\n     their origin.\n\n     The following options are available:\n\n     -E      Interpret regular expressions as extended (modern) regular\n\t     expressions rather than basic regular expressions (BRE's).  The\n\t     re_format(7) manual page fully describes both formats.\n\n     -a      The files listed as parameters for the “w” functions are created\n\t     (or truncated) before any processing begins, by default.  The -a\n\t     option causes sed to delay opening each file until a command\n\t     containing the related “w” function is applied to a line of\n\t     input.\n\n     -e command\n\t     Append the editing commands specified by the command argument to\n\t     the list of commands.\n\n     -f command_file\n\t     Append the editing commands found in the file command_file to the\n\t     list of commands.\tThe editing commands should each be listed on\n\t     a separate line.  The commands are read from the standard input\n\t     if command_file is “-”.\n\n     -H      Enable enhanced features in the regular expression syntax.  Note\n\t     that this option is independent of the -E option.\tSee\n\t     re_format(7) for details.\n\n     -I extension\n\t     Edit files in-place, saving backups with the specified extension.\n\t     If a zero-length extension is given, no backup will be saved.  It\n\t     is not recommended to give a zero-length extension when in-place\n\t     editing files, as you risk corruption or partial content in\n\t     situations where disk space is exhausted, etc.\n\n\t     Note that in-place editing with -I still takes place in a single\n\t     continuous line address space covering all files, although each\n\t     file preserves its individuality instead of forming one output\n\t     stream.  The line counter is never reset between files, address\n\t     ranges can span file boundaries, and the “$” address matches only\n\t     the last line of the last file.  (See Sed Addresses.) That can\n\t     lead to unexpected results in many cases of in-place editing,\n\t     where using -i is desired.\n\n     -i extension\n\t     Edit files in-place similarly to -I, but treat each file\n\t     independently from other files.  In particular, line numbers in\n\t     each file start at 1, the “$” address matches the last line of\n\t     the current file, and address ranges are limited to the current\n\t     file.  (See Sed Addresses.) The net result is as though each file\n\t     were edited by a separate sed instance.\n\n     -l      Make output line buffered.\n\n     -n      By default, each line of input is echoed to the standard output\n\t     after all of the commands have been applied to it.  The -n option\n\t     suppresses this behavior.\n\n     -r      Same as -E for compatibility with GNU sed.\n\n     -u      Make output unbuffered.\n\n     The form of a sed command is as follows:\n\n\t   [address[,address]]function[arguments]\n\n     Whitespace may be inserted before the first address and the function\n     portions of the command.\n\n     Normally, sed cyclically copies a line of input, not including its\n     terminating newline character, into a pattern space, (unless there is\n     something left after a “D” function), applies all of the commands with\n     addresses that select that pattern space, copies the pattern space to the\n     standard output, appending a newline, and deletes the pattern space.\n\n     Some of the functions use a hold space to save all or part of the pattern\n     space for subsequent retrieval.\n",
        "     An address is not required, but if specified must have one of the\n     following formats:\n\n\t   •   a number that counts input lines cumulatively across input\n\t       files (or in each file independently if a -i option is in\n\t       effect);\n\n\t   •   a dollar (“$”) character that addresses the last line of input\n\t       (or the last line of the current file if a -i option was\n\t       specified);\n\n\t   •   a context address that consists of a regular expression\n\t       preceded and followed by a delimiter.  The closing delimiter\n\t       can also optionally be followed by the “I” character, to\n\t       indicate that the regular expression is to be matched in a\n\t       case-insensitive way.\n\n     A command line with no addresses selects every pattern space.\n\n     A command line with one address selects all of the pattern spaces that\n     match the address.\n\n     A command line with two addresses selects an inclusive range.  This range\n     starts with the first pattern space that matches the first address.  The\n     end of the range is the next following pattern space that matches the\n     second address.  If the second address is a number less than or equal to\n     the line number first selected, only that line is selected.  The number\n     in the second address may be prefixed with a (“+”) to specify the number\n     of lines to match after the first pattern.  In the case when the second\n     address is a context address, sed does not re-match the second address\n     against the pattern space that matched the first address.\tStarting at\n     the first line following the selected range, sed starts looking again for\n     the first address.\n\n     Editing commands can be applied to non-selected pattern spaces by use of\n     the exclamation character (“!”) function.\n",
        "     The regular expressions used in sed, by default, are basic regular\n     expressions (BREs, see re_format(7) for more information), but extended\n     (modern) regular expressions can be used instead if the -E flag is given.\n     In addition, sed has the following two additions to regular expressions:\n\n     1.   In a context address, any character other than a backslash (“\\”) or",
        "     2.   The escape sequence \\n matches a newline character embedded in the",
        "     One special feature of sed regular expressions is that they can default\n     to the last regular expression used.  If a regular expression is empty,\n     i.e., just the delimiter characters are specified, the last regular\n     expression encountered is used instead.  The last regular expression is\n     defined as the last regular expression used as part of an address or\n     substitute command, and at run-time, not compile-time.  For example, the\n     command “/abc/s//XXX/” will substitute “XXX” for the pattern “abc”.\n",
        "     In the following list of commands, the maximum number of permissible\n     addresses for each command is indicated by [0addr], [1addr], or [2addr],\n     representing zero, one, or two addresses.\n\n     The argument text consists of one or more lines.  To embed a newline in\n     the text, precede it with a backslash.  Other backslashes in text are\n     deleted and the following character taken literally.\n\n     The “r” and “w” functions take an optional file parameter, which should\n     be separated from the function letter by white space.  Each file given as\n     an argument to sed is created (or its contents truncated) before any\n     input processing begins.\n\n     The “b”, “r”, “s”, “t”, “w”, “y”, “!”, and “:” functions all accept\n     additional arguments.  The following synopses indicate which arguments\n     have to be separated from the function letters by white space characters.\n\n     Two of the functions take a function-list.  This is a list of sed\n     functions separated by newlines, as follows:\n\n\t   { function\n\t     function\n\t     ...\n\t     function\n\t   }\n\n     The “{” can be preceded by white space and can be followed by white\n     space.  The function can be preceded by white space.  The terminating “}”\n     must be preceded by a newline, and may also be preceded by white space.\n\n     [2addr] function-list\n\t     Execute function-list only when the pattern space is selected.\n\n     [1addr]a\\\n     text    Write text to standard output immediately before each attempt to\n\t     read a line of input, whether by executing the “N” function or by\n\t     beginning a new cycle.\n\n     [2addr]b[label]\n\t     Branch to the “:” function with the specified label.  If the\n\t     label is not specified, branch to the end of the script.\n\n     [2addr]c\\\n     text    Delete the pattern space.\tWith 0 or 1 address or at the end of a\n\t     2-address range, text is written to the standard output.\n\n     [2addr]d\n\t     Delete the pattern space and start the next cycle.\n\n     [2addr]D\n\t     Delete the initial segment of the pattern space through the first\n\t     newline character and start the next cycle.\n\n     [2addr]g\n\t     Replace the contents of the pattern space with the contents of\n\t     the hold space.\n\n     [2addr]G\n\t     Append a newline character followed by the contents of the hold\n\t     space to the pattern space.\n\n     [2addr]h\n\t     Replace the contents of the hold space with the contents of the\n\t     pattern space.\n\n     [2addr]H\n\t     Append a newline character followed by the contents of the\n\t     pattern space to the hold space.\n\n     [1addr]i\\\n     text    Write text to the standard output.\n\n     [2addr]l\n\t     (The letter ell.)\tWrite the pattern space to the standard output\n\t     in a visually unambiguous form.  This form is as follows:\n\n\t\t   backslash\t      \\\\\n\t\t   alert\t      \\a\n\t\t   form-feed\t      \\f\n\t\t   carriage-return    \\r\n\t\t   tab\t\t      \\t\n\t\t   vertical tab       \\v\n\n\t     Nonprintable characters are written as three-digit octal numbers\n\t     (with a preceding backslash) for each byte in the character (most\n\t     significant byte first).  Long lines are folded, with the point\n\t     of folding indicated by displaying a backslash followed by a\n\t     newline.  The end of each line is marked with a “$”.\n\n     [2addr]n\n\t     Write the pattern space to the standard output if the default\n\t     output has not been suppressed, and replace the pattern space\n\t     with the next line of input.\n\n     [2addr]N\n\t     Append the next line of input to the pattern space, using an\n\t     embedded newline character to separate the appended material from\n\t     the original contents.  Note that the current line number\n\t     changes.\n\n     [2addr]p\n\t     Write the pattern space to standard output.\n\n     [2addr]P\n\t     Write the pattern space, up to the first newline character to the\n\t     standard output.\n\n     [1addr]q\n\t     Branch to the end of the script and quit without starting a new\n\t     cycle.\n\n     [1addr]r file\n\t     Copy the contents of file to the standard output immediately\n\t     before the next attempt to read a line of input.  If file cannot\n\t     be read for any reason, it is silently ignored and no error\n\t     condition is set.\n\n     [2addr]s/regular expression/replacement/flags\n\t     Substitute the replacement string for the first instance of the\n\t     regular expression in the pattern space.  Any character other\n\t     than backslash or newline can be used instead of a slash to\n\t     delimit the RE and the replacement.  Within the RE and the\n\t     replacement, the RE delimiter itself can be used as a literal\n\t     character if it is preceded by a backslash.\n\n\t     An ampersand (“&”) appearing in the replacement is replaced by\n\t     the string matching the RE.  The special meaning of “&” in this\n\t     context can be suppressed by preceding it by a backslash.\tThe\n\t     string “\\#”, where “#” is a digit, is replaced by the text\n\t     matched by the corresponding backreference expression (see\n\t     re_format(7)).\n\n\t     A line can be split by substituting a newline character into it.\n\t     To specify a newline character in the replacement string, precede\n\t     it with a backslash.\n\n\t     The value of flags in the substitute function is zero or more of\n\t     the following:\n\n\t\t   N\t   Make the substitution only for the N'th occurrence\n\t\t\t   of the regular expression in the pattern space.\n\n\t\t   g\t   Make the substitution for all non-overlapping\n\t\t\t   matches of the regular expression, not just the\n\t\t\t   first one.\n\n\t\t   p\t   Write the pattern space to standard output if a\n\t\t\t   replacement was made.  If the replacement string is\n\t\t\t   identical to that which it replaces, it is still\n\t\t\t   considered to have been a replacement.\n\n\t\t   w file  Append the pattern space to file if a replacement\n\t\t\t   was made.  If the replacement string is identical\n\t\t\t   to that which it replaces, it is still considered\n\t\t\t   to have been a replacement.\n\n\t\t   i or I  Match the regular expression in a case-insensitive\n\t\t\t   way.\n\n     [2addr]t [label]\n\t     Branch to the “:” function bearing the label if any substitutions\n\t     have been made since the most recent reading of an input line or\n\t     execution of a “t” function.  If no label is specified, branch to\n\t     the end of the script.\n\n     [2addr]w file\n\t     Append the pattern space to the file.\n\n     [2addr]x\n\t     Swap the contents of the pattern and hold spaces.\n\n     [2addr]y/string1/string2/\n\t     Replace all occurrences of characters in string1 in the pattern\n\t     space with the corresponding characters from string2.  Any\n\t     character other than a backslash or newline can be used instead\n\t     of a slash to delimit the strings.  Within string1 and string2, a\n\t     backslash followed by any character other than a newline is that\n\t     literal character, and a backslash followed by an ``n'' is\n\t     replaced by a newline character.\n\n     [2addr]!function\n     [2addr]!function-list\n\t     Apply the function or function-list only to the lines that are\n\t     not selected by the address(es).\n\n     [0addr]:label\n\t     This function does nothing; it bears a label to which the “b” and\n\t     “t” commands may branch.\n\n     [1addr]=\n\t     Write the line number to the standard output followed by a\n\t     newline character.\n\n     [0addr]\n\t     Empty lines are ignored.\n\n     [0addr]#\n\t     The “#” and the remainder of the line are ignored (treated as a\n\t     comment), with the single exception that if the first two\n\t     characters in the file are “#n”, the default output is\n\t     suppressed.  This is the same as specifying the -n option on the\n\t     command line.\n",
        "     The COLUMNS, LANG, LC_ALL, LC_CTYPE and LC_COLLATE environment variables\n     affect the execution of sed as described in environ(7).\n",
        "     The sed utility exits 0 on success, and >0 if an error occurs.\n",
        "     Replace ‘bar’ with ‘baz’ when piped from another command:\n\n\t   echo \"An alternate word, like bar, is sometimes used in examples.\" | sed 's/bar/baz/'\n\n     Using backlashes can sometimes be hard to read and follow:\n\n\t   echo \"/home/example\" | sed  's/\\/home\\/example/\\/usr\\/local\\/example/'\n\n     Using a different separator can be handy when working with paths:\n\n\t   echo \"/home/example\" | sed 's#/home/example#/usr/local/example#'\n\n     Replace all occurances of ‘foo’ with ‘bar’ in the file test.txt, without\n     creating a backup of the file:\n\n\t   sed -i '' -e 's/foo/bar/g' test.txt\n",
        "     awk(1), ed(1), grep(1), regex(3), re_format(7)\n",
        "     The sed utility is expected to be a superset of the IEEE Std 1003.2\n     (“POSIX.2”) specification.\n\n     The -E, -I, -a and -i options, the special meaning of -f -, the prefixing\n     “+” in the second member of an address range, as well as the “I” flag to\n     the address regular expression and substitution command are non-standard\n     FreeBSD extensions and may not be available on other operating systems.\n",
        "     A sed command, written by L. E. McMahon, appeared in Version 7 AT&T UNIX.\n",
        "     Diomidis D. Spinellis <dds@FreeBSD.org>\n",
        "     Multibyte characters containing a byte with value 0x5C (ASCII ‘\\’) may be\n     incorrectly treated as line continuation characters in arguments to the\n     “a”, “c” and “i” commands.  Multibyte characters cannot be used as\n     delimiters with the “s” and “y” commands.\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "-E",
      "description": "Interpret regular expressions as extended (modern) regular expressions rather than basic regular expressions (BRE's).  The re_format(7) manual page fully describes both formats."
    },
    {
      "flag": "-a",
      "description": "The files listed as parameters for the “w” functions are created (or truncated) before any processing begins, by default.  The -a option causes sed to delay opening each file until a command containing the related “w” function is applied to a line of input."
    },
    {
      "flag": "-e",
      "description": " Append the editing commands specified by the command argument to the list of commands.",
      "optional": true
    },
    {
      "flag": "-f",
      "description": " Append the editing commands found in the file command_file to the list of commands.\tThe editing commands should each be listed on a separate line.  The commands are read from the standard input if command_file is “-”.",
      "optional": true
    },
    {
      "flag": "-H",
      "description": "Enable enhanced features in the regular expression syntax.  Note that this option is independent of the -E option.\tSee re_format(7) for details."
    },
    {
      "flag": "-I",
      "description": " Edit files in-place, saving backups with the specified extension. If a zero-length extension is given, no backup will be saved.  It is not recommended to give a zero-length extension when in-place editing files, as you risk corruption or partial content in situations where disk space is exhausted, etc. Note that in-place editing with -I still takes place in a single continuous line address space covering all files, although each file preserves its individuality instead of forming one output stream.  The line counter is never reset between files, address ranges can span file boundaries, and the “$” address matches only the last line of the last file.  (See Sed Addresses.) That can lead to unexpected results in many cases of in-place editing, where using -i is desired.",
      "optional": true
    },
    {
      "flag": "-i",
      "description": " Edit files in-place similarly to -I, but treat each file independently from other files.  In particular, line numbers in each file start at 1, the “$” address matches the last line of the current file, and address ranges are limited to the current file.  (See Sed Addresses.) The net result is as though each file were edited by a separate sed instance.",
      "optional": true
    },
    {
      "flag": "-l",
      "description": "Make output line buffered."
    },
    {
      "flag": "-n",
      "description": "By default, each line of input is echoed to the standard output after all of the commands have been applied to it.  The -n option suppresses this behavior."
    },
    {
      "flag": "-r",
      "description": "Same as -E for compatibility with GNU sed."
    },
    {
      "flag": "-u",
      "description": "Make output unbuffered. The form of a sed command is as follows: [address[,address]]function[arguments] Whitespace may be inserted before the first address and the function portions of the command. Normally, sed cyclically copies a line of input, not including its terminating newline character, into a pattern space, (unless there is something left after a “D” function), applies all of the commands with addresses that select that pattern space, copies the pattern space to the standard output, appending a newline, and deletes the pattern space. Some of the functions use a hold space to save all or part of the pattern space for subsequent retrieval. Sed Addresses An address is not required, but if specified must have one of the following formats: •   a number that counts input lines cumulatively across input files (or in each file independently if a -i option is in effect); •   a dollar (“$”) character that addresses the last line of input (or the last line of the current file if a -i option was specified); •   a context address that consists of a regular expression preceded and followed by a delimiter.  The closing delimiter can also optionally be followed by the “I” character, to indicate that the regular expression is to be matched in a case-insensitive way. A command line with no addresses selects every pattern space. A command line with one address selects all of the pattern spaces that match the address. A command line with two addresses selects an inclusive range.  This range starts with the first pattern space that matches the first address.  The end of the range is the next following pattern space that matches the second address.  If the second address is a number less than or equal to the line number first selected, only that line is selected.  The number in the second address may be prefixed with a (“+”) to specify the number of lines to match after the first pattern.  In the case when the second address is a context address, sed does not re-match the second address against the pattern space that matched the first address.\tStarting at the first line following the selected range, sed starts looking again for the first address. Editing commands can be applied to non-selected pattern spaces by use of the exclamation character (“!”) function. Sed Regular Expressions The regular expressions used in sed, by default, are basic regular expressions (BREs, see re_format(7) for more information), but extended (modern) regular expressions can be used instead if the -E flag is given. In addition, sed has the following two additions to regular expressions: 1.   In a context address, any character other than a backslash (“\\”) or newline character may be used to delimit the regular expression. The opening delimiter needs to be preceded by a backslash unless it is a slash.  For example, the context address \\xabcx is equivalent to /abc/.  Also, putting a backslash character before the delimiting character within the regular expression causes the character to be treated literally.  For example, in the context address \\xabc\\xdefx, the RE delimiter is an “x” and the second “x” stands for itself, so that the regular expression is “abcxdef”. 2.   The escape sequence \\n matches a newline character embedded in the pattern space.  You cannot, however, use a literal newline character in an address or in the substitute command. One special feature of sed regular expressions is that they can default to the last regular expression used.  If a regular expression is empty, i.e., just the delimiter characters are specified, the last regular expression encountered is used instead.  The last regular expression is defined as the last regular expression used as part of an address or substitute command, and at run-time, not compile-time.  For example, the command “/abc/s//XXX/” will substitute “XXX” for the pattern “abc”. Sed Functions In the following list of commands, the maximum number of permissible addresses for each command is indicated by [0addr], [1addr], or [2addr], representing zero, one, or two addresses. The argument text consists of one or more lines.  To embed a newline in the text, precede it with a backslash.  Other backslashes in text are deleted and the following character taken literally. The “r” and “w” functions take an optional file parameter, which should be separated from the function letter by white space.  Each file given as an argument to sed is created (or its contents truncated) before any input processing begins. The “b”, “r”, “s”, “t”, “w”, “y”, “!”, and “:” functions all accept additional arguments.  The following synopses indicate which arguments have to be separated from the function letters by white space characters. Two of the functions take a function-list.  This is a list of sed functions separated by newlines, as follows: { function function ... function } The “{” can be preceded by white space and can be followed by white space.  The function can be preceded by white space.  The terminating “}” must be preceded by a newline, and may also be preceded by white space. [2addr] function-list Execute function-list only when the pattern space is selected. [1addr]a\\ text    Write text to standard output immediately before each attempt to read a line of input, whether by executing the “N” function or by beginning a new cycle. [2addr]b[label] Branch to the “:” function with the specified label.  If the label is not specified, branch to the end of the script. [2addr]c\\ text    Delete the pattern space.\tWith 0 or 1 address or at the end of a 2-address range, text is written to the standard output. [2addr]d Delete the pattern space and start the next cycle. [2addr]D Delete the initial segment of the pattern space through the first newline character and start the next cycle. [2addr]g Replace the contents of the pattern space with the contents of the hold space. [2addr]G Append a newline character followed by the contents of the hold space to the pattern space. [2addr]h Replace the contents of the hold space with the contents of the pattern space. [2addr]H Append a newline character followed by the contents of the pattern space to the hold space. [1addr]i\\ text    Write text to the standard output. [2addr]l (The letter ell.)\tWrite the pattern space to the standard output in a visually unambiguous form.  This form is as follows: backslash\t      \\\\ alert\t      \\a form-feed\t      \\f carriage-return    \\r tab\t\t      \\t vertical tab       \\v Nonprintable characters are written as three-digit octal numbers (with a preceding backslash) for each byte in the character (most significant byte first).  Long lines are folded, with the point of folding indicated by displaying a backslash followed by a newline.  The end of each line is marked with a “$”. [2addr]n Write the pattern space to the standard output if the default output has not been suppressed, and replace the pattern space with the next line of input. [2addr]N Append the next line of input to the pattern space, using an embedded newline character to separate the appended material from the original contents.  Note that the current line number changes. [2addr]p Write the pattern space to standard output. [2addr]P Write the pattern space, up to the first newline character to the standard output. [1addr]q Branch to the end of the script and quit without starting a new cycle. [1addr]r file Copy the contents of file to the standard output immediately before the next attempt to read a line of input.  If file cannot be read for any reason, it is silently ignored and no error condition is set. [2addr]s/regular expression/replacement/flags Substitute the replacement string for the first instance of the regular expression in the pattern space.  Any character other than backslash or newline can be used instead of a slash to delimit the RE and the replacement.  Within the RE and the replacement, the RE delimiter itself can be used as a literal character if it is preceded by a backslash. An ampersand (“&”) appearing in the replacement is replaced by the string matching the RE.  The special meaning of “&” in this context can be suppressed by preceding it by a backslash.\tThe string “\\#”, where “#” is a digit, is replaced by the text matched by the corresponding backreference expression (see re_format(7)). A line can be split by substituting a newline character into it. To specify a newline character in the replacement string, precede it with a backslash. The value of flags in the substitute function is zero or more of the following: N\t   Make the substitution only for the N'th occurrence of the regular expression in the pattern space. g\t   Make the substitution for all non-overlapping matches of the regular expression, not just the first one. p\t   Write the pattern space to standard output if a replacement was made.  If the replacement string is identical to that which it replaces, it is still considered to have been a replacement. w file  Append the pattern space to file if a replacement was made.  If the replacement string is identical to that which it replaces, it is still considered to have been a replacement. i or I  Match the regular expression in a case-insensitive way. [2addr]t [label] Branch to the “:” function bearing the label if any substitutions have been made since the most recent reading of an input line or execution of a “t” function.  If no label is specified, branch to the end of the script. [2addr]w file Append the pattern space to the file. [2addr]x Swap the contents of the pattern and hold spaces. [2addr]y/string1/string2/ Replace all occurrences of characters in string1 in the pattern space with the corresponding characters from string2.  Any character other than a backslash or newline can be used instead of a slash to delimit the strings.  Within string1 and string2, a backslash followed by any character other than a newline is that literal character, and a backslash followed by an ``n'' is replaced by a newline character. [2addr]!function [2addr]!function-list Apply the function or function-list only to the lines that are not selected by the address(es). [0addr]:label This function does nothing; it bears a label to which the “b” and “t” commands may branch. [1addr]= Write the line number to the standard output followed by a newline character. [0addr] Empty lines are ignored. [0addr]# The “#” and the remainder of the line are ignored (treated as a comment), with the single exception that if the first two characters in the file are “#n”, the default output is suppressed.  This is the same as specifying the -n option on the command line."
    }
  ],
  "examples": [],
  "relatedCommands": [
    "awk",
    "ed",
    "grep",
    "regex",
    "re_format",
    "sed",
    "stream",
    "editor",
    "command",
    "extension",
    "command_file",
    "utility",
    "reads",
    "specified",
    "standard"
  ],
  "seeAlso": [
    {
      "name": "awk",
      "section": 1
    },
    {
      "name": "ed",
      "section": 1
    },
    {
      "name": "grep",
      "section": 1
    },
    {
      "name": "regex",
      "section": 3
    },
    {
      "name": "re_format",
      "section": 7
    }
  ],
  "metadata": {},
  "searchContent": "sed sed manual page the sed utility reads the specified files or the standard input if no files are specified modifying the input as specified by a list of commands sed -ehalnru command -i extension -i extension file sed -ehalnru -e command -f command file -i extension -i extension file sed manual page utility reads specified files standard input specified modifying list commands -e interpret regular expressions as extended modern regular expressions rather than basic regular expressions bre s the re format 7 manual page fully describes both formats -a the files listed as parameters for the w functions are created or truncated before any processing begins by default the -a option causes sed to delay opening each file until a command containing the related w function is applied to a line of input -e append the editing commands specified by the command argument to the list of commands -f append the editing commands found in the file command file to the list of commands the editing commands should each be listed on a separate line the commands are read from the standard input if command file is - -h enable enhanced features in the regular expression syntax note that this option is independent of the -e option see re format 7 for details -i edit files in-place saving backups with the specified extension if a zero-length extension is given no backup will be saved it is not recommended to give a zero-length extension when in-place editing files as you risk corruption or partial content in situations where disk space is exhausted etc note that in-place editing with -i still takes place in a single continuous line address space covering all files although each file preserves its individuality instead of forming one output stream the line counter is never reset between files address ranges can span file boundaries and the address matches only the last line of the last file see sed addresses that can lead to unexpected results in many cases of in-place editing where using -i is desired -i edit files in-place similarly to -i but treat each file independently from other files in particular line numbers in each file start at 1 the address matches the last line of the current file and address ranges are limited to the current file see sed addresses the net result is as though each file were edited by a separate sed instance -l make output line buffered -n by default each line of input is echoed to the standard output after all of the commands have been applied to it the -n option suppresses this behavior -r same as -e for compatibility with gnu sed -u make output unbuffered the form of a sed command is as follows address address function arguments whitespace may be inserted before the first address and the function portions of the command normally sed cyclically copies a line of input not including its terminating newline character into a pattern space unless there is something left after a d function applies all of the commands with addresses that select that pattern space copies the pattern space to the standard output appending a newline and deletes the pattern space some of the functions use a hold space to save all or part of the pattern space for subsequent retrieval sed addresses an address is not required but if specified must have one of the following formats a number that counts input lines cumulatively across input files or in each file independently if a -i option is in effect a dollar character that addresses the last line of input or the last line of the current file if a -i option was specified a context address that consists of a regular expression preceded and followed by a delimiter the closing delimiter can also optionally be followed by the i character to indicate that the regular expression is to be matched in a case-insensitive way a command line with no addresses selects every pattern space a command line with one address selects all of the pattern spaces that match the address a command line with two addresses selects an inclusive range this range starts with the first pattern space that matches the first address the end of the range is the next following pattern space that matches the second address if the second address is a number less than or equal to the line number first selected only that line is selected the number in the second address may be prefixed with a to specify the number of lines to match after the first pattern in the case when the second address is a context address sed does not re-match the second address against the pattern space that matched the first address starting at the first line following the selected range sed starts looking again for the first address editing commands can be applied to non-selected pattern spaces by use of the exclamation character function sed regular expressions the regular expressions used in sed by default are basic regular expressions bres see re format 7 for more information but extended modern regular expressions can be used instead if the -e flag is given in addition sed has the following two additions to regular expressions 1 in a context address any character other than a backslash or newline character may be used to delimit the regular expression the opening delimiter needs to be preceded by a backslash unless it is a slash for example the context address xabcx is equivalent to abc also putting a backslash character before the delimiting character within the regular expression causes the character to be treated literally for example in the context address xabc xdefx the re delimiter is an x and the second x stands for itself so that the regular expression is abcxdef 2 the escape sequence n matches a newline character embedded in the pattern space you cannot however use a literal newline character in an address or in the substitute command one special feature of sed regular expressions is that they can default to the last regular expression used if a regular expression is empty i e just the delimiter characters are specified the last regular expression encountered is used instead the last regular expression is defined as the last regular expression used as part of an address or substitute command and at run-time not compile-time for example the command abc s xxx will substitute xxx for the pattern abc sed functions in the following list of commands the maximum number of permissible addresses for each command is indicated by 0addr 1addr or 2addr representing zero one or two addresses the argument text consists of one or more lines to embed a newline in the text precede it with a backslash other backslashes in text are deleted and the following character taken literally the r and w functions take an optional file parameter which should be separated from the function letter by white space each file given as an argument to sed is created or its contents truncated before any input processing begins the b r s t w y and functions all accept additional arguments the following synopses indicate which arguments have to be separated from the function letters by white space characters two of the functions take a function-list this is a list of sed functions separated by newlines as follows function function function the can be preceded by white space and can be followed by white space the function can be preceded by white space the terminating must be preceded by a newline and may also be preceded by white space 2addr function-list execute function-list only when the pattern space is selected 1addr a text write text to standard output immediately before each attempt to read a line of input whether by executing the n function or by beginning a new cycle 2addr b label branch to the function with the specified label if the label is not specified branch to the end of the script 2addr c text delete the pattern space with 0 or 1 address or at the end of a 2-address range text is written to the standard output 2addr d delete the pattern space and start the next cycle 2addr d delete the initial segment of the pattern space through the first newline character and start the next cycle 2addr g replace the contents of the pattern space with the contents of the hold space 2addr g append a newline character followed by the contents of the hold space to the pattern space 2addr h replace the contents of the hold space with the contents of the pattern space 2addr h append a newline character followed by the contents of the pattern space to the hold space 1addr i text write text to the standard output 2addr l the letter ell write the pattern space to the standard output in a visually unambiguous form this form is as follows backslash alert a form-feed f carriage-return r tab t vertical tab v nonprintable characters are written as three-digit octal numbers with a preceding backslash for each byte in the character most significant byte first long lines are folded with the point of folding indicated by displaying a backslash followed by a newline the end of each line is marked with a 2addr n write the pattern space to the standard output if the default output has not been suppressed and replace the pattern space with the next line of input 2addr n append the next line of input to the pattern space using an embedded newline character to separate the appended material from the original contents note that the current line number changes 2addr p write the pattern space to standard output 2addr p write the pattern space up to the first newline character to the standard output 1addr q branch to the end of the script and quit without starting a new cycle 1addr r file copy the contents of file to the standard output immediately before the next attempt to read a line of input if file cannot be read for any reason it is silently ignored and no error condition is set 2addr s regular expression replacement flags substitute the replacement string for the first instance of the regular expression in the pattern space any character other than backslash or newline can be used instead of a slash to delimit the re and the replacement within the re and the replacement the re delimiter itself can be used as a literal character if it is preceded by a backslash an ampersand appearing in the replacement is replaced by the string matching the re the special meaning of in this context can be suppressed by preceding it by a backslash the string where is a digit is replaced by the text matched by the corresponding backreference expression see re format 7 a line can be split by substituting a newline character into it to specify a newline character in the replacement string precede it with a backslash the value of flags in the substitute function is zero or more of the following n make the substitution only for the n th occurrence of the regular expression in the pattern space g make the substitution for all non-overlapping matches of the regular expression not just the first one p write the pattern space to standard output if a replacement was made if the replacement string is identical to that which it replaces it is still considered to have been a replacement w file append the pattern space to file if a replacement was made if the replacement string is identical to that which it replaces it is still considered to have been a replacement i or i match the regular expression in a case-insensitive way 2addr t label branch to the function bearing the label if any substitutions have been made since the most recent reading of an input line or execution of a t function if no label is specified branch to the end of the script 2addr w file append the pattern space to the file 2addr x swap the contents of the pattern and hold spaces 2addr y string1 string2 replace all occurrences of characters in string1 in the pattern space with the corresponding characters from string2 any character other than a backslash or newline can be used instead of a slash to delimit the strings within string1 and string2 a backslash followed by any character other than a newline is that literal character and a backslash followed by an n is replaced by a newline character 2addr function 2addr function-list apply the function or function-list only to the lines that are not selected by the address es 0addr label this function does nothing it bears a label to which the b and t commands may branch 1addr write the line number to the standard output followed by a newline character 0addr empty lines are ignored 0addr the and the remainder of the line are ignored treated as a comment with the single exception that if the first two characters in the file are n the default output is suppressed this is the same as specifying the -n option on the command line name -i extension file description macos 15 5 june 10 2020 macos 15 5",
  "keywords": [
    "sed",
    "manual",
    "page",
    "utility",
    "reads",
    "specified",
    "files,",
    "standard",
    "input",
    "specified,",
    "modifying",
    "list",
    "commands."
  ],
  "complexity": "intermediate",
  "hash": "b9d3ba2ca8d5d4c2",
  "parsedAt": "2025-06-17T19:41:55.474Z",
  "parseVersion": "2.0.0",
  "isCommon": true,
  "hasInteractiveExamples": false,
  "hasDiagrams": false
}