{
  "name": "expr",
  "section": 1,
  "title": "expr manual page",
  "description": "The expr utility evaluates expression and writes the result on standard output.",
  "synopsis": "expr expression",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "expands to the required number.",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     expr – evaluate expression\n",
        "     expr expression\n",
        "     The expr utility evaluates expression and writes the result on standard\n     output.\n\n     All operators and operands must be passed as separate arguments.  Several\n     of the operators have special meaning to command interpreters and must\n     therefore be quoted appropriately.  All integer operands are interpreted\n     in base 10 and must consist of only an optional leading minus sign\n     followed by one or more digits.\n\n     Arithmetic operations are performed using signed integer math with a\n     range according to the C intmax_t data type (the largest signed integral\n     type available).  All conversions and operations are checked for\n     overflow.\tOverflow results in program termination with an error message\n     on stdout and with an error status.\n\n     Operators are listed below in order of increasing precedence; all are\n     left-associative.\tOperators with equal precedence are grouped within\n     symbols ‘{’ and ‘}’.\n\n     expr1 | expr2\n\t     Return the evaluation of expr1 if it is neither an empty string\n\t     nor zero; otherwise, returns the evaluation of expr2 if it is not\n\t     an empty string; otherwise, returns zero.\n\n     expr1 & expr2\n\t     Return the evaluation of expr1 if neither expression evaluates to\n\t     an empty string or zero; otherwise, returns zero.\n\n     expr1 {=, >, >=, <, <=, !=} expr2\n\t     Return the results of integer comparison if both arguments are\n\t     integers; otherwise, returns the results of string comparison\n\t     using the locale-specific collation sequence.  The result of each\n\t     comparison is 1 if the specified relation is true, or 0 if the\n\t     relation is false.\n\n     expr1 {+, -} expr2\n\t     Return the results of addition or subtraction of integer-valued\n\t     arguments.\n\n     expr1 {*, /, %} expr2\n\t     Return the results of multiplication, integer division, or\n\t     remainder of integer-valued arguments.\n\n     expr1 : expr2\n\t     The “:” operator matches expr1 against expr2, which must be a\n\t     basic regular expression.\tThe regular expression is anchored to\n\t     the beginning of the string with an implicit “^”.\n\n\t     If the match succeeds and the pattern contains at least one\n\t     regular expression subexpression “\\(...\\)”, the string\n\t     corresponding to “\\1” is returned; otherwise the matching\n\t     operator returns the number of characters matched.  If the match\n\t     fails and the pattern contains a regular expression subexpression\n\t     the null string is returned; otherwise 0.\n\n     Parentheses are used for grouping in the usual manner.\n\n     The expr utility makes no lexical distinction between arguments which may\n     be operators and arguments which may be operands.\tAn operand which is\n     lexically identical to an operator will be considered a syntax error.\n     See the examples below for a work-around.\n\n     The syntax of the expr command in general is historic and inconvenient.\n     New applications are advised to use shell arithmetic rather than expr.\n",
        "     The expr utility exits with one of the following values:\n     0\t     the expression is neither an empty string nor 0.\n     1\t     the expression is an empty string or 0.\n     2\t     the expression is invalid.\n",
        "     •\t The following example (in sh(1) syntax) adds one to the variable a:\n\t       a=$(expr $a + 1)\n\n     •\t This will fail if the value of a is a negative number.  To protect",
        "\t       a=$(expr 1 + $a)\n\n     •\t More generally, parenthesize possibly-negative values:\n\t       a=$(expr \\( $a \\) + 1)\n\n     •\t With shell arithmetic, no escaping is required:\n\t       a=$((a + 1))\n\n     •\t This example prints the filename portion of a pathname stored in",
        "\t       expr \"//$a\" : '.*/\\(.*\\)'\n\n     •\t With modern sh(1) syntax,\n\t       \"${a##*/}\"",
        "     The following examples output the number of characters in variable a.\n     Again, if a might begin with a hyphen, it is necessary to prevent it from\n     being interpreted as an option to expr, and a might be interpreted as an\n     operator.\n\n     •\t To deal with all of this, a complicated command is required:\n\t       expr \\( \"X$a\" : \".*\" \\) - 1\n\n     •\t With modern sh(1) syntax, this can be done much more easily:\n\t       ${#a}"
      ]
    },
    {
      "id": "see-also",
      "title": "SEE ALSO",
      "content": "macOS 15.5\t\t\tOctober 5, 2016 \t\t    macOS 15.5",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     sh(1), test(1)\n",
        "     The expr utility conforms to IEEE Std 1003.1-2008 (“POSIX.1”).\n\n     The extended arithmetic range and overflow checks do not conflict with\n     POSIX's requirement that arithmetic be done using signed longs, since\n     they only make a difference to the result in cases where using signed\n     longs would give undefined behavior.\n\n     According to the POSIX standard, the use of string arguments length,\n     substr, index, or match produces undefined results.  In this version of\n     expr, these arguments are treated just as their respective string values.\n",
        "     An expr utility first appeared in the Programmer's Workbench (PWB/UNIX).\n     A public domain version of expr written by Pace Willisson\n     <pace@blitz.com> appeared in 386BSD-0.1.\n",
        "     Initial implementation by Pace Willisson <pace@blitz.com> was largely\n     rewritten by J.T. Conklin <jtc@FreeBSD.org>.\n"
      ]
    }
  ],
  "flags": [],
  "examples": [],
  "relatedCommands": [
    "sh",
    "test",
    "expr",
    "evaluate",
    "expression",
    "utility",
    "evaluates",
    "writes",
    "result",
    "standard",
    "output",
    "operators",
    "operands",
    "must",
    "passed"
  ],
  "seeAlso": [
    {
      "name": "sh",
      "section": 1
    },
    {
      "name": "test",
      "section": 1
    }
  ],
  "metadata": {},
  "searchContent": "expr expr manual page the expr utility evaluates expression and writes the result on standard output expr expression expr manual page utility evaluates expression writes result standard output name expands to the required number see also macos 15 5 october 5 2016 macos 15 5",
  "keywords": [
    "expr",
    "manual",
    "page",
    "utility",
    "evaluates",
    "expression",
    "writes",
    "result",
    "standard",
    "output."
  ],
  "complexity": "basic",
  "hash": "b50cede5b8c0299e",
  "parsedAt": "2025-06-17T19:42:11.474Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": false,
  "hasDiagrams": false
}