{
  "name": "traceroute",
  "section": 8,
  "title": "traceroute manual page",
  "description": "The Internet is a large and complex aggregation of network hardware, connected together by gateways.",
  "synopsis": "traceroute [-adeEFISdNnrvx] [-A as_server] [-f first_ttl] [-g gateway] [-i iface] [-M first_ttl] [-m max_ttl] [-P proto] [-p port] [-q nqueries] [-s src_addr] [-t tos] [-w waittime] [-z pausemsecs] host [packetsize]",
  "category": "System Administration",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "[-i iface] [-M first_ttl] [-m max_ttl] [-P proto] [-p port]\n\t\t[-q nqueries] [-s src_addr] [-t tos] [-w waittime]\n\t\t[-z pausemsecs] host [packetsize]",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     traceroute – print the route packets take to network host\n",
        "     traceroute [-adeEFISdNnrvx] [-A as_server] [-f first_ttl] [-g gateway]"
      ]
    },
    {
      "id": "description",
      "title": "DESCRIPTION",
      "content": "BSD 4.3 \t\t\t May 29, 2008\t\t\t       BSD 4.3",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     The Internet is a large and complex aggregation of network hardware,\n     connected together by gateways.  Tracking the route one's packets follow\n     (or finding the miscreant gateway that's discarding your packets) can be\n     difficult.  traceroute utilizes the IP protocol `time to live' field and\n     attempts to elicit an ICMP TIME_EXCEEDED response from each gateway along\n     the path to some host.\n\n     The only mandatory parameter is the destination host name or IP number.\n     The default probe datagram length is 40 bytes, but this may be increased\n     by specifying a packet size (in bytes) after the destination host name.\n\n     TCP probes have no payload and the packetsize parameter is ignored for\n     TCP.\n\n     Other options are:\n\n     -a      Turn on AS# lookups for each hop encountered.\n\n     -A as_server\n\t     Turn  on  AS#  lookups  and  use the given server instead of the\n\t     default.\n\n     -d      Enable socket level debugging.\n\n     -D      When an ICMP response to our probe datagram is received, print\n\t     the differences between the transmitted packet and the packet\n\t     quoted by the ICMP response.  A key showing the location of\n\t     fields within the transmitted packet is printed, followed by the\n\t     original packet in hex, followed by the quoted packet in hex.\n\t     Bytes that are unchanged in the quoted packet are shown as\n\t     underscores.  Note, the IP checksum and the TTL of the quoted\n\t     packet are not expected to match.\tBy default, only one probe per\n\t     hop is sent with this option.\n\n     -E      Detect ECN bleaching.  Set the IPTOS_ECN_ECT1 bit and report if\n\t     that value has been bleached or mangled.\n\n     -e      Firewall evasion mode.  Use fixed destination ports for UDP and\n\t     TCP probes.  The destination port does NOT increment with each\n\t     packet sent.\n\n     -f first_ttl\n\t     Set the initial time-to-live used in the first outgoing probe\n\t     packet.\n\n     -F      Set the \"don't fragment\" bit.\n\n     -g gateway\n\t     Specify a loose source route gateway (8 maximum).\n\n     -i iface\n\t     Specify a network interface to obtain the source IP address for\n\t     outgoing probe packets. This is normally only useful on a multi-\n\t     homed host. (See the -s flag for another way to do this.)\n\n     -I      Use ICMP ECHO instead of UDP datagrams.  (A synonym for \"-P\n\t     icmp\").\n\n     -M first_ttl\n\t     Set the initial time-to-live value used in outgoing probe\n\t     packets.  The default is 1, i.e., start with the first hop.\n\n     -m max_ttl\n\t     Set the max time-to-live (max number of hops) used in outgoing\n\t     probe packets.  The default is net.inet.ip.ttl hops (the same\n\t     default used for TCP connections).\n\n     -n      Print hop addresses numerically rather than symbolically and\n\t     numerically (saves a nameserver address-to-name lookup for each\n\t     gateway found on the path).\n\n     -P proto\n\t     Send packets of specified IP protocol. The currently supported\n\t     protocols are: UDP , TCP , GRE and ICMP Other protocols may also\n\t     be specified (either by name or by number), though traceroute\n\t     does not implement any special knowledge of their packet formats.\n\t     This option is useful for determining which router along a path\n\t     may be blocking packets based on IP protocol number. But see BUGS\n\t     below.\n\n     -p port\n\t     Protocol specific. For UDP and TCP, sets the base port number\n\t     used in probes (default is 33434).  traceroute hopes that nothing\n\t     is listening on UDP ports base to base+nhops-1 at the destination\n\t     host (so an ICMP PORT_UNREACHABLE message will be returned to\n\t     terminate the route tracing).  If something is listening on a\n\t     port in the default range, this option can be used to pick an\n\t     unused port range.\n\n     -q nqueries\n\t     Set the number of probes per ``ttl'' to nqueries (default is\n\t     three probes).\n\n     -r      Bypass the normal routing tables and send directly to a host on\n\t     an attached network.  If the host is not on a directly-attached\n\t     network, an error is returned.  This option can be used to ping a\n\t     local host through an interface that has no route through it.\n\n     -s src_addr\n\t     Use the following IP address (which must be given as an IP\n\t     number, not a hostname) as the source address in outgoing probe\n\t     packets.  On hosts with more than one IP address, this option can\n\t     be used to force the source address to be something other than\n\t     the IP address of the interface the probe packet is sent on.  If\n\t     the IP address is not one of this machine's interface addresses,\n\t     an error is returned and nothing is sent.\t(See the -i flag for\n\t     another way to do this.)\n\n     -S      Print a summary of how many probes were not answered for each\n\t     hop.\n\n     -t tos  Set the type-of-service in probe packets to the following value\n\t     (default zero).  The value must be a decimal integer in the range\n\t     0 to 255.\tThis option can be used to see if different types-of-\n\t     service result in different paths.  (If you are not running a\n\t     4.4BSD or later system, this may be academic since the normal\n\t     network services like telnet and ftp don't let you control the\n\t     TOS).  Not all values of TOS are legal or meaningful - see the IP\n\t     spec for definitions.  Useful values are probably ‘-t 16’ (low\n\t     delay) and ‘-t 8’ (high throughput).\n\n     -v      Verbose output.  Received ICMP packets other than TIME_EXCEEDED\n\t     and UNREACHABLEs are listed.\n\n     -w      Set the time (in seconds) to wait for a response to a probe\n\t     (default 5 sec.).\n\n     -x      Toggle IP checksums. Normally, this prevents traceroute from\n\t     calculating IP checksums. In some cases, the operating system can\n\t     overwrite parts of the outgoing packet but not recalculate the\n\t     checksum (so in some cases the default is to not calculate\n\t     checksums and using -x causes them to be calculated). Note that\n\t     checksums are usually required for the last hop when using ICMP\n\t     ECHO probes ( -I ). So they are always calculated when using\n\t     ICMP.\n\n     -z pausemsecs\n\t     Set the time (in milliseconds) to pause between probes (default\n\t     0).  Some systems such as Solaris and routers such as Ciscos rate\n\t     limit ICMP messages. A good value to use with this is 500 (e.g.\n\t     1/2 second).\n\n     This program attempts to trace the route an IP packet would follow to\n     some internet host by launching UDP probe packets with a small ttl (time\n     to live) then listening for an ICMP \"time exceeded\" reply from a gateway.\n     We start our probes with a ttl of one and increase by one until we get an\n     ICMP \"port unreachable\" (which means we got to \"host\") or hit a max\n     (which defaults to net.inet.ip.ttl hops & can be changed with the -m\n     flag).  Three probes (changed with -q flag) are sent at each ttl setting\n     and a line is printed showing the ttl, address of the gateway and round\n     trip time of each probe.  If the probe answers come from different\n     gateways, the address of each responding system will be printed.  If\n     there is no response within a 5 sec. timeout interval (changed with the\n     -w flag), a \"*\" is printed for that probe.\n\n     We don't want the destination host to process the UDP probe packets so\n     the destination port is set to an unlikely value (if some clod on the\n     destination is using that value, it can be changed with the -p flag).\n\n     A sample use and output might be:\n\n     [yak 71]% traceroute nis.nsf.net.\n     traceroute to nis.nsf.net (35.1.1.48), 64 hops max, 38 byte packet\n     1\thelios.ee.lbl.gov (128.3.112.1)  19 ms\t19 ms  0 ms\n     2\tlilac-dmc.Berkeley.EDU (128.32.216.1)  39 ms  39 ms  19 ms\n     3\tlilac-dmc.Berkeley.EDU (128.32.216.1)  39 ms  39 ms  19 ms\n     4\tccngw-ner-cc.Berkeley.EDU (128.32.136.23)  39 ms  40 ms  39 ms\n     5\tccn-nerif22.Berkeley.EDU (128.32.168.22)  39 ms  39 ms\t39 ms\n     6\t128.32.197.4 (128.32.197.4)  40 ms  59 ms  59 ms\n     7\t131.119.2.5 (131.119.2.5)  59 ms  59 ms  59 ms\n     8\t129.140.70.13 (129.140.70.13)  99 ms  99 ms  80 ms\n     9\t129.140.71.6 (129.140.71.6)  139 ms  239 ms  319 ms\n     10  129.140.81.7 (129.140.81.7)  220 ms  199 ms  199 ms\n     11  nic.merit.edu (35.1.1.48)  239 ms  239 ms  239 ms\n\n     Note that lines 2 & 3 are the same.  This is due to a buggy kernel on the\n     2nd hop system - lbl-csam.arpa - that forwards packets with a zero ttl (a\n     bug in the distributed version of 4.3 BSD).  Note that you have to guess\n     what path the packets are taking cross-country since the NSFNet (129.140)\n     doesn't supply address-to-name translations for its NSSes.\n\n     A more interesting example is:\n\n     [yak 72]% traceroute allspice.lcs.mit.edu.\n     traceroute to allspice.lcs.mit.edu (18.26.0.115), 64 hops max\n     1\thelios.ee.lbl.gov (128.3.112.1)  0 ms  0 ms  0 ms\n     2\tlilac-dmc.Berkeley.EDU (128.32.216.1)  19 ms  19 ms  19 ms\n     3\tlilac-dmc.Berkeley.EDU (128.32.216.1)  39 ms  19 ms  19 ms\n     4\tccngw-ner-cc.Berkeley.EDU (128.32.136.23)  19 ms  39 ms  39 ms\n     5\tccn-nerif22.Berkeley.EDU (128.32.168.22)  20 ms  39 ms\t39 ms\n     6\t128.32.197.4 (128.32.197.4)  59 ms  119 ms  39 ms\n     7\t131.119.2.5 (131.119.2.5)  59 ms  59 ms  39 ms\n     8\t129.140.70.13 (129.140.70.13)  80 ms  79 ms  99 ms\n     9\t129.140.71.6 (129.140.71.6)  139 ms  139 ms  159 ms\n     10  129.140.81.7 (129.140.81.7)  199 ms  180 ms  300 ms\n     11  129.140.72.17 (129.140.72.17)\t300 ms\t239 ms\t239 ms\n     12  * * *\n     13  128.121.54.72 (128.121.54.72)\t259 ms\t499 ms\t279 ms\n     14  * * *\n     15  * * *\n     16  * * *\n     17  * * *\n     18  ALLSPICE.LCS.MIT.EDU (18.26.0.115)  339 ms  279 ms  279 ms\n\n     Note that the gateways 12, 14, 15, 16 & 17 hops away either don't send\n     ICMP \"time exceeded\" messages or send them with a ttl too small to reach\n     us.  14 - 17 are running the MIT C Gateway code that doesn't send \"time\n     exceeded\"s.  God only knows what's going on with 12.\n\n     The silent gateway 12 in the above may be the result of a bug in the\n     4.[23] BSD network code (and its derivatives):  4.x (x <= 3) sends an\n     unreachable message using whatever ttl remains in the original datagram.\n     Since, for gateways, the remaining ttl is zero, the ICMP \"time exceeded\"\n     is guaranteed to not make it back to us.  The behavior of this bug is\n     slightly more interesting when it appears on the destination system:\n\n     1\thelios.ee.lbl.gov (128.3.112.1)  0 ms  0 ms  0 ms\n     2\tlilac-dmc.Berkeley.EDU (128.32.216.1)  39 ms  19 ms  39 ms\n     3\tlilac-dmc.Berkeley.EDU (128.32.216.1)  19 ms  39 ms  19 ms\n     4\tccngw-ner-cc.Berkeley.EDU (128.32.136.23)  39 ms  40 ms  19 ms\n     5\tccn-nerif35.Berkeley.EDU (128.32.168.35)  39 ms  39 ms\t39 ms\n     6\tcsgw.Berkeley.EDU (128.32.133.254)  39 ms  59 ms  39 ms\n     7\t* * *\n     8\t* * *\n     9\t* * *\n     10  * * *\n     11  * * *\n     12  * * *\n     13  rip.Berkeley.EDU (128.32.131.22)  59 ms !  39 ms !  39 ms !\n\n     Notice that there are 12 \"gateways\" (13 is the final destination) and\n     exactly the last half of them are \"missing\".  What's really happening is\n     that rip (a Sun-3 running Sun OS3.5) is using the ttl from our arriving\n     datagram as the ttl in its ICMP reply.  So, the reply will time out on\n     the return path (with no notice sent to anyone since ICMP's aren't sent\n     for ICMP's) until we probe with a ttl that's at least twice the path\n     length.  I.e., rip is really only 7 hops away.  A reply that returns with\n     a ttl of 1 is a clue this problem exists.\ttraceroute prints a \"!\" after\n     the time if the ttl is <= 1.  Since vendors ship a lot of obsolete (DEC´s\n     Ultrix, Sun 3.x) or non-standard (HPUX) software, expect to see this\n     problem frequently and/or take care picking the target host of your\n     probes.\n\n     Other possible annotations after the time are !H, !N, or !P (host,\n     network or protocol unreachable), !S (source route failed),\n     (fragmentation needed - the RFC1191 Path MTU Discovery value is\n     displayed), !U or !W (destination network/host unknown), !I (source host\n     is isolated), !A (communication with destination network administratively\n     prohibited), !Z (communication with destination host administratively\n     prohibited), !Q (for this ToS the destination network is unreachable), !T\n     (for this ToS the destination host is unreachable), !X (communication\n     administratively prohibited), !V (host precedence violation), !C\n     (precedence cutoff in effect), or !<num> (ICMP unreachable code <num>).\n     These are defined by RFC1812 (which supersedes RFC1716).  If almost all\n     the probes result in some kind of unreachable, traceroute will give up\n     and exit.\n\n     This program is intended for use in network testing, measurement and\n     management.  It should be used primarily for manual fault isolation.\n     Because of the load it could impose on the network, it is unwise to use\n     traceroute during normal operations or from automated scripts.\n",
        "     Implemented by Van Jacobson from a suggestion by Steve Deering.  Debugged\n     by a cast of thousands with particularly cogent suggestions or fixes from\n     C. Philip Wood, Tim Seaver and Ken Adelman.\n",
        "     netstat(1), ping(8), traceroute6(8)\n",
        "     When using protocols other than UDP, functionality is reduced.  In\n     particular, the last packet will often appear to be lost, because even\n     though it reaches the destination host, there's no way to know that\n     because no ICMP message is sent back.\n\n     The AS number capability reports information that may sometimes be\n     inaccurate due to discrepancies between the contents of the routing\n     database server and the current state of the Internet.\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "-a",
      "description": "Turn on AS# lookups for each hop encountered."
    },
    {
      "flag": "-A",
      "description": " Turn  on  AS#  lookups  and  use the given server instead of the default.",
      "optional": true
    },
    {
      "flag": "-d",
      "description": "Enable socket level debugging."
    },
    {
      "flag": "-D",
      "description": "When an ICMP response to our probe datagram is received, print the differences between the transmitted packet and the packet quoted by the ICMP response.  A key showing the location of fields within the transmitted packet is printed, followed by the original packet in hex, followed by the quoted packet in hex. Bytes that are unchanged in the quoted packet are shown as underscores.  Note, the IP checksum and the TTL of the quoted packet are not expected to match.\tBy default, only one probe per hop is sent with this option."
    },
    {
      "flag": "-E",
      "description": "Detect ECN bleaching.  Set the IPTOS_ECN_ECT1 bit and report if that value has been bleached or mangled."
    },
    {
      "flag": "-e",
      "description": "Firewall evasion mode.  Use fixed destination ports for UDP and TCP probes.  The destination port does NOT increment with each packet sent."
    },
    {
      "flag": "-f",
      "description": " Set the initial time-to-live used in the first outgoing probe packet.",
      "optional": true
    },
    {
      "flag": "-F",
      "description": "Set the \"don't fragment\" bit."
    },
    {
      "flag": "-g",
      "description": " Specify a loose source route gateway (8 maximum).",
      "optional": true
    },
    {
      "flag": "-i",
      "description": " Specify a network interface to obtain the source IP address for outgoing probe packets. This is normally only useful on a multi- homed host. (See the -s flag for another way to do this.)",
      "optional": true
    },
    {
      "flag": "-I",
      "description": "Use ICMP ECHO instead of UDP datagrams.  (A synonym for \"-P icmp\")."
    },
    {
      "flag": "-M",
      "description": " Set the initial time-to-live value used in outgoing probe packets.  The default is 1, i.e., start with the first hop.",
      "optional": true
    },
    {
      "flag": "-m",
      "description": " Set the max time-to-live (max number of hops) used in outgoing probe packets.  The default is net.inet.ip.ttl hops (the same default used for TCP connections).",
      "optional": true
    },
    {
      "flag": "-n",
      "description": "Print hop addresses numerically rather than symbolically and numerically (saves a nameserver address-to-name lookup for each gateway found on the path)."
    },
    {
      "flag": "-P",
      "description": " Send packets of specified IP protocol. The currently supported protocols are: UDP , TCP , GRE and ICMP Other protocols may also be specified (either by name or by number), though traceroute does not implement any special knowledge of their packet formats. This option is useful for determining which router along a path may be blocking packets based on IP protocol number. But see BUGS below.",
      "optional": true
    },
    {
      "flag": "-p",
      "description": " Protocol specific. For UDP and TCP, sets the base port number used in probes (default is 33434).  traceroute hopes that nothing is listening on UDP ports base to base+nhops-1 at the destination host (so an ICMP PORT_UNREACHABLE message will be returned to terminate the route tracing).  If something is listening on a port in the default range, this option can be used to pick an unused port range.",
      "optional": true
    },
    {
      "flag": "-q",
      "description": " Set the number of probes per ``ttl'' to nqueries (default is three probes).",
      "optional": true
    },
    {
      "flag": "-r",
      "description": "Bypass the normal routing tables and send directly to a host on an attached network.  If the host is not on a directly-attached network, an error is returned.  This option can be used to ping a local host through an interface that has no route through it."
    },
    {
      "flag": "-s",
      "description": " Use the following IP address (which must be given as an IP number, not a hostname) as the source address in outgoing probe packets.  On hosts with more than one IP address, this option can be used to force the source address to be something other than the IP address of the interface the probe packet is sent on.  If the IP address is not one of this machine's interface addresses, an error is returned and nothing is sent.\t(See the -i flag for another way to do this.)",
      "optional": true
    },
    {
      "flag": "-S",
      "description": "Print a summary of how many probes were not answered for each hop."
    },
    {
      "flag": "-t",
      "description": " (default zero).  The value must be a decimal integer in the range 0 to 255.\tThis option can be used to see if different types-of- service result in different paths.  (If you are not running a 4.4BSD or later system, this may be academic since the normal network services like telnet and ftp don't let you control the TOS).  Not all values of TOS are legal or meaningful - see the IP spec for definitions.  Useful values are probably ‘-t 16’ (low delay) and ‘-t 8’ (high throughput).",
      "optional": true
    },
    {
      "flag": "-v",
      "description": "Verbose output.  Received ICMP packets other than TIME_EXCEEDED and UNREACHABLEs are listed."
    },
    {
      "flag": "-w",
      "description": " (default 5 sec.). We don't want the destination host to process the UDP probe packets so the destination port is set to an unlikely value (if some clod on the destination is using that value, it can be changed with the -p flag). A sample use and output might be: [yak 71]% traceroute nis.nsf.net. traceroute to nis.nsf.net (35.1.1.48), 64 hops max, 38 byte packet 1\thelios.ee.lbl.gov (128.3.112.1)  19 ms\t19 ms  0 ms 2\tlilac-dmc.Berkeley.EDU (128.32.216.1)  39 ms  39 ms  19 ms 3\tlilac-dmc.Berkeley.EDU (128.32.216.1)  39 ms  39 ms  19 ms 4\tccngw-ner-cc.Berkeley.EDU (128.32.136.23)  39 ms  40 ms  39 ms 5\tccn-nerif22.Berkeley.EDU (128.32.168.22)  39 ms  39 ms\t39 ms 6\t128.32.197.4 (128.32.197.4)  40 ms  59 ms  59 ms 7\t131.119.2.5 (131.119.2.5)  59 ms  59 ms  59 ms 8\t129.140.70.13 (129.140.70.13)  99 ms  99 ms  80 ms 9\t129.140.71.6 (129.140.71.6)  139 ms  239 ms  319 ms 10  129.140.81.7 (129.140.81.7)  220 ms  199 ms  199 ms 11  nic.merit.edu (35.1.1.48)  239 ms  239 ms  239 ms Note that lines 2 & 3 are the same.  This is due to a buggy kernel on the 2nd hop system - lbl-csam.arpa - that forwards packets with a zero ttl (a bug in the distributed version of 4.3 BSD).  Note that you have to guess what path the packets are taking cross-country since the NSFNet (129.140) doesn't supply address-to-name translations for its NSSes. A more interesting example is: [yak 72]% traceroute allspice.lcs.mit.edu. traceroute to allspice.lcs.mit.edu (18.26.0.115), 64 hops max 1\thelios.ee.lbl.gov (128.3.112.1)  0 ms  0 ms  0 ms 2\tlilac-dmc.Berkeley.EDU (128.32.216.1)  19 ms  19 ms  19 ms 3\tlilac-dmc.Berkeley.EDU (128.32.216.1)  39 ms  19 ms  19 ms 4\tccngw-ner-cc.Berkeley.EDU (128.32.136.23)  19 ms  39 ms  39 ms 5\tccn-nerif22.Berkeley.EDU (128.32.168.22)  20 ms  39 ms\t39 ms 6\t128.32.197.4 (128.32.197.4)  59 ms  119 ms  39 ms 7\t131.119.2.5 (131.119.2.5)  59 ms  59 ms  39 ms 8\t129.140.70.13 (129.140.70.13)  80 ms  79 ms  99 ms 9\t129.140.71.6 (129.140.71.6)  139 ms  139 ms  159 ms 10  129.140.81.7 (129.140.81.7)  199 ms  180 ms  300 ms 11  129.140.72.17 (129.140.72.17)\t300 ms\t239 ms\t239 ms 12  * * * 13  128.121.54.72 (128.121.54.72)\t259 ms\t499 ms\t279 ms 14  * * * 15  * * * 16  * * * 17  * * * 18  ALLSPICE.LCS.MIT.EDU (18.26.0.115)  339 ms  279 ms  279 ms Note that the gateways 12, 14, 15, 16 & 17 hops away either don't send ICMP \"time exceeded\" messages or send them with a ttl too small to reach us.  14 - 17 are running the MIT C Gateway code that doesn't send \"time exceeded\"s.  God only knows what's going on with 12. The silent gateway 12 in the above may be the result of a bug in the 4.[23] BSD network code (and its derivatives):  4.x (x <= 3) sends an unreachable message using whatever ttl remains in the original datagram. Since, for gateways, the remaining ttl is zero, the ICMP \"time exceeded\" is guaranteed to not make it back to us.  The behavior of this bug is slightly more interesting when it appears on the destination system: 1\thelios.ee.lbl.gov (128.3.112.1)  0 ms  0 ms  0 ms 2\tlilac-dmc.Berkeley.EDU (128.32.216.1)  39 ms  19 ms  39 ms 3\tlilac-dmc.Berkeley.EDU (128.32.216.1)  19 ms  39 ms  19 ms 4\tccngw-ner-cc.Berkeley.EDU (128.32.136.23)  39 ms  40 ms  19 ms 5\tccn-nerif35.Berkeley.EDU (128.32.168.35)  39 ms  39 ms\t39 ms 6\tcsgw.Berkeley.EDU (128.32.133.254)  39 ms  59 ms  39 ms 7\t* * * 8\t* * * 9\t* * * 10  * * * 11  * * * 12  * * * 13  rip.Berkeley.EDU (128.32.131.22)  59 ms !  39 ms !  39 ms ! Notice that there are 12 \"gateways\" (13 is the final destination) and exactly the last half of them are \"missing\".  What's really happening is that rip (a Sun-3 running Sun OS3.5) is using the ttl from our arriving datagram as the ttl in its ICMP reply.  So, the reply will time out on the return path (with no notice sent to anyone since ICMP's aren't sent for ICMP's) until we probe with a ttl that's at least twice the path length.  I.e., rip is really only 7 hops away.  A reply that returns with a ttl of 1 is a clue this problem exists.\ttraceroute prints a \"!\" after the time if the ttl is <= 1.  Since vendors ship a lot of obsolete (DEC´s Ultrix, Sun 3.x) or non-standard (HPUX) software, expect to see this problem frequently and/or take care picking the target host of your probes. Other possible annotations after the time are !H, !N, or !P (host, network or protocol unreachable), !S (source route failed), (fragmentation needed - the RFC1191 Path MTU Discovery value is displayed), !U or !W (destination network/host unknown), !I (source host is isolated), !A (communication with destination network administratively prohibited), !Z (communication with destination host administratively prohibited), !Q (for this ToS the destination network is unreachable), !T (for this ToS the destination host is unreachable), !X (communication administratively prohibited), !V (host precedence violation), !C (precedence cutoff in effect), or !<num> (ICMP unreachable code <num>). These are defined by RFC1812 (which supersedes RFC1716).  If almost all the probes result in some kind of unreachable, traceroute will give up and exit. This program is intended for use in network testing, measurement and management.  It should be used primarily for manual fault isolation. Because of the load it could impose on the network, it is unwise to use traceroute during normal operations or from automated scripts.",
      "optional": true
    },
    {
      "flag": "-x",
      "description": "Toggle IP checksums. Normally, this prevents traceroute from calculating IP checksums. In some cases, the operating system can overwrite parts of the outgoing packet but not recalculate the checksum (so in some cases the default is to not calculate checksums and using -x causes them to be calculated). Note that checksums are usually required for the last hop when using ICMP ECHO probes ( -I ). So they are always calculated when using ICMP."
    },
    {
      "flag": "-z",
      "description": " Set the time (in milliseconds) to pause between probes (default 0).  Some systems such as Solaris and routers such as Ciscos rate limit ICMP messages. A good value to use with this is 500 (e.g. 1/2 second). This program attempts to trace the route an IP packet would follow to some internet host by launching UDP probe packets with a small ttl (time to live) then listening for an ICMP \"time exceeded\" reply from a gateway. We start our probes with a ttl of one and increase by one until we get an ICMP \"port unreachable\" (which means we got to \"host\") or hit a max (which defaults to net.inet.ip.ttl hops & can be changed with the -m flag).  Three probes (changed with -q flag) are sent at each ttl setting and a line is printed showing the ttl, address of the gateway and round trip time of each probe.  If the probe answers come from different gateways, the address of each responding system will be printed.  If there is no response within a 5 sec. timeout interval (changed with the",
      "optional": true
    },
    {
      "flag": "-w",
      "description": " (default 5 sec.). We don't want the destination host to process the UDP probe packets so the destination port is set to an unlikely value (if some clod on the destination is using that value, it can be changed with the -p flag). A sample use and output might be: [yak 71]% traceroute nis.nsf.net. traceroute to nis.nsf.net (35.1.1.48), 64 hops max, 38 byte packet 1\thelios.ee.lbl.gov (128.3.112.1)  19 ms\t19 ms  0 ms 2\tlilac-dmc.Berkeley.EDU (128.32.216.1)  39 ms  39 ms  19 ms 3\tlilac-dmc.Berkeley.EDU (128.32.216.1)  39 ms  39 ms  19 ms 4\tccngw-ner-cc.Berkeley.EDU (128.32.136.23)  39 ms  40 ms  39 ms 5\tccn-nerif22.Berkeley.EDU (128.32.168.22)  39 ms  39 ms\t39 ms 6\t128.32.197.4 (128.32.197.4)  40 ms  59 ms  59 ms 7\t131.119.2.5 (131.119.2.5)  59 ms  59 ms  59 ms 8\t129.140.70.13 (129.140.70.13)  99 ms  99 ms  80 ms 9\t129.140.71.6 (129.140.71.6)  139 ms  239 ms  319 ms 10  129.140.81.7 (129.140.81.7)  220 ms  199 ms  199 ms 11  nic.merit.edu (35.1.1.48)  239 ms  239 ms  239 ms Note that lines 2 & 3 are the same.  This is due to a buggy kernel on the 2nd hop system - lbl-csam.arpa - that forwards packets with a zero ttl (a bug in the distributed version of 4.3 BSD).  Note that you have to guess what path the packets are taking cross-country since the NSFNet (129.140) doesn't supply address-to-name translations for its NSSes. A more interesting example is: [yak 72]% traceroute allspice.lcs.mit.edu. traceroute to allspice.lcs.mit.edu (18.26.0.115), 64 hops max 1\thelios.ee.lbl.gov (128.3.112.1)  0 ms  0 ms  0 ms 2\tlilac-dmc.Berkeley.EDU (128.32.216.1)  19 ms  19 ms  19 ms 3\tlilac-dmc.Berkeley.EDU (128.32.216.1)  39 ms  19 ms  19 ms 4\tccngw-ner-cc.Berkeley.EDU (128.32.136.23)  19 ms  39 ms  39 ms 5\tccn-nerif22.Berkeley.EDU (128.32.168.22)  20 ms  39 ms\t39 ms 6\t128.32.197.4 (128.32.197.4)  59 ms  119 ms  39 ms 7\t131.119.2.5 (131.119.2.5)  59 ms  59 ms  39 ms 8\t129.140.70.13 (129.140.70.13)  80 ms  79 ms  99 ms 9\t129.140.71.6 (129.140.71.6)  139 ms  139 ms  159 ms 10  129.140.81.7 (129.140.81.7)  199 ms  180 ms  300 ms 11  129.140.72.17 (129.140.72.17)\t300 ms\t239 ms\t239 ms 12  * * * 13  128.121.54.72 (128.121.54.72)\t259 ms\t499 ms\t279 ms 14  * * * 15  * * * 16  * * * 17  * * * 18  ALLSPICE.LCS.MIT.EDU (18.26.0.115)  339 ms  279 ms  279 ms Note that the gateways 12, 14, 15, 16 & 17 hops away either don't send ICMP \"time exceeded\" messages or send them with a ttl too small to reach us.  14 - 17 are running the MIT C Gateway code that doesn't send \"time exceeded\"s.  God only knows what's going on with 12. The silent gateway 12 in the above may be the result of a bug in the 4.[23] BSD network code (and its derivatives):  4.x (x <= 3) sends an unreachable message using whatever ttl remains in the original datagram. Since, for gateways, the remaining ttl is zero, the ICMP \"time exceeded\" is guaranteed to not make it back to us.  The behavior of this bug is slightly more interesting when it appears on the destination system: 1\thelios.ee.lbl.gov (128.3.112.1)  0 ms  0 ms  0 ms 2\tlilac-dmc.Berkeley.EDU (128.32.216.1)  39 ms  19 ms  39 ms 3\tlilac-dmc.Berkeley.EDU (128.32.216.1)  19 ms  39 ms  19 ms 4\tccngw-ner-cc.Berkeley.EDU (128.32.136.23)  39 ms  40 ms  19 ms 5\tccn-nerif35.Berkeley.EDU (128.32.168.35)  39 ms  39 ms\t39 ms 6\tcsgw.Berkeley.EDU (128.32.133.254)  39 ms  59 ms  39 ms 7\t* * * 8\t* * * 9\t* * * 10  * * * 11  * * * 12  * * * 13  rip.Berkeley.EDU (128.32.131.22)  59 ms !  39 ms !  39 ms ! Notice that there are 12 \"gateways\" (13 is the final destination) and exactly the last half of them are \"missing\".  What's really happening is that rip (a Sun-3 running Sun OS3.5) is using the ttl from our arriving datagram as the ttl in its ICMP reply.  So, the reply will time out on the return path (with no notice sent to anyone since ICMP's aren't sent for ICMP's) until we probe with a ttl that's at least twice the path length.  I.e., rip is really only 7 hops away.  A reply that returns with a ttl of 1 is a clue this problem exists.\ttraceroute prints a \"!\" after the time if the ttl is <= 1.  Since vendors ship a lot of obsolete (DEC´s Ultrix, Sun 3.x) or non-standard (HPUX) software, expect to see this problem frequently and/or take care picking the target host of your probes. Other possible annotations after the time are !H, !N, or !P (host, network or protocol unreachable), !S (source route failed), (fragmentation needed - the RFC1191 Path MTU Discovery value is displayed), !U or !W (destination network/host unknown), !I (source host is isolated), !A (communication with destination network administratively prohibited), !Z (communication with destination host administratively prohibited), !Q (for this ToS the destination network is unreachable), !T (for this ToS the destination host is unreachable), !X (communication administratively prohibited), !V (host precedence violation), !C (precedence cutoff in effect), or !<num> (ICMP unreachable code <num>). These are defined by RFC1812 (which supersedes RFC1716).  If almost all the probes result in some kind of unreachable, traceroute will give up and exit. This program is intended for use in network testing, measurement and management.  It should be used primarily for manual fault isolation. Because of the load it could impose on the network, it is unwise to use traceroute during normal operations or from automated scripts.",
      "optional": true
    }
  ],
  "examples": [],
  "relatedCommands": [
    "netstat",
    "ping",
    "traceroute6",
    "traceroute",
    "print",
    "route",
    "packets",
    "take",
    "network",
    "host",
    "as_server",
    "first_ttl",
    "gateway",
    "iface",
    "max_ttl"
  ],
  "seeAlso": [
    {
      "name": "netstat",
      "section": 1
    },
    {
      "name": "ping",
      "section": 8
    },
    {
      "name": "traceroute6",
      "section": 8
    }
  ],
  "metadata": {},
  "searchContent": "traceroute traceroute manual page the internet is a large and complex aggregation of network hardware connected together by gateways traceroute -adeefisdnnrvx -a as server -f first ttl -g gateway -i iface -m first ttl -m max ttl -p proto -p port -q nqueries -s src addr -t tos -w waittime -z pausemsecs host packetsize traceroute manual page internet large complex aggregation network hardware connected together gateways -a turn on as lookups for each hop encountered -a turn on as lookups and use the given server instead of the default -d enable socket level debugging -d when an icmp response to our probe datagram is received print the differences between the transmitted packet and the packet quoted by the icmp response a key showing the location of fields within the transmitted packet is printed followed by the original packet in hex followed by the quoted packet in hex bytes that are unchanged in the quoted packet are shown as underscores note the ip checksum and the ttl of the quoted packet are not expected to match by default only one probe per hop is sent with this option -e detect ecn bleaching set the iptos ecn ect1 bit and report if that value has been bleached or mangled -e firewall evasion mode use fixed destination ports for udp and tcp probes the destination port does not increment with each packet sent -f set the initial time-to-live used in the first outgoing probe packet -f set the don t fragment bit -g specify a loose source route gateway 8 maximum -i specify a network interface to obtain the source ip address for outgoing probe packets this is normally only useful on a multi- homed host see the -s flag for another way to do this -i use icmp echo instead of udp datagrams a synonym for -p icmp -m set the initial time-to-live value used in outgoing probe packets the default is 1 i e start with the first hop -m set the max time-to-live max number of hops used in outgoing probe packets the default is net inet ip ttl hops the same default used for tcp connections -n print hop addresses numerically rather than symbolically and numerically saves a nameserver address-to-name lookup for each gateway found on the path -p send packets of specified ip protocol the currently supported protocols are udp tcp gre and icmp other protocols may also be specified either by name or by number though traceroute does not implement any special knowledge of their packet formats this option is useful for determining which router along a path may be blocking packets based on ip protocol number but see bugs below -p protocol specific for udp and tcp sets the base port number used in probes default is 33434 traceroute hopes that nothing is listening on udp ports base to base nhops-1 at the destination host so an icmp port unreachable message will be returned to terminate the route tracing if something is listening on a port in the default range this option can be used to pick an unused port range -q set the number of probes per ttl to nqueries default is three probes -r bypass the normal routing tables and send directly to a host on an attached network if the host is not on a directly-attached network an error is returned this option can be used to ping a local host through an interface that has no route through it -s use the following ip address which must be given as an ip number not a hostname as the source address in outgoing probe packets on hosts with more than one ip address this option can be used to force the source address to be something other than the ip address of the interface the probe packet is sent on if the ip address is not one of this machine s interface addresses an error is returned and nothing is sent see the -i flag for another way to do this -s print a summary of how many probes were not answered for each hop -t default zero the value must be a decimal integer in the range 0 to 255 this option can be used to see if different types-of- service result in different paths if you are not running a 4 4bsd or later system this may be academic since the normal network services like telnet and ftp don t let you control the tos not all values of tos are legal or meaningful - see the ip spec for definitions useful values are probably -t 16 low delay and -t 8 high throughput -v verbose output received icmp packets other than time exceeded and unreachables are listed -w default 5 sec we don t want the destination host to process the udp probe packets so the destination port is set to an unlikely value if some clod on the destination is using that value it can be changed with the -p flag a sample use and output might be yak 71 traceroute nis nsf net traceroute to nis nsf net 35 1 1 48 64 hops max 38 byte packet 1 helios ee lbl gov 128 3 112 1 19 ms 19 ms 0 ms 2 lilac-dmc berkeley edu 128 32 216 1 39 ms 39 ms 19 ms 3 lilac-dmc berkeley edu 128 32 216 1 39 ms 39 ms 19 ms 4 ccngw-ner-cc berkeley edu 128 32 136 23 39 ms 40 ms 39 ms 5 ccn-nerif22 berkeley edu 128 32 168 22 39 ms 39 ms 39 ms 6 128 32 197 4 128 32 197 4 40 ms 59 ms 59 ms 7 131 119 2 5 131 119 2 5 59 ms 59 ms 59 ms 8 129 140 70 13 129 140 70 13 99 ms 99 ms 80 ms 9 129 140 71 6 129 140 71 6 139 ms 239 ms 319 ms 10 129 140 81 7 129 140 81 7 220 ms 199 ms 199 ms 11 nic merit edu 35 1 1 48 239 ms 239 ms 239 ms note that lines 2 3 are the same this is due to a buggy kernel on the 2nd hop system - lbl-csam arpa - that forwards packets with a zero ttl a bug in the distributed version of 4 3 bsd note that you have to guess what path the packets are taking cross-country since the nsfnet 129 140 doesn t supply address-to-name translations for its nsses a more interesting example is yak 72 traceroute allspice lcs mit edu traceroute to allspice lcs mit edu 18 26 0 115 64 hops max 1 helios ee lbl gov 128 3 112 1 0 ms 0 ms 0 ms 2 lilac-dmc berkeley edu 128 32 216 1 19 ms 19 ms 19 ms 3 lilac-dmc berkeley edu 128 32 216 1 39 ms 19 ms 19 ms 4 ccngw-ner-cc berkeley edu 128 32 136 23 19 ms 39 ms 39 ms 5 ccn-nerif22 berkeley edu 128 32 168 22 20 ms 39 ms 39 ms 6 128 32 197 4 128 32 197 4 59 ms 119 ms 39 ms 7 131 119 2 5 131 119 2 5 59 ms 59 ms 39 ms 8 129 140 70 13 129 140 70 13 80 ms 79 ms 99 ms 9 129 140 71 6 129 140 71 6 139 ms 139 ms 159 ms 10 129 140 81 7 129 140 81 7 199 ms 180 ms 300 ms 11 129 140 72 17 129 140 72 17 300 ms 239 ms 239 ms 12 13 128 121 54 72 128 121 54 72 259 ms 499 ms 279 ms 14 15 16 17 18 allspice lcs mit edu 18 26 0 115 339 ms 279 ms 279 ms note that the gateways 12 14 15 16 17 hops away either don t send icmp time exceeded messages or send them with a ttl too small to reach us 14 - 17 are running the mit c gateway code that doesn t send time exceeded s god only knows what s going on with 12 the silent gateway 12 in the above may be the result of a bug in the 4 23 bsd network code and its derivatives 4 x x 3 sends an unreachable message using whatever ttl remains in the original datagram since for gateways the remaining ttl is zero the icmp time exceeded is guaranteed to not make it back to us the behavior of this bug is slightly more interesting when it appears on the destination system 1 helios ee lbl gov 128 3 112 1 0 ms 0 ms 0 ms 2 lilac-dmc berkeley edu 128 32 216 1 39 ms 19 ms 39 ms 3 lilac-dmc berkeley edu 128 32 216 1 19 ms 39 ms 19 ms 4 ccngw-ner-cc berkeley edu 128 32 136 23 39 ms 40 ms 19 ms 5 ccn-nerif35 berkeley edu 128 32 168 35 39 ms 39 ms 39 ms 6 csgw berkeley edu 128 32 133 254 39 ms 59 ms 39 ms 7 8 9 10 11 12 13 rip berkeley edu 128 32 131 22 59 ms 39 ms 39 ms notice that there are 12 gateways 13 is the final destination and exactly the last half of them are missing what s really happening is that rip a sun-3 running sun os3 5 is using the ttl from our arriving datagram as the ttl in its icmp reply so the reply will time out on the return path with no notice sent to anyone since icmp s aren t sent for icmp s until we probe with a ttl that s at least twice the path length i e rip is really only 7 hops away a reply that returns with a ttl of 1 is a clue this problem exists traceroute prints a after the time if the ttl is 1 since vendors ship a lot of obsolete dec s ultrix sun 3 x or non-standard hpux software expect to see this problem frequently and or take care picking the target host of your probes other possible annotations after the time are h n or p host network or protocol unreachable s source route failed fragmentation needed - the rfc1191 path mtu discovery value is displayed u or w destination network host unknown i source host is isolated a communication with destination network administratively prohibited z communication with destination host administratively prohibited q for this tos the destination network is unreachable t for this tos the destination host is unreachable x communication administratively prohibited v host precedence violation c precedence cutoff in effect or num icmp unreachable code num these are defined by rfc1812 which supersedes rfc1716 if almost all the probes result in some kind of unreachable traceroute will give up and exit this program is intended for use in network testing measurement and management it should be used primarily for manual fault isolation because of the load it could impose on the network it is unwise to use traceroute during normal operations or from automated scripts -x toggle ip checksums normally this prevents traceroute from calculating ip checksums in some cases the operating system can overwrite parts of the outgoing packet but not recalculate the checksum so in some cases the default is to not calculate checksums and using -x causes them to be calculated note that checksums are usually required for the last hop when using icmp echo probes -i so they are always calculated when using icmp -z set the time in milliseconds to pause between probes default 0 some systems such as solaris and routers such as ciscos rate limit icmp messages a good value to use with this is 500 e g 1 2 second this program attempts to trace the route an ip packet would follow to some internet host by launching udp probe packets with a small ttl time to live then listening for an icmp time exceeded reply from a gateway we start our probes with a ttl of one and increase by one until we get an icmp port unreachable which means we got to host or hit a max which defaults to net inet ip ttl hops can be changed with the -m flag three probes changed with -q flag are sent at each ttl setting and a line is printed showing the ttl address of the gateway and round trip time of each probe if the probe answers come from different gateways the address of each responding system will be printed if there is no response within a 5 sec timeout interval changed with the -w default 5 sec we don t want the destination host to process the udp probe packets so the destination port is set to an unlikely value if some clod on the destination is using that value it can be changed with the -p flag a sample use and output might be yak 71 traceroute nis nsf net traceroute to nis nsf net 35 1 1 48 64 hops max 38 byte packet 1 helios ee lbl gov 128 3 112 1 19 ms 19 ms 0 ms 2 lilac-dmc berkeley edu 128 32 216 1 39 ms 39 ms 19 ms 3 lilac-dmc berkeley edu 128 32 216 1 39 ms 39 ms 19 ms 4 ccngw-ner-cc berkeley edu 128 32 136 23 39 ms 40 ms 39 ms 5 ccn-nerif22 berkeley edu 128 32 168 22 39 ms 39 ms 39 ms 6 128 32 197 4 128 32 197 4 40 ms 59 ms 59 ms 7 131 119 2 5 131 119 2 5 59 ms 59 ms 59 ms 8 129 140 70 13 129 140 70 13 99 ms 99 ms 80 ms 9 129 140 71 6 129 140 71 6 139 ms 239 ms 319 ms 10 129 140 81 7 129 140 81 7 220 ms 199 ms 199 ms 11 nic merit edu 35 1 1 48 239 ms 239 ms 239 ms note that lines 2 3 are the same this is due to a buggy kernel on the 2nd hop system - lbl-csam arpa - that forwards packets with a zero ttl a bug in the distributed version of 4 3 bsd note that you have to guess what path the packets are taking cross-country since the nsfnet 129 140 doesn t supply address-to-name translations for its nsses a more interesting example is yak 72 traceroute allspice lcs mit edu traceroute to allspice lcs mit edu 18 26 0 115 64 hops max 1 helios ee lbl gov 128 3 112 1 0 ms 0 ms 0 ms 2 lilac-dmc berkeley edu 128 32 216 1 19 ms 19 ms 19 ms 3 lilac-dmc berkeley edu 128 32 216 1 39 ms 19 ms 19 ms 4 ccngw-ner-cc berkeley edu 128 32 136 23 19 ms 39 ms 39 ms 5 ccn-nerif22 berkeley edu 128 32 168 22 20 ms 39 ms 39 ms 6 128 32 197 4 128 32 197 4 59 ms 119 ms 39 ms 7 131 119 2 5 131 119 2 5 59 ms 59 ms 39 ms 8 129 140 70 13 129 140 70 13 80 ms 79 ms 99 ms 9 129 140 71 6 129 140 71 6 139 ms 139 ms 159 ms 10 129 140 81 7 129 140 81 7 199 ms 180 ms 300 ms 11 129 140 72 17 129 140 72 17 300 ms 239 ms 239 ms 12 13 128 121 54 72 128 121 54 72 259 ms 499 ms 279 ms 14 15 16 17 18 allspice lcs mit edu 18 26 0 115 339 ms 279 ms 279 ms note that the gateways 12 14 15 16 17 hops away either don t send icmp time exceeded messages or send them with a ttl too small to reach us 14 - 17 are running the mit c gateway code that doesn t send time exceeded s god only knows what s going on with 12 the silent gateway 12 in the above may be the result of a bug in the 4 23 bsd network code and its derivatives 4 x x 3 sends an unreachable message using whatever ttl remains in the original datagram since for gateways the remaining ttl is zero the icmp time exceeded is guaranteed to not make it back to us the behavior of this bug is slightly more interesting when it appears on the destination system 1 helios ee lbl gov 128 3 112 1 0 ms 0 ms 0 ms 2 lilac-dmc berkeley edu 128 32 216 1 39 ms 19 ms 39 ms 3 lilac-dmc berkeley edu 128 32 216 1 19 ms 39 ms 19 ms 4 ccngw-ner-cc berkeley edu 128 32 136 23 39 ms 40 ms 19 ms 5 ccn-nerif35 berkeley edu 128 32 168 35 39 ms 39 ms 39 ms 6 csgw berkeley edu 128 32 133 254 39 ms 59 ms 39 ms 7 8 9 10 11 12 13 rip berkeley edu 128 32 131 22 59 ms 39 ms 39 ms notice that there are 12 gateways 13 is the final destination and exactly the last half of them are missing what s really happening is that rip a sun-3 running sun os3 5 is using the ttl from our arriving datagram as the ttl in its icmp reply so the reply will time out on the return path with no notice sent to anyone since icmp s aren t sent for icmp s until we probe with a ttl that s at least twice the path length i e rip is really only 7 hops away a reply that returns with a ttl of 1 is a clue this problem exists traceroute prints a after the time if the ttl is 1 since vendors ship a lot of obsolete dec s ultrix sun 3 x or non-standard hpux software expect to see this problem frequently and or take care picking the target host of your probes other possible annotations after the time are h n or p host network or protocol unreachable s source route failed fragmentation needed - the rfc1191 path mtu discovery value is displayed u or w destination network host unknown i source host is isolated a communication with destination network administratively prohibited z communication with destination host administratively prohibited q for this tos the destination network is unreachable t for this tos the destination host is unreachable x communication administratively prohibited v host precedence violation c precedence cutoff in effect or num icmp unreachable code num these are defined by rfc1812 which supersedes rfc1716 if almost all the probes result in some kind of unreachable traceroute will give up and exit this program is intended for use in network testing measurement and management it should be used primarily for manual fault isolation because of the load it could impose on the network it is unwise to use traceroute during normal operations or from automated scripts name -i iface -m first ttl -m max ttl -p proto -p port -q nqueries -s src addr -t tos -w waittime -z pausemsecs host packetsize description bsd 4 3 may 29 2008 bsd 4 3",
  "keywords": [
    "traceroute",
    "manual",
    "page",
    "internet",
    "large",
    "complex",
    "aggregation",
    "network",
    "hardware,",
    "connected",
    "together",
    "gateways."
  ],
  "complexity": "advanced",
  "hash": "7b6f9cbd3e2538e4",
  "parsedAt": "2025-06-17T19:42:03.273Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": false,
  "hasDiagrams": false
}