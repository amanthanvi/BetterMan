{
  "name": "fdisk",
  "section": 8,
  "title": "fdisk manual page",
  "description": "In order for the BIOS to boot the kernel, certain conventions must be adhered to.",
  "synopsis": "fdisk [-ieu] [-f mbrname] [-c cylinders] [-h heads] [-s sectors] [-S size] [-b size] device",
  "category": "System Administration",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "macOS 15.5\t\t\tJanuary 3, 2002 \t\t    macOS 15.5",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     fdisk – DOS partition maintenance program\n",
        "     fdisk [-ieu] [-f mbrname] [-c cylinders] [-h heads] [-s sectors]\n\t   [-S size] [-b size] device\n",
        "     In order for the BIOS to boot the kernel, certain conventions must be\n     adhered to.  Sector 0 of a bootable hard disk must contain boot code, an\n     MBR partition table, and a magic number (0xAA55).\tThese MBR partitions\n     (also known as BIOS partitions) can be used to break the disk up into\n     several pieces.\n\n     The BIOS loads sector 0 of the boot disk into memory, verifies the magic\n     number, and begins executing the code at the first byte.  The normal DOS\n     MBR boot code searches the MBR partition table for an “active” partition\n     (indicated by a ‘*’ in the first column), and if one is found, the boot\n     block from that partition is loaded and executed in place of the original\n     (MBR) boot block.\n\n     The options are as follows:\n\n     -i      Initialize the MBR sector.\n\n     -a style\n\t     Specify an automatic partitioning style.\n\n     -e      Edit existing MBR sectors.\n\n     -f mbrname\n\t     Specifies an alternate MBR template file.\n\n     -u      Update MBR code, preserving existing partition table.\n\n     -y      Do not ask for confirmation before writing.\n\n     -d      Dump partition table in a format readable by the -r option.\n\n     -r      Read a partition table from the standard input.\n\n     -t      Test if the disk is partitioned.\n\n     -c cylinders, -h heads, -s sectors\n\t     Specifies an alternate BIOS geometry for fdisk to use.\n\n     -S size\n\t     Specify the disk size in blocks.\n\n     -b size\n\t     Specify the number of bytes per disk block.\n\n     The DOS fdisk program can be used to divide space on the disk into\n     partitions and set one active.  This fdisk program serves a similar\n     purpose to the DOS program.  When called with no special flags, it prints\n     the MBR partition table of the specified device, i.e.,\n",
        "\t\t  Starting\t  Ending",
        "     The geometry displayed is a synthetic geometry unless another geometry\n     has been selected using the -c, -h, -s, -S, and -b options.  In the\n     future, fdisk will read the BIOS geometry from the IOKit registry.\n\n     In this example, the disk is divided into two partitions that happen to\n     fill the disk.  The first partition overlaps the third partition.\t(Used\n     for debugging purposes.)\n\n     #\t\t Number of partition table entry.  A “*” denotes the bootable",
        "     id \t System identifier.  OpenBSD reserves the magic number 166",
        "     cyl/hd/sec  These fields provide the starting and ending address of the",
        "     start/size  These fields provide the starting sector and size in sectors",
        "     NOTE: The sectors field is “1 based”, and the start field is “0 based”.\n     The CHS values may need to be in the BIOS's geometry for older systems to\n     be able to boot and use the drive correctly; most modern systems prefer\n     the starting sector and size in preference to the CHS values.\n\n     The -i flag is used to indicate that the partition data is to be\n     initialized.  In this mode, fdisk will completely overwrite the primary\n     MBR and partition table, either using the default MBR template, or the\n     one specified by the -f flag.\n\n     In the default template, partition number 1 will be configured as a\n     Darwin boot partition spanning from cylinder 0, head 1, sector 1, and\n     extending for 8 megabytes.  Partition number 2 will be configured as a\n     Darwin HFS partition spanning the rest of the disk.  This mode is\n     designed to initialize an MBR the very first time, or when it has been\n     corrupted beyond repair.\n\n     You can specify other default partition styles with the -a flag.  The\n     available styles are:\n\n     boothfs\t Creates an 8Mb boot partition (type AB hex) and makes the",
        "     hfs\t Makes the entire disk one HFS+ partition (type AF hex).\n\n     dos\t Makes the entire disk one DOS partition (type 0C hex).\n\n     raid\t Makes the entire disk one type AC hex partition.\n\n     The -u flag is used to update the MBR code on a given drive.  The MBR\n     code extends from offset 0x000 to the start of the partition table at\n     offset 0x1BE.  It is similar to the -i flag, except the existing\n     partition table is preserved. This is useful for writing new MBR code\n     onto an existing drive, and is equivalent to the DOS command “FDISK\n     /MBR”.  Note that this option will overwrite the NT disk signature, if\n     present.  The -u and -i flags may not be specified together.\n\n     The flag -e is used to modify a partition table using a interactive edit\n     mode of the fdisk program.  This mode is designed to allow you to change\n     any partition on the drive you choose, including extended partitions.  It\n     is a very powerful mode, but is safe as long as you do not execute the\n     write command, or answer in the negative (the default) when fdisk asks\n     you about writing out changes.\n",
        "     When you first enter this mode, you are presented with a prompt, that\n     looks like so: fdisk: 0>.\tThis prompt has two important pieces of\n     information for you.  It will tell you if the in-memory copy of the boot\n     block has been modified or not.  If it has been modified, the prompt will\n     change to look like: fdisk:*0>.  The second piece of information pertains\n     to the number given in the prompt.  This number specifies the disk offset\n     of the currently selected boot block you are editing.  This number could\n     be something different that zero when you are editing extended\n     partitions.  The list of commands and their explanations are given below.\n\n     help    Display a list of commands that fdisk understands in the\n\t     interactive edit mode.\n\n     manual  Display this manual page.\n\n     reinit  Initialize the currently selected, in-memory copy of the boot\n\t     block.\n\n     auto    Partition the disk with one of the automatic partition styles.\n\n     disk    Display the current drive geometry that fdisk has probed.\tYou\n\t     are given a chance to edit it if you wish.\n\n     edit    Edit a given table entry in the memory copy of the current boot\n\t     block.  You may edit either in BIOS geometry mode, or in sector\n\t     offsets and sizes.\n\n     setpid  Change the partition identifier of the given partition table\n\t     entry.  This command is particularly useful for reassigning an\n\t     existing partition to OpenBSD.\n\n     flag    Make the given partition table entry bootable.  Only one entry\n\t     can be marked bootable.  If you wish to boot from an extended\n\t     partition, you will need to mark the partition table entry for\n\t     the extended partition as bootable.\n\n     update  Update the machine code in the memory copy of the currently\n\t     selected boot block.  Note that this option will overwrite the NT\n\t     disk signature, if present.\n\n     select  Select and load into memory the boot block pointed to by the\n\t     extended partition table entry in the current boot block.\n\n     print   Print the currently selected in-memory copy of the boot block and\n\t     its MBR table to the terminal.\n\n     write   Write the in-memory copy of the boot block to disk.  You will be\n\t     asked to confirm this operation.\n\n     exit    Exit the current level of fdisk, either returning to the\n\t     previously selected in-memory copy of a boot block, or exiting\n\t     the program if there is none.\n\n     quit    Exit the current level of fdisk, either returning to the\n\t     previously selected in-memory copy of a boot block, or exiting\n\t     the program if there is none.  Unlike exit it does write the\n\t     modified block out.\n\n     abort   Quit program without saving current changes.\n",
        "     The automatic calculation of starting cylinder etc. uses a set of figures\n     that represent what the BIOS thinks is the geometry of the drive.\tThese\n     figures are by default taken from the in-core disklabel, or values that\n     /boot has passed to the kernel, but fdisk gives you an opportunity to\n     change them if there is a need to.  This allows the user to create a\n     bootblock that can work with drives that use geometry translation under a\n     potentially different BIOS.\n\n     If you hand craft your disk layout, please make sure that the OpenBSD\n     partition starts on a cylinder boundary.  (This restriction may be\n     changed in the future.)\n\n     Editing an existing partition is risky, and may cause you to lose all the\n     data in that partition.\n\n     You should run this program interactively once or twice to see how it\n     works.  This is completely safe as long as you answer the “write”\n     questions in the negative.\n",
        "     /usr/mdec/mbr  default MBR template\n",
        "     gpt(8), pdisk(8)\n",
        "     There are subtleties fdisk detects that are not explained in this manual\n     page.  As well, chances are that some of the subtleties it should detect\n     are being steamrolled.  Caveat Emptor.\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "-i",
      "description": "Initialize the MBR sector."
    },
    {
      "flag": "-a",
      "description": "style Specify an automatic partitioning style."
    },
    {
      "flag": "-e",
      "description": "Edit existing MBR sectors."
    },
    {
      "flag": "-f",
      "description": " Specifies an alternate MBR template file.",
      "optional": true
    },
    {
      "flag": "-u",
      "description": "Update MBR code, preserving existing partition table."
    },
    {
      "flag": "-y",
      "description": "Do not ask for confirmation before writing."
    },
    {
      "flag": "-d",
      "description": "Dump partition table in a format readable by the -r option."
    },
    {
      "flag": "-r",
      "description": "Read a partition table from the standard input."
    },
    {
      "flag": "-t",
      "description": "Test if the disk is partitioned."
    },
    {
      "flag": "-c",
      "description": " Specifies an alternate BIOS geometry for fdisk to use.",
      "optional": true
    },
    {
      "flag": "-S",
      "description": " Specify the disk size in blocks.",
      "optional": true
    },
    {
      "flag": "-b",
      "description": " Specify the number of bytes per disk block. The DOS fdisk program can be used to divide space on the disk into partitions and set one active.  This fdisk program serves a similar purpose to the DOS program.  When called with no special flags, it prints the MBR partition table of the specified device, i.e., # fdisk fd0 Disk: fd0\t geometry: 80/2/18 [2880 sectors] Offset: 0\t Signature: 0xAA55 Starting\t  Ending #: id  cyl  hd sec -\tcyl  hd sec [\t  start -\tsize] ---------------------------------------------------------------------- *1: A6    0   0   1 -\t 79   1  18 [\t      0 -\t2880] OpenBSD 2: 00    0   0   0 -\t  0   0   0 [\t      0 -\t   0] unused 3: A7    0   0   2 -\t 79   1  18 [\t      1 -\t2879] NEXTSTEP 4: 00    0   0   0 -\t  0   0   0 [\t      0 -\t   0] unused The geometry displayed is a synthetic geometry unless another geometry has been selected using the -c, -h, -s, -S, and -b options.  In the future, fdisk will read the BIOS geometry from the IOKit registry. In this example, the disk is divided into two partitions that happen to fill the disk.  The first partition overlaps the third partition.\t(Used for debugging purposes.) #\t\t Number of partition table entry.  A “*” denotes the bootable partition. id \t System identifier.  OpenBSD reserves the magic number 166 decimal (A6 in hex).  If no 166 partition is found, it will use an older FreeBSD partition (with a magic number of 165 or A5 in hex). cyl/hd/sec  These fields provide the starting and ending address of the partition in BIOS geometry start/size  These fields provide the starting sector and size in sectors of the partition in linear block addresses. NOTE: The sectors field is “1 based”, and the start field is “0 based”. The CHS values may need to be in the BIOS's geometry for older systems to be able to boot and use the drive correctly; most modern systems prefer the starting sector and size in preference to the CHS values. The -i flag is used to indicate that the partition data is to be initialized.  In this mode, fdisk will completely overwrite the primary MBR and partition table, either using the default MBR template, or the one specified by the -f flag. In the default template, partition number 1 will be configured as a Darwin boot partition spanning from cylinder 0, head 1, sector 1, and extending for 8 megabytes.  Partition number 2 will be configured as a Darwin HFS partition spanning the rest of the disk.  This mode is designed to initialize an MBR the very first time, or when it has been corrupted beyond repair. You can specify other default partition styles with the -a flag.  The available styles are: boothfs\t Creates an 8Mb boot partition (type AB hex) and makes the rest of the disk a Darwin HFS partition (type AF hex). hfs\t Makes the entire disk one HFS+ partition (type AF hex). dos\t Makes the entire disk one DOS partition (type 0C hex). raid\t Makes the entire disk one type AC hex partition. The -u flag is used to update the MBR code on a given drive.  The MBR code extends from offset 0x000 to the start of the partition table at offset 0x1BE.  It is similar to the -i flag, except the existing partition table is preserved. This is useful for writing new MBR code onto an existing drive, and is equivalent to the DOS command “FDISK /MBR”.  Note that this option will overwrite the NT disk signature, if present.  The -u and -i flags may not be specified together. The flag -e is used to modify a partition table using a interactive edit mode of the fdisk program.  This mode is designed to allow you to change any partition on the drive you choose, including extended partitions.  It is a very powerful mode, but is safe as long as you do not execute the write command, or answer in the negative (the default) when fdisk asks you about writing out changes. COMMAND MODE When you first enter this mode, you are presented with a prompt, that looks like so: fdisk: 0>.\tThis prompt has two important pieces of information for you.  It will tell you if the in-memory copy of the boot block has been modified or not.  If it has been modified, the prompt will change to look like: fdisk:*0>.  The second piece of information pertains to the number given in the prompt.  This number specifies the disk offset of the currently selected boot block you are editing.  This number could be something different that zero when you are editing extended partitions.  The list of commands and their explanations are given below. help    Display a list of commands that fdisk understands in the interactive edit mode. manual  Display this manual page. reinit  Initialize the currently selected, in-memory copy of the boot block. auto    Partition the disk with one of the automatic partition styles. disk    Display the current drive geometry that fdisk has probed.\tYou are given a chance to edit it if you wish. edit    Edit a given table entry in the memory copy of the current boot block.  You may edit either in BIOS geometry mode, or in sector offsets and sizes. setpid  Change the partition identifier of the given partition table entry.  This command is particularly useful for reassigning an existing partition to OpenBSD. flag    Make the given partition table entry bootable.  Only one entry can be marked bootable.  If you wish to boot from an extended partition, you will need to mark the partition table entry for the extended partition as bootable. update  Update the machine code in the memory copy of the currently selected boot block.  Note that this option will overwrite the NT disk signature, if present. select  Select and load into memory the boot block pointed to by the extended partition table entry in the current boot block. print   Print the currently selected in-memory copy of the boot block and its MBR table to the terminal. write   Write the in-memory copy of the boot block to disk.  You will be asked to confirm this operation. exit    Exit the current level of fdisk, either returning to the previously selected in-memory copy of a boot block, or exiting the program if there is none. quit    Exit the current level of fdisk, either returning to the previously selected in-memory copy of a boot block, or exiting the program if there is none.  Unlike exit it does write the modified block out. abort   Quit program without saving current changes.",
      "optional": true
    }
  ],
  "examples": [],
  "relatedCommands": [
    "gpt",
    "pdisk",
    "fdisk",
    "partition",
    "maintenance",
    "program",
    "ieu",
    "mbrname",
    "cylinders",
    "heads",
    "sectors",
    "size",
    "device",
    "order",
    "boot"
  ],
  "seeAlso": [
    {
      "name": "gpt",
      "section": 8
    },
    {
      "name": "pdisk",
      "section": 8
    }
  ],
  "metadata": {},
  "searchContent": "fdisk fdisk manual page in order for the bios to boot the kernel certain conventions must be adhered to fdisk -ieu -f mbrname -c cylinders -h heads -s sectors -s size -b size device fdisk manual page order bios boot kernel certain conventions must adhered -i initialize the mbr sector -a style specify an automatic partitioning style -e edit existing mbr sectors -f specifies an alternate mbr template file -u update mbr code preserving existing partition table -y do not ask for confirmation before writing -d dump partition table in a format readable by the -r option -r read a partition table from the standard input -t test if the disk is partitioned -c specifies an alternate bios geometry for fdisk to use -s specify the disk size in blocks -b specify the number of bytes per disk block the dos fdisk program can be used to divide space on the disk into partitions and set one active this fdisk program serves a similar purpose to the dos program when called with no special flags it prints the mbr partition table of the specified device i e fdisk fd0 disk fd0 geometry 80 2 18 2880 sectors offset 0 signature 0xaa55 starting ending id cyl hd sec - cyl hd sec start - size ---------------------------------------------------------------------- 1 a6 0 0 1 - 79 1 18 0 - 2880 openbsd 2 00 0 0 0 - 0 0 0 0 - 0 unused 3 a7 0 0 2 - 79 1 18 1 - 2879 nextstep 4 00 0 0 0 - 0 0 0 0 - 0 unused the geometry displayed is a synthetic geometry unless another geometry has been selected using the -c -h -s -s and -b options in the future fdisk will read the bios geometry from the iokit registry in this example the disk is divided into two partitions that happen to fill the disk the first partition overlaps the third partition used for debugging purposes number of partition table entry a denotes the bootable partition id system identifier openbsd reserves the magic number 166 decimal a6 in hex if no 166 partition is found it will use an older freebsd partition with a magic number of 165 or a5 in hex cyl hd sec these fields provide the starting and ending address of the partition in bios geometry start size these fields provide the starting sector and size in sectors of the partition in linear block addresses note the sectors field is 1 based and the start field is 0 based the chs values may need to be in the bios s geometry for older systems to be able to boot and use the drive correctly most modern systems prefer the starting sector and size in preference to the chs values the -i flag is used to indicate that the partition data is to be initialized in this mode fdisk will completely overwrite the primary mbr and partition table either using the default mbr template or the one specified by the -f flag in the default template partition number 1 will be configured as a darwin boot partition spanning from cylinder 0 head 1 sector 1 and extending for 8 megabytes partition number 2 will be configured as a darwin hfs partition spanning the rest of the disk this mode is designed to initialize an mbr the very first time or when it has been corrupted beyond repair you can specify other default partition styles with the -a flag the available styles are boothfs creates an 8mb boot partition type ab hex and makes the rest of the disk a darwin hfs partition type af hex hfs makes the entire disk one hfs partition type af hex dos makes the entire disk one dos partition type 0c hex raid makes the entire disk one type ac hex partition the -u flag is used to update the mbr code on a given drive the mbr code extends from offset 0x000 to the start of the partition table at offset 0x1be it is similar to the -i flag except the existing partition table is preserved this is useful for writing new mbr code onto an existing drive and is equivalent to the dos command fdisk mbr note that this option will overwrite the nt disk signature if present the -u and -i flags may not be specified together the flag -e is used to modify a partition table using a interactive edit mode of the fdisk program this mode is designed to allow you to change any partition on the drive you choose including extended partitions it is a very powerful mode but is safe as long as you do not execute the write command or answer in the negative the default when fdisk asks you about writing out changes command mode when you first enter this mode you are presented with a prompt that looks like so fdisk 0 this prompt has two important pieces of information for you it will tell you if the in-memory copy of the boot block has been modified or not if it has been modified the prompt will change to look like fdisk 0 the second piece of information pertains to the number given in the prompt this number specifies the disk offset of the currently selected boot block you are editing this number could be something different that zero when you are editing extended partitions the list of commands and their explanations are given below help display a list of commands that fdisk understands in the interactive edit mode manual display this manual page reinit initialize the currently selected in-memory copy of the boot block auto partition the disk with one of the automatic partition styles disk display the current drive geometry that fdisk has probed you are given a chance to edit it if you wish edit edit a given table entry in the memory copy of the current boot block you may edit either in bios geometry mode or in sector offsets and sizes setpid change the partition identifier of the given partition table entry this command is particularly useful for reassigning an existing partition to openbsd flag make the given partition table entry bootable only one entry can be marked bootable if you wish to boot from an extended partition you will need to mark the partition table entry for the extended partition as bootable update update the machine code in the memory copy of the currently selected boot block note that this option will overwrite the nt disk signature if present select select and load into memory the boot block pointed to by the extended partition table entry in the current boot block print print the currently selected in-memory copy of the boot block and its mbr table to the terminal write write the in-memory copy of the boot block to disk you will be asked to confirm this operation exit exit the current level of fdisk either returning to the previously selected in-memory copy of a boot block or exiting the program if there is none quit exit the current level of fdisk either returning to the previously selected in-memory copy of a boot block or exiting the program if there is none unlike exit it does write the modified block out abort quit program without saving current changes name macos 15 5 january 3 2002 macos 15 5",
  "keywords": [
    "fdisk",
    "manual",
    "page",
    "order",
    "bios",
    "boot",
    "kernel,",
    "certain",
    "conventions",
    "must",
    "adhered"
  ],
  "complexity": "intermediate",
  "hash": "8cdf2fa52a554648",
  "parsedAt": "2025-06-17T19:42:09.081Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": false,
  "hasDiagrams": false
}