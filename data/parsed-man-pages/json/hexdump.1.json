{
  "name": "hexdump",
  "section": 1,
  "title": "hexdump manual page",
  "description": "The hexdump utility is a filter which displays the specified files, or the standard input, if no files are specified, in a user specified format.",
  "synopsis": "hexdump [-bcCdovx] [-e format_string] [-f format_file] [-n length] [-s offset] file ...",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "macOS 15.5\t\t\t June 29, 2020\t\t\t    macOS 15.5",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     hexdump – ASCII, decimal, hexadecimal, octal dump\n",
        "     hexdump [-bcCdovx] [-e format_string] [-f format_file] [-n length]\n\t     [-s offset] file ...\n",
        "     The hexdump utility is a filter which displays the specified files, or\n     the standard input, if no files are specified, in a user specified\n     format.\n\n     The options are as follows:\n\n     -b      One-byte octal display.  Display the input offset in hexadecimal,\n\t     followed by sixteen space-separated, three column, zero-filled,\n\t     bytes of input data, in octal, per line.\n\n     -c      One-byte character display.  Display the input offset in\n\t     hexadecimal, followed by sixteen space-separated, three column,\n\t     space-filled, characters of input data per line.\n\n     -C      Canonical hex+ASCII display.  Display the input offset in\n\t     hexadecimal, followed by sixteen space-separated, two column,\n\t     hexadecimal bytes, followed by the same sixteen bytes in %_p\n\t     format enclosed in ``|'' characters.\n\n     -d      Two-byte decimal display.\tDisplay the input offset in\n\t     hexadecimal, followed by eight space-separated, five column,\n\t     zero-filled, two-byte units of input data, in unsigned decimal,\n\t     per line.\n\n     -e format_string\n\t     Specify a format string to be used for displaying data.\n\n     -f format_file\n\t     Specify a file that contains one or more newline separated format\n\t     strings.  Empty lines and lines whose first non-blank character\n\t     is a hash mark (#) are ignored.\n\n     -n length\n\t     Interpret only length bytes of input.\n\n     -o      Two-byte octal display.  Display the input offset in hexadecimal,\n\t     followed by eight space-separated, six column, zero-filled, two\n\t     byte quantities of input data, in octal, per line.\n\n     -s offset\n\t     Skip offset bytes from the beginning of the input.  By default,\n\t     offset is interpreted as a decimal number.  With a leading 0x or\n\t     0X, offset is interpreted as a hexadecimal number, otherwise,\n\t     with a leading 0, offset is interpreted as an octal number.\n\t     Appending the character b, k, m, or g to offset causes it to be\n\t     interpreted as a multiple of 512, 1024, 1048576, or 1073741824,\n\t     respectively.\n\n     -v      Cause hexdump to display all input data.  Without the -v option,\n\t     any number of groups of output lines, which would be identical to\n\t     the immediately preceding group of output lines (except for the\n\t     input offsets), are replaced with a line comprised of a single\n\t     asterisk.\n\n     -x      Two-byte hexadecimal display.  Display the input offset in\n\t     hexadecimal, followed by eight, space separated, four column,\n\t     zero-filled, two-byte quantities of input data, in hexadecimal,\n\t     per line.\n\n     For each input file, hexdump sequentially copies the input to standard\n     output, transforming the data according to the format strings specified\n     by the -e and -f options, in the order that they were specified.\n",
        "     A format string contains any number of format units, separated by\n     whitespace.  A format unit contains up to three items: an iteration\n     count, a byte count, and a format.\n\n     The iteration count is an optional positive integer, which defaults to\n     one.  Each format is applied iteration count times.\n\n     The byte count is an optional positive integer.  If specified it defines\n     the number of bytes to be interpreted by each iteration of the format.\n\n     If an iteration count and/or a byte count is specified, a single slash\n     must be placed after the iteration count and/or before the byte count to\n     disambiguate them.  Any whitespace before or after the slash is ignored.\n\n     The format is required and must be surrounded by double quote (\" \")\n     marks.  It is interpreted as a fprintf-style format string (see\n     fprintf(3)), with the following exceptions:\n\n\t   •   An asterisk (*) may not be used as a field width or precision.\n\n\t   •   A byte count or field precision is required for each ``s''\n\t       conversion character (unlike the fprintf(3) default which\n\t       prints the entire string if the precision is unspecified).\n\n\t   •   The conversion characters ``h'', ``l'', ``n'', ``p'' and ``q''\n\t       are not supported.\n\n\t   •   The single character escape sequences described in the C\n\t       standard are supported:\n\n\t\t     NUL\t\t  \\0\n\t\t     <alert character>\t  \\a\n\t\t     <backspace>\t  \\b\n\t\t     <form-feed>\t  \\f\n\t\t     <newline>\t\t  \\n\n\t\t     <carriage return>\t  \\r\n\t\t     <tab>\t\t  \\t\n\t\t     <vertical tab>\t  \\v\n\n     The hexdump utility also supports the following additional conversion\n     strings:\n\n     _a[dox]\t Display the input offset, cumulative across input files, of",
        "     _A[dox]\t Identical to the _a conversion string except that it is only",
        "     _c \t Output characters in the default character set.  Nonprinting",
        "     _p \t Output characters in the default character set.  Nonprinting",
        "     _u \t Output US ASCII characters, with the exception that control",
        "     The default and supported byte counts for the conversion characters are\n     as follows:\n\n\t   %_c, %_p, %_u, %c\t   One byte counts only.\n\n\t   %d, %i, %o, %u, %X, %x  Four byte default, one, two and four byte\n\t\t\t\t   counts supported.\n\n\t   %E, %e, %f, %G, %g\t   Eight byte default, four and twelve byte\n\t\t\t\t   counts supported.\n\n     The amount of data interpreted by each format string is the sum of the\n     data required by each format unit, which is the iteration count times the\n     byte count, or the iteration count times the number of bytes required by\n     the format if the byte count is not specified.\n\n     The input is manipulated in ``blocks'', where a block is defined as the\n     largest amount of data specified by any format string.  Format strings\n     interpreting less than an input block's worth of data, whose last format\n     unit both interprets some number of bytes and does not have a specified\n     iteration count, have the iteration count incremented until the entire\n     input block has been processed or there is not enough data remaining in\n     the block to satisfy the format string.\n\n     If, either as a result of user specification or hexdump modifying the\n     iteration count as described above, an iteration count is greater than\n     one, no trailing whitespace characters are output during the last\n     iteration.\n\n     It is an error to specify a byte count as well as multiple conversion\n     characters or strings unless all but one of the conversion characters or\n     strings is _a or _A.\n\n     If, as a result of the specification of the -n option or end-of-file\n     being reached, input data only partially satisfies a format string, the\n     input block is zero-padded sufficiently to display all available data\n     (i.e., any format units overlapping the end of data will display some\n     number of the zero bytes).\n\n     Further output by such format strings is replaced by an equivalent number\n     of spaces.  An equivalent number of spaces is defined as the number of\n     spaces output by an s conversion character with the same field width and\n     precision as the original conversion character or conversion string but\n     with any “+”, “ ”, “#” conversion flag characters removed, and\n     referencing a NULL string.\n\n     If no format strings are specified, the default display is equivalent to\n     specifying the -x option.\n",
        "     The hexdump utility exits 0 on success, and >0 if an error occurs.\n",
        "     Dump input in canonical (hex+ASCII) form:\n\n\t   $ echo \"FreeBSD: The power to serve\" | hexdump -C\n\t   00000000  46 72 65 65 42 53 44 3a  20 54 68 65 20 70 6f 77  |FreeBSD: The pow|\n\t   00000010  65 72 20 74 6f 20 73 65  72 76 65 0a\t       |er to serve.|\n\t   0000001c\n\n     Same as above but skipping the first 4 bytes of stdin and interpreting\n     only 3 bytes of input:\n\n\t   $ echo \"FreeBSD: The power to serve\" | hexdump -C -s 4 -n 3\n\t   00000004  42 53 44\t\t\t\t\t       |BSD|\n\t   00000007\n\n     Assuming a format file named format.txt with the following contents that\n     specify a perusal format:\n\n\t   \"%06.6_ao \"\t12/1 \"%3_u \"\n\t   \"\\t\\t\" \"%_p \"\n\t   \"\\n\"\n\n     Dump input in canonical form using the format in format.txt:\n\n\t   $ echo \"FreeBSD\" | hexdump -f format.txt -C\n\t   000000   F\tr   e\te   B\tS   D  lf\t\t\t   F r e e B S D .\n\t   00000000  46 72 65 65 42 53 44 0a\t\t\t       |FreeBSD.|\n\t   00000008\n\n     Assuming a format file named format.txt with the following contents that\n     simulate the -x option:\n\n\t   \"%07.7_Ax\\n\"\n\t   \"%07.7_ax  \" 8/2 \"%04x \" \"\\n\"\n\n     Dump input in canonical form using the format in format.txt:\n\n\t   $ echo \"FreeBSD: The power to serve\" | hexdump -f format.txt -C\n\t   0000000  7246 6565 5342 3a44 5420 6568 7020 776f\n\t   00000000  46 72 65 65 42 53 44 3a  20 54 68 65 20 70 6f 77  |FreeBSD: The pow|\n\t   0000010  7265 7420 206f 6573 7672 0a65\n\t   00000010  65 72 20 74 6f 20 73 65  72 76 65 0a\t       |er to serve.|\n\t   0000001c\n",
        "     od(1)\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "-b",
      "description": "One-byte octal display.  Display the input offset in hexadecimal, followed by sixteen space-separated, three column, zero-filled, bytes of input data, in octal, per line."
    },
    {
      "flag": "-c",
      "description": "One-byte character display.  Display the input offset in hexadecimal, followed by sixteen space-separated, three column, space-filled, characters of input data per line."
    },
    {
      "flag": "-C",
      "description": "Canonical hex+ASCII display.  Display the input offset in hexadecimal, followed by sixteen space-separated, two column, hexadecimal bytes, followed by the same sixteen bytes in %_p format enclosed in ``|'' characters."
    },
    {
      "flag": "-d",
      "description": "Two-byte decimal display.\tDisplay the input offset in hexadecimal, followed by eight space-separated, five column, zero-filled, two-byte units of input data, in unsigned decimal, per line."
    },
    {
      "flag": "-e",
      "description": " Specify a format string to be used for displaying data.",
      "optional": true
    },
    {
      "flag": "-f",
      "description": " Specify a file that contains one or more newline separated format strings.  Empty lines and lines whose first non-blank character is a hash mark (#) are ignored.",
      "optional": true
    },
    {
      "flag": "-n",
      "description": " Interpret only length bytes of input.",
      "optional": true
    },
    {
      "flag": "-o",
      "description": "Two-byte octal display.  Display the input offset in hexadecimal, followed by eight space-separated, six column, zero-filled, two byte quantities of input data, in octal, per line."
    },
    {
      "flag": "-s",
      "description": " Skip offset bytes from the beginning of the input.  By default, offset is interpreted as a decimal number.  With a leading 0x or 0X, offset is interpreted as a hexadecimal number, otherwise, with a leading 0, offset is interpreted as an octal number. Appending the character b, k, m, or g to offset causes it to be interpreted as a multiple of 512, 1024, 1048576, or 1073741824, respectively.",
      "optional": true
    },
    {
      "flag": "-v",
      "description": "Cause hexdump to display all input data.  Without the -v option, any number of groups of output lines, which would be identical to the immediately preceding group of output lines (except for the input offsets), are replaced with a line comprised of a single asterisk."
    },
    {
      "flag": "-x",
      "description": "Two-byte hexadecimal display.  Display the input offset in hexadecimal, followed by eight, space separated, four column, zero-filled, two-byte quantities of input data, in hexadecimal, per line. For each input file, hexdump sequentially copies the input to standard output, transforming the data according to the format strings specified by the -e and -f options, in the order that they were specified. Formats A format string contains any number of format units, separated by whitespace.  A format unit contains up to three items: an iteration count, a byte count, and a format. The iteration count is an optional positive integer, which defaults to one.  Each format is applied iteration count times. The byte count is an optional positive integer.  If specified it defines the number of bytes to be interpreted by each iteration of the format. If an iteration count and/or a byte count is specified, a single slash must be placed after the iteration count and/or before the byte count to disambiguate them.  Any whitespace before or after the slash is ignored. The format is required and must be surrounded by double quote (\" \") marks.  It is interpreted as a fprintf-style format string (see fprintf(3)), with the following exceptions: •   An asterisk (*) may not be used as a field width or precision. •   A byte count or field precision is required for each ``s'' conversion character (unlike the fprintf(3) default which prints the entire string if the precision is unspecified). •   The conversion characters ``h'', ``l'', ``n'', ``p'' and ``q'' are not supported. •   The single character escape sequences described in the C standard are supported: NUL\t\t  \\0 <alert character>\t  \\a <backspace>\t  \\b <form-feed>\t  \\f <newline>\t\t  \\n <carriage return>\t  \\r <tab>\t\t  \\t <vertical tab>\t  \\v The hexdump utility also supports the following additional conversion strings: _a[dox]\t Display the input offset, cumulative across input files, of the next byte to be displayed.  The appended characters d, o, and x specify the display base as decimal, octal or hexadecimal respectively. _A[dox]\t Identical to the _a conversion string except that it is only performed once, when all of the input data has been processed. _c \t Output characters in the default character set.  Nonprinting characters are displayed in three character, zero-padded octal, except for those representable by standard escape notation (see above), which are displayed as two character strings. _p \t Output characters in the default character set.  Nonprinting characters are displayed as a single “.”. _u \t Output US ASCII characters, with the exception that control characters are displayed using the following, lower-case, names.  Characters greater than 0xff, hexadecimal, are displayed as hexadecimal strings. 000 NUL  001 SOH  002 STX  003 ETX  004 EOT  005 ENQ 006 ACK  007 BEL  008 BS   009 HT   00A LF   00B VT 00C FF   00D CR   00E SO   00F SI   010 DLE  011 DC1 012 DC2  013 DC3  014 DC4  015 NAK  016 SYN  017 ETB 018 CAN  019 EM   01A SUB  01B ESC  01C FS   01D GS 01E RS   01F US   07F DEL The default and supported byte counts for the conversion characters are as follows: %_c, %_p, %_u, %c\t   One byte counts only. %d, %i, %o, %u, %X, %x  Four byte default, one, two and four byte counts supported. %E, %e, %f, %G, %g\t   Eight byte default, four and twelve byte counts supported. The amount of data interpreted by each format string is the sum of the data required by each format unit, which is the iteration count times the byte count, or the iteration count times the number of bytes required by the format if the byte count is not specified. The input is manipulated in ``blocks'', where a block is defined as the largest amount of data specified by any format string.  Format strings interpreting less than an input block's worth of data, whose last format unit both interprets some number of bytes and does not have a specified iteration count, have the iteration count incremented until the entire input block has been processed or there is not enough data remaining in the block to satisfy the format string. If, either as a result of user specification or hexdump modifying the iteration count as described above, an iteration count is greater than one, no trailing whitespace characters are output during the last iteration. It is an error to specify a byte count as well as multiple conversion characters or strings unless all but one of the conversion characters or strings is _a or _A. If, as a result of the specification of the -n option or end-of-file being reached, input data only partially satisfies a format string, the input block is zero-padded sufficiently to display all available data (i.e., any format units overlapping the end of data will display some number of the zero bytes). Further output by such format strings is replaced by an equivalent number of spaces.  An equivalent number of spaces is defined as the number of spaces output by an s conversion character with the same field width and precision as the original conversion character or conversion string but with any “+”, “ ”, “#” conversion flag characters removed, and referencing a NULL string. If no format strings are specified, the default display is equivalent to specifying the -x option. EXIT STATUS The hexdump utility exits 0 on success, and >0 if an error occurs."
    }
  ],
  "examples": [
    {
      "command": "echo \"FreeBSD: The power to serve\" | hexdump -C",
      "description": "00000000  46 72 65 65 42 53 44 3a  20 54 68 65 20 70 6f 77  |FreeBSD: The pow|",
      "tags": [
        "pipe"
      ],
      "output": "\t   00000000  46 72 65 65 42 53 44 3a  20 54 68 65 20 70 6f 77  |FreeBSD: The pow|\n\t   00000010  65 72 20 74 6f 20 73 65  72 76 65 0a\t       |er to serve.|\n\t   0000001c\n     Same as above but skipping the first 4 bytes of stdin and interpreting\n     only 3 bytes of input:\n"
    },
    {
      "command": "echo \"FreeBSD: The power to serve\" | hexdump -C -s 4 -n 3",
      "description": "00000004  42 53 44\t\t\t\t\t       |BSD|",
      "tags": [
        "pipe"
      ],
      "output": "\t   00000004  42 53 44\t\t\t\t\t       |BSD|\n\t   00000007\n     Assuming a format file named format.txt with the following contents that\n     specify a perusal format:\n\t   \"%06.6_ao \"\t12/1 \"%3_u \"\n\t   \"\\t\\t\" \"%_p \"\n\t   \"\\n\"\n     Dump input in canonical form using the format in format.txt:\n"
    },
    {
      "command": "echo \"FreeBSD\" | hexdump -f format.txt -C",
      "description": "000000   F\tr   e\te   B\tS   D  lf\t\t\t   F r e e B S D .",
      "tags": [
        "pipe"
      ],
      "output": "\t   000000   F\tr   e\te   B\tS   D  lf\t\t\t   F r e e B S D .\n\t   00000000  46 72 65 65 42 53 44 0a\t\t\t       |FreeBSD.|\n\t   00000008\n     Assuming a format file named format.txt with the following contents that\n     simulate the -x option:\n\t   \"%07.7_Ax\\n\"\n\t   \"%07.7_ax  \" 8/2 \"%04x \" \"\\n\"\n     Dump input in canonical form using the format in format.txt:\n"
    },
    {
      "command": "echo \"FreeBSD: The power to serve\" | hexdump -f format.txt -C",
      "description": "0000000  7246 6565 5342 3a44 5420 6568 7020 776f",
      "tags": [
        "pipe"
      ],
      "output": "\t   0000000  7246 6565 5342 3a44 5420 6568 7020 776f\n\t   00000000  46 72 65 65 42 53 44 3a  20 54 68 65 20 70 6f 77  |FreeBSD: The pow|\n\t   0000010  7265 7420 206f 6573 7672 0a65\n\t   00000010  65 72 20 74 6f 20 73 65  72 76 65 0a\t       |er to serve.|\n\t   0000001c\nSEE ALSO\n     od(1)\nmacOS 15.5\t\t\t June 29, 2020\t\t\t    macOS 15.5\n"
    }
  ],
  "relatedCommands": [
    "od",
    "hexdump",
    "decimal",
    "hexadecimal",
    "octal",
    "dump",
    "format_string",
    "format_file",
    "length",
    "offset",
    "utility",
    "filter",
    "which",
    "displays",
    "specified"
  ],
  "seeAlso": [
    {
      "name": "od",
      "section": 1
    }
  ],
  "metadata": {},
  "searchContent": "hexdump hexdump manual page the hexdump utility is a filter which displays the specified files or the standard input if no files are specified in a user specified format hexdump -bccdovx -e format string -f format file -n length -s offset file hexdump manual page utility filter which displays specified files standard input specified format -b one-byte octal display display the input offset in hexadecimal followed by sixteen space-separated three column zero-filled bytes of input data in octal per line -c one-byte character display display the input offset in hexadecimal followed by sixteen space-separated three column space-filled characters of input data per line -c canonical hex ascii display display the input offset in hexadecimal followed by sixteen space-separated two column hexadecimal bytes followed by the same sixteen bytes in p format enclosed in characters -d two-byte decimal display display the input offset in hexadecimal followed by eight space-separated five column zero-filled two-byte units of input data in unsigned decimal per line -e specify a format string to be used for displaying data -f specify a file that contains one or more newline separated format strings empty lines and lines whose first non-blank character is a hash mark are ignored -n interpret only length bytes of input -o two-byte octal display display the input offset in hexadecimal followed by eight space-separated six column zero-filled two byte quantities of input data in octal per line -s skip offset bytes from the beginning of the input by default offset is interpreted as a decimal number with a leading 0x or 0x offset is interpreted as a hexadecimal number otherwise with a leading 0 offset is interpreted as an octal number appending the character b k m or g to offset causes it to be interpreted as a multiple of 512 1024 1048576 or 1073741824 respectively -v cause hexdump to display all input data without the -v option any number of groups of output lines which would be identical to the immediately preceding group of output lines except for the input offsets are replaced with a line comprised of a single asterisk -x two-byte hexadecimal display display the input offset in hexadecimal followed by eight space separated four column zero-filled two-byte quantities of input data in hexadecimal per line for each input file hexdump sequentially copies the input to standard output transforming the data according to the format strings specified by the -e and -f options in the order that they were specified formats a format string contains any number of format units separated by whitespace a format unit contains up to three items an iteration count a byte count and a format the iteration count is an optional positive integer which defaults to one each format is applied iteration count times the byte count is an optional positive integer if specified it defines the number of bytes to be interpreted by each iteration of the format if an iteration count and or a byte count is specified a single slash must be placed after the iteration count and or before the byte count to disambiguate them any whitespace before or after the slash is ignored the format is required and must be surrounded by double quote marks it is interpreted as a fprintf-style format string see fprintf 3 with the following exceptions an asterisk may not be used as a field width or precision a byte count or field precision is required for each s conversion character unlike the fprintf 3 default which prints the entire string if the precision is unspecified the conversion characters h l n p and q are not supported the single character escape sequences described in the c standard are supported nul 0 alert character a backspace b form-feed f newline n carriage return r tab t vertical tab v the hexdump utility also supports the following additional conversion strings a dox display the input offset cumulative across input files of the next byte to be displayed the appended characters d o and x specify the display base as decimal octal or hexadecimal respectively a dox identical to the a conversion string except that it is only performed once when all of the input data has been processed c output characters in the default character set nonprinting characters are displayed in three character zero-padded octal except for those representable by standard escape notation see above which are displayed as two character strings p output characters in the default character set nonprinting characters are displayed as a single u output us ascii characters with the exception that control characters are displayed using the following lower-case names characters greater than 0xff hexadecimal are displayed as hexadecimal strings 000 nul 001 soh 002 stx 003 etx 004 eot 005 enq 006 ack 007 bel 008 bs 009 ht 00a lf 00b vt 00c ff 00d cr 00e so 00f si 010 dle 011 dc1 012 dc2 013 dc3 014 dc4 015 nak 016 syn 017 etb 018 can 019 em 01a sub 01b esc 01c fs 01d gs 01e rs 01f us 07f del the default and supported byte counts for the conversion characters are as follows c p u c one byte counts only d i o u x x four byte default one two and four byte counts supported e e f g g eight byte default four and twelve byte counts supported the amount of data interpreted by each format string is the sum of the data required by each format unit which is the iteration count times the byte count or the iteration count times the number of bytes required by the format if the byte count is not specified the input is manipulated in blocks where a block is defined as the largest amount of data specified by any format string format strings interpreting less than an input block s worth of data whose last format unit both interprets some number of bytes and does not have a specified iteration count have the iteration count incremented until the entire input block has been processed or there is not enough data remaining in the block to satisfy the format string if either as a result of user specification or hexdump modifying the iteration count as described above an iteration count is greater than one no trailing whitespace characters are output during the last iteration it is an error to specify a byte count as well as multiple conversion characters or strings unless all but one of the conversion characters or strings is a or a if as a result of the specification of the -n option or end-of-file being reached input data only partially satisfies a format string the input block is zero-padded sufficiently to display all available data i e any format units overlapping the end of data will display some number of the zero bytes further output by such format strings is replaced by an equivalent number of spaces an equivalent number of spaces is defined as the number of spaces output by an s conversion character with the same field width and precision as the original conversion character or conversion string but with any conversion flag characters removed and referencing a null string if no format strings are specified the default display is equivalent to specifying the -x option exit status the hexdump utility exits 0 on success and 0 if an error occurs echo freebsd the power to serve hexdump -c 00000000 46 72 65 65 42 53 44 3a 20 54 68 65 20 70 6f 77 freebsd the pow echo freebsd the power to serve hexdump -c -s 4 -n 3 00000004 42 53 44 bsd echo freebsd hexdump -f format txt -c 000000 f r e e b s d lf f r e e b s d echo freebsd the power to serve hexdump -f format txt -c 0000000 7246 6565 5342 3a44 5420 6568 7020 776f name macos 15 5 june 29 2020 macos 15 5",
  "keywords": [
    "hexdump",
    "manual",
    "page",
    "utility",
    "filter",
    "which",
    "displays",
    "specified",
    "files,",
    "standard",
    "input,",
    "specified,",
    "format."
  ],
  "complexity": "intermediate",
  "hash": "854fa4492bf9c4b1",
  "parsedAt": "2025-06-17T19:41:58.037Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": true,
  "hasDiagrams": false
}