{
  "name": "dc",
  "section": 1,
  "title": "dc manual page",
  "description": "dc(1) is an arbitrary-precision calculator.",
  "synopsis": "dc [-cChiPRvVx] [--version] [--help] [--digit-clamp] [--no-digit-clamp] [--interactive] [--no-prompt] [--no-read-prompt] [--extended-register] [-e expr] [--expression=expr...] [-f file...] [--file=file...] [file...] [-I ibase] [--ibase=ibase] [-O obase] [--obase=obase] [-S scale] [--scale=scale] [-E seed] [--seed=seed]",
  "category": "User Commands",
  "sections": [
    {
      "id": "synopsis",
      "title": "SYNOPSIS",
      "content": "Gavin D. Howard \t\t January 2024\t\t\t\t DC(1)",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "       dc [-cChiPRvVx] [--version] [--help] [--digit-clamp] [--no-digit-clamp]\n       [--interactive] [--no-prompt] [--no-read-prompt] [--extended-register]\n       [-e expr] [--expression=expr...] [-f file...] [--file=file...]\n       [file...] [-I ibase] [--ibase=ibase] [-O obase] [--obase=obase] [-S\n       scale] [--scale=scale] [-E seed] [--seed=seed]\n",
        "       dc(1) is an arbitrary-precision calculator.  It uses a stack (reverse\n       Polish notation) to store numbers and results of computations.\n       Arithmetic operations pop arguments off of the stack and push the\n       results.\n\n       If no files are given on the command-line, then dc(1) reads from stdin\n       (see the STDIN section).  Otherwise, those files are processed, and\n       dc(1) will then exit.\n\n       If a user wants to set up a standard environment, they can use\n       DC_ENV_ARGS (see the ENVIRONMENT VARIABLES section).  For example, if a\n       user wants the scale always set to 10, they can set DC_ENV_ARGS to -e\n       10k, and this dc(1) will always start with a scale of 10.\n",
        "       The following are the options that dc(1) accepts.\n\n       -C, --no-digit-clamp\n\t      Disables clamping of digits greater than or equal to the current\n\t      ibase when parsing numbers.\n\n\t      This means that the value added to a number from a digit is\n\t      always that digit’s value multiplied by the value of ibase\n\t      raised to the power of the digit’s position, which starts from 0\n\t      at the least significant digit.\n\n\t      If this and/or the -c or --digit-clamp options are given\n\t      multiple times, the last one given is used.\n\n\t      This option overrides the DC_DIGIT_CLAMP environment variable\n\t      (see the ENVIRONMENT VARIABLES section) and the default, which\n\t      can be queried with the -h or --help options.\n\n\t      This is a non-portable extension.\n\n       -c, --digit-clamp\n\t      Enables clamping of digits greater than or equal to the current\n\t      ibase when parsing numbers.\n\n\t      This means that digits that the value added to a number from a\n\t      digit that is greater than or equal to the ibase is the value of\n\t      ibase minus 1 all multiplied by the value of ibase raised to the\n\t      power of the digit’s position, which starts from 0 at the least\n\t      significant digit.\n\n\t      If this and/or the -C or --no-digit-clamp options are given\n\t      multiple times, the last one given is used.\n\n\t      This option overrides the DC_DIGIT_CLAMP environment variable\n\t      (see the ENVIRONMENT VARIABLES section) and the default, which\n\t      can be queried with the -h or --help options.\n\n\t      This is a non-portable extension.\n\n       -E seed, --seed=seed\n\t      Sets the builtin variable seed to the value seed assuming that\n\t      seed is in base 10.  It is a fatal error if seed is not a valid\n\t      number.\n\n\t      If multiple instances of this option are given, the last is\n\t      used.\n\n\t      This is a non-portable extension.\n\n       -e expr, --expression=expr\n\t      Evaluates expr.  If multiple expressions are given, they are\n\t      evaluated in order.  If files are given as well (see below), the\n\t      expressions and files are evaluated in the order given.  This\n\t      means that if a file is given before an expression, the file is\n\t      read in and evaluated first.\n\n\t      If this option is given on the command-line (i.e., not in\n\t      DC_ENV_ARGS, see the ENVIRONMENT VARIABLES section), then after\n\t      processing all expressions and files, dc(1) will exit, unless -\n\t      (stdin) was given as an argument at least once to -f or --file,\n\t      whether on the command-line or in DC_ENV_ARGS.  However, if any\n\t      other -e, --expression, -f, or --file arguments are given after\n\t      -f- or equivalent is given, dc(1) will give a fatal error and\n\t      exit.\n\n\t      This is a non-portable extension.\n\n       -f file, --file=file\n\t      Reads in file and evaluates it, line by line, as though it were\n\t      read through stdin.  If expressions are also given (see above),\n\t      the expressions are evaluated in the order given.\n\n\t      If this option is given on the command-line (i.e., not in\n\t      DC_ENV_ARGS, see the ENVIRONMENT VARIABLES section), then after\n\t      processing all expressions and files, dc(1) will exit, unless -\n\t      (stdin) was given as an argument at least once to -f or --file.\n\t      However, if any other -e, --expression, -f, or --file arguments\n\t      are given after -f- or equivalent is given, dc(1) will give a\n\t      fatal error and exit.\n\n\t      This is a non-portable extension.\n\n       -h, --help\n\t      Prints a usage message and exits.\n\n       -I ibase, --ibase=ibase\n\t      Sets the builtin variable ibase to the value ibase assuming that\n\t      ibase is in base 10.  It is a fatal error if ibase is not a\n\t      valid number.\n\n\t      If multiple instances of this option are given, the last is\n\t      used.\n\n\t      This is a non-portable extension.\n\n       -i, --interactive\n\t      Forces interactive mode.\t(See the INTERACTIVE MODE section.)\n\n\t      This is a non-portable extension.\n\n       -L, --no-line-length\n\t      Disables line length checking and prints numbers without\n\t      backslashes and newlines.  In other words, this option sets\n\t      BC_LINE_LENGTH to 0 (see the ENVIRONMENT VARIABLES section).\n\n\t      This is a non-portable extension.\n\n       -O obase, --obase=obase\n\t      Sets the builtin variable obase to the value obase assuming that\n\t      obase is in base 10.  It is a fatal error if obase is not a\n\t      valid number.\n\n\t      If multiple instances of this option are given, the last is\n\t      used.\n\n\t      This is a non-portable extension.\n\n       -P, --no-prompt\n\t      Disables the prompt in TTY mode.\t(The prompt is only enabled in\n\t      TTY mode.  See the TTY MODE section.)  This is mostly for those\n\t      users that do not want a prompt or are not used to having them\n\t      in dc(1).  Most of those users would want to put this option in\n\t      DC_ENV_ARGS.\n\n\t      These options override the DC_PROMPT and DC_TTY_MODE environment\n\t      variables (see the ENVIRONMENT VARIABLES section).\n\n\t      This is a non-portable extension.\n\n       -R, --no-read-prompt\n\t      Disables the read prompt in TTY mode.  (The read prompt is only\n\t      enabled in TTY mode.  See the TTY MODE section.)\tThis is mostly\n\t      for those users that do not want a read prompt or are not used\n\t      to having them in dc(1).\tMost of those users would want to put\n\t      this option in BC_ENV_ARGS (see the ENVIRONMENT VARIABLES\n\t      section).  This option is also useful in hash bang lines of\n\t      dc(1) scripts that prompt for user input.\n\n\t      This option does not disable the regular prompt because the read\n\t      prompt is only used when the ? command is used.\n\n\t      These options do override the DC_PROMPT and DC_TTY_MODE\n\t      environment variables (see the ENVIRONMENT VARIABLES section),\n\t      but only for the read prompt.\n\n\t      This is a non-portable extension.\n\n       -S scale, --scale=scale\n\t      Sets the builtin variable scale to the value scale assuming that\n\t      scale is in base 10.  It is a fatal error if scale is not a\n\t      valid number.\n\n\t      If multiple instances of this option are given, the last is\n\t      used.\n\n\t      This is a non-portable extension.\n\n       -v, -V, --version\n\t      Print the version information (copyright header) and exits.\n\n       -x --extended-register\n\t      Enables extended register mode.  See the Extended Register Mode\n\t      subsection of the REGISTERS section for more information.\n\n\t      This is a non-portable extension.\n\n       -z, --leading-zeroes\n\t      Makes dc(1) print all numbers greater than -1 and less than 1,\n\t      and not equal to 0, with a leading zero.\n\n\t      This is a non-portable extension.\n\n       All long options are non-portable extensions.\n",
        "       If no files are given on the command-line and no files or expressions\n       are given by the -f, --file, -e, or --expression options, then dc(1)\n       reads from stdin.\n\n       However, there is a caveat to this.\n\n       First, stdin is evaluated a line at a time.  The only exception to this\n       is if a string has been finished, but not ended.  This means that,\n       except for escaped brackets, all brackets must be balanced before dc(1)\n       parses and executes.\n",
        "       Any non-error output is written to stdout.  In addition, if history\n       (see the HISTORY section) and the prompt (see the TTY MODE section) are\n       enabled, both are output to stdout.\n\n       Note: Unlike other dc(1) implementations, this dc(1) will issue a fatal\n       error (see the EXIT STATUS section) if it cannot write to stdout, so if\n       stdout is closed, as in dc  >&-, it will quit with an error.  This is\n       done so that dc(1) can report problems when stdout is redirected to a\n       file.\n\n       If there are scripts that depend on the behavior of other dc(1)\n       implementations, it is recommended that those scripts be changed to\n       redirect stdout to /dev/null.\n",
        "       Any error output is written to stderr.\n\n       Note: Unlike other dc(1) implementations, this dc(1) will issue a fatal\n       error (see the EXIT STATUS section) if it cannot write to stderr, so if\n       stderr is closed, as in dc  2>&-, it will quit with an error.  This is\n       done so that dc(1) can exit with an error code when stderr is\n       redirected to a file.\n\n       If there are scripts that depend on the behavior of other dc(1)\n       implementations, it is recommended that those scripts be changed to\n       redirect stderr to /dev/null.\n",
        "       Each item in the input source code, either a number (see the NUMBERS\n       section) or a command (see the COMMANDS section), is processed and\n       executed, in order.  Input is processed immediately when entered.\n\n       ibase is a register (see the REGISTERS section) that determines how to\n       interpret constant numbers.  It is the “input” base, or the number base\n       used for interpreting input numbers.  ibase is initially 10.  The max\n       allowable value for ibase is 16.  The min allowable value for ibase is\n       2.  The max allowable value for ibase can be queried in dc(1) programs\n       with the T command.\n\n       obase is a register (see the REGISTERS section) that determines how to\n       output results.\tIt is the “output” base, or the number base used for\n       outputting numbers.  obase is initially 10.  The max allowable value\n       for obase is DC_BASE_MAX and can be queried with the U command.\tThe\n       min allowable value for obase is 0.  If obase is 0, values are output\n       in scientific notation, and if obase is 1, values are output in\n       engineering notation.  Otherwise, values are output in the specified\n       base.\n\n       Outputting in scientific and engineering notations are non-portable\n       extensions.\n\n       The scale of an expression is the number of digits in the result of the\n       expression right of the decimal point, and scale is a register (see the\n       REGISTERS section) that sets the precision of any operations (with\n       exceptions).  scale is initially 0.  scale cannot be negative.  The max\n       allowable value for scale can be queried in dc(1) programs with the V\n       command.\n\n       seed is a register containing the current seed for the pseudo-random\n       number generator.  If the current value of seed is queried and stored,\n       then if it is assigned to seed later, the pseudo-random number\n       generator is guaranteed to produce the same sequence of pseudo-random\n       numbers that were generated after the value of seed was first queried.\n\n       Multiple values assigned to seed can produce the same sequence of\n       pseudo-random numbers.  Likewise, when a value is assigned to seed, it\n       is not guaranteed that querying seed immediately after will return the\n       same value.  In addition, the value of seed will change after any call\n       to the ’ command or the “ command that does not get receive a value of\n       0 or 1.\tThe maximum integer returned by the ’ command can be queried\n       with the W command.\n\n       Note: The values returned by the pseudo-random number generator with\n       the ’ and “ commands are guaranteed to NOT be cryptographically secure.\n       This is a consequence of using a seeded pseudo-random number generator.\n       However, they are guaranteed to be reproducible with identical seed\n       values.\tThis means that the pseudo-random values from dc(1) should\n       only be used where a reproducible stream of pseudo-random numbers is\n       ESSENTIAL.  In any other case, use a non-seeded pseudo-random number\n       generator.\n\n       The pseudo-random number generator, seed, and all associated operations\n       are non-portable extensions.\n",
        "       Comments go from # until, and not including, the next newline.  This is\n       a non-portable extension.\n",
        "       Numbers are strings made up of digits, uppercase letters up to F, and\n       at most 1 period for a radix.  Numbers can have up to DC_NUM_MAX\n       digits.\tUppercase letters are equal to 9 plus their position in the\n       alphabet (i.e., A equals 10, or 9+1).\n\n       If a digit or letter makes no sense with the current value of ibase\n       (i.e., they are greater than or equal to the current value of ibase),\n       then the behavior depends on the existence of the -c/--digit-clamp or\n       -C/--no-digit-clamp options (see the OPTIONS section), the existence\n       and setting of the DC_DIGIT_CLAMP environment variable (see the\n       ENVIRONMENT VARIABLES section), or the default, which can be queried\n       with the -h/--help option.\n\n       If clamping is off, then digits or letters that are greater than or\n       equal to the current value of ibase are not changed.  Instead, their\n       given value is multiplied by the appropriate power of ibase and added\n       into the number.  This means that, with an ibase of 3, the number AB is\n       equal to 3^1*A+3^0*B, which is 3 times 10 plus 11, or 41.\n\n       If clamping is on, then digits or letters that are greater than or\n       equal to the current value of ibase are set to the value of the highest\n       valid digit in ibase before being multiplied by the appropriate power\n       of ibase and added into the number.  This means that, with an ibase of\n       3, the number AB is equal to 3^1*2+3^0*2, which is 3 times 2 plus 2, or\n       8.\n\n       There is one exception to clamping: single-character numbers (i.e., A\n       alone).\tSuch numbers are never clamped and always take the value they\n       would have in the highest possible ibase.  This means that A alone\n       always equals decimal 10 and Z alone always equals decimal 35.  This\n       behavior is mandated by the standard for bc(1) (see the STANDARDS\n       section) and is meant to provide an easy way to set the current ibase\n       (with the i command) regardless of the current value of ibase.\n\n       If clamping is on, and the clamped value of a character is needed, use\n       a leading zero, i.e., for A, use 0A.\n\n       In addition, dc(1) accepts numbers in scientific notation.  These have\n       the form <number>e<integer>.  The exponent (the portion after the e)\n       must be an integer.  An example is 1.89237e9, which is equal to\n       1892370000.  Negative exponents are also allowed, so 4.2890e_3 is equal\n       to 0.0042890.\n\n       WARNING: Both the number and the exponent in scientific notation are\n       interpreted according to the current ibase, but the number is still\n       multiplied by 10^exponent regardless of the current ibase.  For\n       example, if ibase is 16 and dc(1) is given the number string FFeA, the\n       resulting decimal number will be 2550000000000, and if dc(1) is given\n       the number string 10e_4, the resulting decimal number will be 0.0016.\n\n       Accepting input as scientific notation is a non-portable extension.\n",
        "       The valid commands are listed below.\n",
        "       These commands are used for printing.\n\n       Note that both scientific notation and engineering notation are\n       available for printing numbers.\tScientific notation is activated by\n       assigning 0 to obase using 0o, and engineering notation is activated by\n       assigning 1 to obase using 1o.  To deactivate them, just assign a\n       different value to obase.\n\n       Printing numbers in scientific notation and/or engineering notation is\n       a non-portable extension.\n\n       p      Prints the value on top of the stack, whether number or string,\n\t      and prints a newline after.\n\n\t      This does not alter the stack.\n\n       n      Prints the value on top of the stack, whether number or string,\n\t      and pops it off of the stack.\n\n       P      Pops a value off the stack.\n\n\t      If the value is a number, it is truncated and the absolute value\n\t      of the result is printed as though obase is 256 and each digit\n\t      is interpreted as an 8-bit ASCII character, making it a byte\n\t      stream.\n\n\t      If the value is a string, it is printed without a trailing\n\t      newline.\n\n\t      This is a non-portable extension.\n\n       f      Prints the entire contents of the stack, in order from newest to\n\t      oldest, without altering anything.\n\n\t      Users should use this command when they get lost.\n",
        "       These are the commands used for arithmetic.\n\n       +      The top two values are popped off the stack, added, and the\n\t      result is pushed onto the stack.\tThe scale of the result is\n\t      equal to the max scale of both operands.\n\n       -      The top two values are popped off the stack, subtracted, and the\n\t      result is pushed onto the stack.\tThe scale of the result is\n\t      equal to the max scale of both operands.\n\n       *      The top two values are popped off the stack, multiplied, and the\n\t      result is pushed onto the stack.\tIf a is the scale of the first\n\t      expression and b is the scale of the second expression, the\n\t      scale of the result is equal to min(a+b,max(scale,a,b)) where\n\t      min() and max() return the obvious values.\n\n       /      The top two values are popped off the stack, divided, and the\n\t      result is pushed onto the stack.\tThe scale of the result is\n\t      equal to scale.\n\n\t      The first value popped off of the stack must be non-zero.\n\n       %      The top two values are popped off the stack, remaindered, and\n\t      the result is pushed onto the stack.\n\n\t      Remaindering is equivalent to 1) Computing a/b to current scale,\n\t      and 2) Using the result of step 1 to calculate a-(a/b)*b to\n\t      scale max(scale+scale(b),scale(a)).\n\n\t      The first value popped off of the stack must be non-zero.\n\n       ~      The top two values are popped off the stack, divided and\n\t      remaindered, and the results (divided first, remainder second)\n\t      are pushed onto the stack.  This is equivalent to x y / x y %\n\t      except that x and y are only evaluated once.\n\n\t      The first value popped off of the stack must be non-zero.\n\n\t      This is a non-portable extension.\n\n       ^      The top two values are popped off the stack, the second is\n\t      raised to the power of the first, and the result is pushed onto\n\t      the stack.  The scale of the result is equal to scale.\n\n\t      The first value popped off of the stack must be an integer, and\n\t      if that value is negative, the second value popped off of the\n\t      stack must be non-zero.\n\n       v      The top value is popped off the stack, its square root is\n\t      computed, and the result is pushed onto the stack.  The scale of\n\t      the result is equal to scale.\n\n\t      The value popped off of the stack must be non-negative.\n\n       _      If this command immediately precedes a number (i.e., no spaces\n\t      or other commands), then that number is input as a negative\n\t      number.\n\n\t      Otherwise, the top value on the stack is popped and copied, and\n\t      the copy is negated and pushed onto the stack.  This behavior\n\t      without a number is a non-portable extension.\n\n       b      The top value is popped off the stack, and if it is zero, it is\n\t      pushed back onto the stack.  Otherwise, its absolute value is\n\t      pushed onto the stack.\n\n\t      This is a non-portable extension.\n\n       |      The top three values are popped off the stack, a modular\n\t      exponentiation is computed, and the result is pushed onto the\n\t      stack.\n\n\t      The first value popped is used as the reduction modulus and must\n\t      be an integer and non-zero.  The second value popped is used as\n\t      the exponent and must be an integer and non-negative.  The third\n\t      value popped is the base and must be an integer.\n\n\t      This is a non-portable extension.\n\n       $      The top value is popped off the stack and copied, and the copy\n\t      is truncated and pushed onto the stack.\n\n\t      This is a non-portable extension.\n\n       @      The top two values are popped off the stack, and the precision\n\t      of the second is set to the value of the first, whether by\n\t      truncation or extension.\n\n\t      The first value popped off of the stack must be an integer and\n\t      non-negative.\n\n\t      This is a non-portable extension.\n\n       H      The top two values are popped off the stack, and the second is\n\t      shifted left (radix shifted right) to the value of the first.\n\n\t      The first value popped off of the stack must be an integer and\n\t      non-negative.\n\n\t      This is a non-portable extension.\n\n       h      The top two values are popped off the stack, and the second is\n\t      shifted right (radix shifted left) to the value of the first.\n\n\t      The first value popped off of the stack must be an integer and\n\t      non-negative.\n\n\t      This is a non-portable extension.\n\n       G      The top two values are popped off of the stack, they are\n\t      compared, and a 1 is pushed if they are equal, or 0 otherwise.\n\n\t      This is a non-portable extension.\n\n       N      The top value is popped off of the stack, and if it a 0, a 1 is\n\t      pushed; otherwise, a 0 is pushed.\n\n\t      This is a non-portable extension.\n\n       (      The top two values are popped off of the stack, they are\n\t      compared, and a 1 is pushed if the first is less than the\n\t      second, or 0 otherwise.\n\n\t      This is a non-portable extension.\n\n       {      The top two values are popped off of the stack, they are\n\t      compared, and a 1 is pushed if the first is less than or equal\n\t      to the second, or 0 otherwise.\n\n\t      This is a non-portable extension.\n\n       )      The top two values are popped off of the stack, they are\n\t      compared, and a 1 is pushed if the first is greater than the\n\t      second, or 0 otherwise.\n\n\t      This is a non-portable extension.\n\n       }      The top two values are popped off of the stack, they are\n\t      compared, and a 1 is pushed if the first is greater than or\n\t      equal to the second, or 0 otherwise.\n\n\t      This is a non-portable extension.\n\n       M      The top two values are popped off of the stack.  If they are\n\t      both non-zero, a 1 is pushed onto the stack.  If either of them\n\t      is zero, or both of them are, then a 0 is pushed onto the stack.\n\n\t      This is like the && operator in bc(1), and it is not a\n\t      short-circuit operator.\n\n\t      This is a non-portable extension.\n\n       m      The top two values are popped off of the stack.  If at least one\n\t      of them is non-zero, a 1 is pushed onto the stack.  If both of\n\t      them are zero, then a 0 is pushed onto the stack.\n\n\t      This is like the || operator in bc(1), and it is not a\n\t      short-circuit operator.\n\n\t      This is a non-portable extension.\n",
        "       dc(1) has a built-in pseudo-random number generator.  These commands\n       query the pseudo-random number generator.  (See Parameters for more\n       information about the seed value that controls the pseudo-random number\n       generator.)\n\n       The pseudo-random number generator is guaranteed to NOT be\n       cryptographically secure.\n\n       ’      Generates an integer between 0 and DC_RAND_MAX, inclusive (see\n\t      the LIMITS section).\n\n\t      The generated integer is made as unbiased as possible, subject\n\t      to the limitations of the pseudo-random number generator.\n\n\t      This is a non-portable extension.\n\n       “      Pops a value off of the stack, which is used as an exclusive\n\t      upper bound on the integer that will be generated.  If the bound\n\t      is negative or is a non-integer, an error is raised, and dc(1)\n\t      resets (see the RESET section) while seed remains unchanged.  If\n\t      the bound is larger than DC_RAND_MAX, the higher bound is\n\t      honored by generating several pseudo-random integers,\n\t      multiplying them by appropriate powers of DC_RAND_MAX+1, and\n\t      adding them together.  Thus, the size of integer that can be\n\t      generated with this command is unbounded.  Using this command\n\t      will change the value of seed, unless the operand is 0 or 1.  In\n\t      that case, 0 is pushed onto the stack, and seed is not changed.\n\n\t      The generated integer is made as unbiased as possible, subject\n\t      to the limitations of the pseudo-random number generator.\n\n\t      This is a non-portable extension.\n",
        "       These commands control the stack.\n\n       c      Removes all items from (“clears”) the stack.\n\n       d      Copies the item on top of the stack (“duplicates”) and pushes\n\t      the copy onto the stack.\n\n       r      Swaps (“reverses”) the two top items on the stack.\n\n       R      Pops (“removes”) the top value from the stack.\n",
        "       These commands control registers (see the REGISTERS section).\n\n       sr     Pops the value off the top of the stack and stores it into\n\t      register r.\n\n       lr     Copies the value in register r and pushes it onto the stack.\n\t      This does not alter the contents of r.\n\n       Sr     Pops the value off the top of the (main) stack and pushes it\n\t      onto the stack of register r.  The previous value of the\n\t      register becomes inaccessible.\n\n       Lr     Pops the value off the top of the stack for register r and push\n\t      it onto the main stack.  The previous value in the stack for\n\t      register r, if any, is now accessible via the lr command.\n",
        "       These commands control the values of ibase, obase, scale, and seed.\n       Also see the SYNTAX section.\n\n       i      Pops the value off of the top of the stack and uses it to set\n\t      ibase, which must be between 2 and 16, inclusive.\n\n\t      If the value on top of the stack has any scale, the scale is\n\t      ignored.\n\n       o      Pops the value off of the top of the stack and uses it to set\n\t      obase, which must be between 0 and DC_BASE_MAX, inclusive (see\n\t      the LIMITS section and the NUMBERS section).\n\n\t      If the value on top of the stack has any scale, the scale is\n\t      ignored.\n\n       k      Pops the value off of the top of the stack and uses it to set\n\t      scale, which must be non-negative.\n\n\t      If the value on top of the stack has any scale, the scale is\n\t      ignored.\n\n       j      Pops the value off of the top of the stack and uses it to set\n\t      seed.  The meaning of seed is dependent on the current\n\t      pseudo-random number generator but is guaranteed to not change\n\t      except for new major versions.\n\n\t      The scale and sign of the value may be significant.\n\n\t      If a previously used seed value is used again, the pseudo-random\n\t      number generator is guaranteed to produce the same sequence of\n\t      pseudo-random numbers as it did when the seed value was\n\t      previously used.\n\n\t      The exact value assigned to seed is not guaranteed to be\n\t      returned if the J command is used.  However, if seed does return\n\t      a different value, both values, when assigned to seed, are\n\t      guaranteed to produce the same sequence of pseudo-random\n\t      numbers.\tThis means that certain values assigned to seed will\n\t      not produce unique sequences of pseudo-random numbers.\n\n\t      There is no limit to the length (number of significant decimal\n\t      digits) or scale of the value that can be assigned to seed.\n\n\t      This is a non-portable extension.\n\n       I      Pushes the current value of ibase onto the main stack.\n\n       O      Pushes the current value of obase onto the main stack.\n\n       K      Pushes the current value of scale onto the main stack.\n\n       J      Pushes the current value of seed onto the main stack.\n\n\t      This is a non-portable extension.\n\n       T      Pushes the maximum allowable value of ibase onto the main stack.\n\n\t      This is a non-portable extension.\n\n       U      Pushes the maximum allowable value of obase onto the main stack.\n\n\t      This is a non-portable extension.\n\n       V      Pushes the maximum allowable value of scale onto the main stack.\n\n\t      This is a non-portable extension.\n\n       W      Pushes the maximum (inclusive) integer that can be generated\n\t      with the ’ pseudo-random number generator command.\n\n\t      This is a non-portable extension.\n",
        "       The following commands control strings.\n\n       dc(1) can work with both numbers and strings, and registers (see the\n       REGISTERS section) can hold both strings and numbers.  dc(1) always\n       knows whether the contents of a register are a string or a number.\n\n       While arithmetic operations have to have numbers, and will print an\n       error if given a string, other commands accept strings.\n\n       Strings can also be executed as macros.\tFor example, if the string\n       [1pR] is executed as a macro, then the code 1pR is executed, meaning\n       that the 1 will be printed with a newline after and then popped from\n       the stack.\n\n       [characters]\n\t      Makes a string containing characters and pushes it onto the\n\t      stack.\n\n\t      If there are brackets ([ and ]) in the string, then they must be\n\t      balanced.  Unbalanced brackets can be escaped using a backslash\n\t      (\\) character.\n\n\t      If there is a backslash character in the string, the character\n\t      after it (even another backslash) is put into the string\n\t      verbatim, but the (first) backslash is not.\n\n       a      The value on top of the stack is popped.\n\n\t      If it is a number, it is truncated and its absolute value is\n\t      taken.  The result mod 256 is calculated.  If that result is 0,\n\t      push an empty string; otherwise, push a one-character string\n\t      where the character is the result of the mod interpreted as an\n\t      ASCII character.\n\n\t      If it is a string, then a new string is made.  If the original\n\t      string is empty, the new string is empty.  If it is not, then\n\t      the first character of the original string is used to create the\n\t      new string as a one-character string.  The new string is then\n\t      pushed onto the stack.\n\n\t      This is a non-portable extension.\n\n       x      Pops a value off of the top of the stack.\n\n\t      If it is a number, it is pushed back onto the stack.\n\n\t      If it is a string, it is executed as a macro.\n\n\t      This behavior is the norm whenever a macro is executed, whether\n\t      by this command or by the conditional execution commands below.\n\n       >r     Pops two values off of the stack that must be numbers and\n\t      compares them.  If the first value is greater than the second,\n\t      then the contents of register r are executed.\n\n\t      For example, 0 1>a will execute the contents of register a, and\n\t      1 0>a will not.\n\n\t      If either or both of the values are not numbers, dc(1) will\n\t      raise an error and reset (see the RESET section).\n\n       >res   Like the above, but will execute register s if the comparison\n\t      fails.\n\n\t      If either or both of the values are not numbers, dc(1) will\n\t      raise an error and reset (see the RESET section).\n\n\t      This is a non-portable extension.\n\n       !>r    Pops two values off of the stack that must be numbers and\n\t      compares them.  If the first value is not greater than the\n\t      second (less than or equal to), then the contents of register r\n\t      are executed.\n\n\t      If either or both of the values are not numbers, dc(1) will\n\t      raise an error and reset (see the RESET section).\n\n       !>res  Like the above, but will execute register s if the comparison\n\t      fails.\n\n\t      If either or both of the values are not numbers, dc(1) will\n\t      raise an error and reset (see the RESET section).\n\n\t      This is a non-portable extension.\n\n       <r     Pops two values off of the stack that must be numbers and\n\t      compares them.  If the first value is less than the second, then\n\t      the contents of register r are executed.\n\n\t      If either or both of the values are not numbers, dc(1) will\n\t      raise an error and reset (see the RESET section).\n\n       <res   Like the above, but will execute register s if the comparison\n\t      fails.\n\n\t      If either or both of the values are not numbers, dc(1) will\n\t      raise an error and reset (see the RESET section).\n\n\t      This is a non-portable extension.\n\n       !<r    Pops two values off of the stack that must be numbers and\n\t      compares them.  If the first value is not less than the second\n\t      (greater than or equal to), then the contents of register r are\n\t      executed.\n\n\t      If either or both of the values are not numbers, dc(1) will\n\t      raise an error and reset (see the RESET section).\n\n       !<res  Like the above, but will execute register s if the comparison\n\t      fails.\n\n\t      If either or both of the values are not numbers, dc(1) will\n\t      raise an error and reset (see the RESET section).\n\n\t      This is a non-portable extension.\n\n       =r     Pops two values off of the stack that must be numbers and\n\t      compares them.  If the first value is equal to the second, then\n\t      the contents of register r are executed.\n\n\t      If either or both of the values are not numbers, dc(1) will\n\t      raise an error and reset (see the RESET section).\n\n       =res   Like the above, but will execute register s if the comparison\n\t      fails.\n\n\t      If either or both of the values are not numbers, dc(1) will\n\t      raise an error and reset (see the RESET section).\n\n\t      This is a non-portable extension.\n\n       !=r    Pops two values off of the stack that must be numbers and\n\t      compares them.  If the first value is not equal to the second,\n\t      then the contents of register r are executed.\n\n\t      If either or both of the values are not numbers, dc(1) will\n\t      raise an error and reset (see the RESET section).\n\n       !=res  Like the above, but will execute register s if the comparison\n\t      fails.\n\n\t      If either or both of the values are not numbers, dc(1) will\n\t      raise an error and reset (see the RESET section).\n\n\t      This is a non-portable extension.\n\n       ?      Reads a line from the stdin and executes it.  This is to allow\n\t      macros to request input from users.\n\n       q      During execution of a macro, this exits the execution of that\n\t      macro and the execution of the macro that executed it.  If there\n\t      are no macros, or only one macro executing, dc(1) exits.\n\n       Q      Pops a value from the stack which must be non-negative and is\n\t      used the number of macro executions to pop off of the execution\n\t      stack.  If the number of levels to pop is greater than the\n\t      number of executing macros, dc(1) exits.\n\n       ,      Pushes the depth of the execution stack onto the stack.  The\n\t      execution stack is the stack of string executions.  The number\n\t      that is pushed onto the stack is exactly as many as is needed to\n\t      make dc(1) exit with the Q command, so the sequence ,Q will make\n\t      dc(1) exit.\n\n\t      This is a non-portable extension.\n",
        "       These commands query status of the stack or its top value.\n\n       Z      Pops a value off of the stack.\n\n\t      If it is a number, calculates the number of significant decimal\n\t      digits it has and pushes the result.  It will push 1 if the\n\t      argument is 0 with no decimal places.\n\n\t      If it is a string, pushes the number of characters the string\n\t      has.\n\n       X      Pops a value off of the stack.\n\n\t      If it is a number, pushes the scale of the value onto the stack.\n\n\t      If it is a string, pushes 0.\n\n       u      Pops one value off of the stack.\tIf the value is a number, this\n\t      pushes 1 onto the stack.\tOtherwise (if it is a string), it\n\t      pushes 0.\n\n\t      This is a non-portable extension.\n\n       t      Pops one value off of the stack.\tIf the value is a string, this\n\t      pushes 1 onto the stack.\tOtherwise (if it is a number), it\n\t      pushes 0.\n\n\t      This is a non-portable extension.\n\n       z      Pushes the current depth of the stack (before execution of this\n\t      command) onto the stack.\n\n       yr     Pushes the current stack depth of the register r onto the main\n\t      stack.\n\n\t      Because each register has a depth of 1 (with the value 0 in the\n\t      top item) when dc(1) starts, dc(1) requires that each register’s\n\t      stack must always have at least one item; dc(1) will give an\n\t      error and reset otherwise (see the RESET section).  This means\n\t      that this command will never push 0.\n\n\t      This is a non-portable extension.\n",
        "       These commands manipulate arrays.\n\n       :r     Pops the top two values off of the stack.  The second value will\n\t      be stored in the array r (see the REGISTERS section), indexed by\n\t      the first value.\n\n       ;r     Pops the value on top of the stack and uses it as an index into\n\t      the array r.  The selected value is then pushed onto the stack.\n\n       Yr     Pushes the length of the array r onto the stack.\n\n\t      This is a non-portable extension.\n",
        "       These commands retrieve global settings.  These are the only commands\n       that require multiple specific characters, and all of them begin with\n       the letter g.  Only the characters below are allowed after the\n       character g; any other character produces a parse error (see the ERRORS\n       section).\n\n       gl     Pushes the line length set by DC_LINE_LENGTH (see the\n\t      ENVIRONMENT VARIABLES section) onto the stack.\n\n       gx     Pushes 1 onto the stack if extended register mode is on, 0\n\t      otherwise.  See the Extended Register Mode subsection of the\n\t      REGISTERS section for more information.\n\n       gz     Pushes 0 onto the stack if the leading zero setting has not been\n\t      enabled with the -z or --leading-zeroes options (see the OPTIONS\n\t      section), non-zero otherwise.\n",
        "       Registers are names that can store strings, numbers, and arrays.\n       (Number/string registers do not interfere with array registers.)\n\n       Each register is also its own stack, so the current register value is\n       the top of the stack for the register.  All registers, when first\n       referenced, have one value (0) in their stack, and it is a runtime\n       error to attempt to pop that item off of the register stack.\n\n       In non-extended register mode, a register name is just the single\n       character that follows any command that needs a register name.  The\n       only exceptions are: a newline (`\\n') and a left bracket (`['); it is a\n       parse error for a newline or a left bracket to be used as a register\n       name.\n",
        "       Unlike most other dc(1) implentations, this dc(1) provides nearly\n       unlimited amounts of registers, if extended register mode is enabled.\n\n       If extended register mode is enabled (-x or --extended-register\n       command-line arguments are given), then normal single character\n       registers are used unless the character immediately following a command\n       that needs a register name is a space (according to isspace()) and not\n       a newline (`\\n').\n\n       In that case, the register name is found according to the regex\n       [a-z][a-z0-9_]* (like bc(1) identifiers), and it is a parse error if\n       the next non-space characters do not match that regex.\n",
        "       When dc(1) encounters an error or a signal that it has a non-default\n       handler for, it resets.\tThis means that several things happen.\n\n       First, any macros that are executing are stopped and popped off the\n       stack.  The behavior is not unlike that of exceptions in programming\n       languages.  Then the execution point is set so that any code waiting to\n       execute (after all macros returned) is skipped.\n\n       Thus, when dc(1) resets, it skips any remaining code waiting to be\n       executed.  Then, if it is interactive mode, and the error was not a\n       fatal error (see the EXIT STATUS section), it asks for more input;\n       otherwise, it exits with the appropriate return code.\n",
        "       Most dc(1) implementations use char types to calculate the value of 1\n       decimal digit at a time, but that can be slow.  This dc(1) does\n       something different.\n\n       It uses large integers to calculate more than 1 decimal digit at a\n       time.  If built in a environment where DC_LONG_BIT (see the LIMITS\n       section) is 64, then each integer has 9 decimal digits.\tIf built in an\n       environment where DC_LONG_BIT is 32 then each integer has 4 decimal\n       digits.\tThis value (the number of decimal digits per large integer) is\n       called DC_BASE_DIGS.\n\n       In addition, this dc(1) uses an even larger integer for overflow\n       checking.  This integer type depends on the value of DC_LONG_BIT, but\n       is always at least twice as large as the integer type used to store\n       digits.\n",
        "       The following are the limits on dc(1):\n\n       DC_LONG_BIT\n\t      The number of bits in the long type in the environment where\n\t      dc(1) was built.\tThis determines how many decimal digits can be\n\t      stored in a single large integer (see the PERFORMANCE section).\n\n       DC_BASE_DIGS\n\t      The number of decimal digits per large integer (see the\n\t      PERFORMANCE section).  Depends on DC_LONG_BIT.\n\n       DC_BASE_POW\n\t      The max decimal number that each large integer can store (see\n\t      DC_BASE_DIGS) plus 1.  Depends on DC_BASE_DIGS.\n\n       DC_OVERFLOW_MAX\n\t      The max number that the overflow type (see the PERFORMANCE\n\t      section) can hold.  Depends on DC_LONG_BIT.\n\n       DC_BASE_MAX\n\t      The maximum output base.\tSet at DC_BASE_POW.\n\n       DC_DIM_MAX\n\t      The maximum size of arrays.  Set at SIZE_MAX-1.\n\n       DC_SCALE_MAX\n\t      The maximum scale.  Set at DC_OVERFLOW_MAX-1.\n\n       DC_STRING_MAX\n\t      The maximum length of strings.  Set at DC_OVERFLOW_MAX-1.\n\n       DC_NAME_MAX\n\t      The maximum length of identifiers.  Set at DC_OVERFLOW_MAX-1.\n\n       DC_NUM_MAX\n\t      The maximum length of a number (in decimal digits), which\n\t      includes digits after the decimal point.\tSet at\n\t      DC_OVERFLOW_MAX-1.\n\n       DC_RAND_MAX\n\t      The maximum integer (inclusive) returned by the ’ command, if\n\t      dc(1).  Set at 2^DC_LONG_BIT-1.\n\n       Exponent\n\t      The maximum allowable exponent (positive or negative).  Set at\n\t      DC_OVERFLOW_MAX.\n\n       Number of vars\n\t      The maximum number of vars/arrays.  Set at SIZE_MAX-1.\n\n       These limits are meant to be effectively non-existent; the limits are\n       so large (at least on 64-bit machines) that there should not be any\n       point at which they become a problem.  In fact, memory should be\n       exhausted before these limits should be hit.\n",
        "       As non-portable extensions, dc(1) recognizes the following environment\n       variables:\n\n       DC_ENV_ARGS\n\t      This is another way to give command-line arguments to dc(1).\n\t      They should be in the same format as all other command-line\n\t      arguments.  These are always processed first, so any files given\n\t      in DC_ENV_ARGS will be processed before arguments and files\n\t      given on the command-line.  This gives the user the ability to\n\t      set up “standard” options and files to be used at every\n\t      invocation.  The most useful thing for such files to contain\n\t      would be useful functions that the user might want every time\n\t      dc(1) runs.  Another use would be to use the -e option to set\n\t      scale to a value other than 0.\n\n\t      The code that parses DC_ENV_ARGS will correctly handle quoted\n\t      arguments, but it does not understand escape sequences.  For\n\t      example, the string “/home/gavin/some dc file.dc” will be\n\t      correctly parsed, but the string “/home/gavin/some \"dc\" file.dc”\n\t      will include the backslashes.\n\n\t      The quote parsing will handle either kind of quotes, ’ or “.\n\t      Thus, if you have a file with any number of single quotes in the\n\t      name, you can use double quotes as the outside quotes, as in\n\t      “some `dc' file.dc”, and vice versa if you have a file with\n\t      double quotes.  However, handling a file with both kinds of\n\t      quotes in DC_ENV_ARGS is not supported due to the complexity of\n\t      the parsing, though such files are still supported on the\n\t      command-line where the parsing is done by the shell.\n\n       DC_LINE_LENGTH\n\t      If this environment variable exists and contains an integer that\n\t      is greater than 1 and is less than UINT16_MAX (2^16-1), dc(1)\n\t      will output lines to that length, including the backslash\n\t      newline combo.  The default line length is 70.\n\n\t      The special value of 0 will disable line length checking and\n\t      print numbers without regard to line length and without\n\t      backslashes and newlines.\n\n       DC_SIGINT_RESET\n\t      If dc(1) is not in interactive mode (see the INTERACTIVE MODE\n\t      section), then this environment variable has no effect because\n\t      dc(1) exits on SIGINT when not in interactive mode.\n\n\t      However, when dc(1) is in interactive mode, then if this\n\t      environment variable exists and contains an integer, a non-zero\n\t      value makes dc(1) reset on SIGINT, rather than exit, and zero\n\t      makes dc(1) exit.  If this environment variable exists and is\n\t      not an integer, then dc(1) will exit on SIGINT.\n\n\t      This environment variable overrides the default, which can be\n\t      queried with the -h or --help options.\n\n       DC_TTY_MODE\n\t      If TTY mode is not available (see the TTY MODE section), then\n\t      this environment variable has no effect.\n\n\t      However, when TTY mode is available, then if this environment\n\t      variable exists and contains an integer, then a non-zero value\n\t      makes dc(1) use TTY mode, and zero makes dc(1) not use TTY mode.\n\n\t      This environment variable overrides the default, which can be\n\t      queried with the -h or --help options.\n\n       DC_PROMPT\n\t      If TTY mode is not available (see the TTY MODE section), then\n\t      this environment variable has no effect.\n\n\t      However, when TTY mode is available, then if this environment\n\t      variable exists and contains an integer, a non-zero value makes\n\t      dc(1) use a prompt, and zero or a non-integer makes dc(1) not\n\t      use a prompt.  If this environment variable does not exist and\n\t      DC_TTY_MODE does, then the value of the DC_TTY_MODE environment\n\t      variable is used.\n\n\t      This environment variable and the DC_TTY_MODE environment\n\t      variable override the default, which can be queried with the -h\n\t      or --help options.\n\n       DC_EXPR_EXIT\n\t      If any expressions or expression files are given on the\n\t      command-line with -e, --expression, -f, or --file, then if this\n\t      environment variable exists and contains an integer, a non-zero\n\t      value makes dc(1) exit after executing the expressions and\n\t      expression files, and a zero value makes dc(1) not exit.\n\n\t      This environment variable overrides the default, which can be\n\t      queried with the -h or --help options.\n\n       DC_DIGIT_CLAMP\n\t      When parsing numbers and if this environment variable exists and\n\t      contains an integer, a non-zero value makes dc(1) clamp digits\n\t      that are greater than or equal to the current ibase so that all\n\t      such digits are considered equal to the ibase minus 1, and a\n\t      zero value disables such clamping so that those digits are\n\t      always equal to their value, which is multiplied by the power of\n\t      the ibase.\n\n\t      This never applies to single-digit numbers, as per the bc(1)\n\t      standard (see the STANDARDS section).\n\n\t      This environment variable overrides the default, which can be\n\t      queried with the -h or --help options.\n",
        "       dc(1) returns the following exit statuses:\n\n       0      No error.\n\n       1      A math error occurred.  This follows standard practice of using\n\t      1 for expected errors, since math errors will happen in the\n\t      process of normal execution.\n\n\t      Math errors include divide by 0, taking the square root of a\n\t      negative number, using a negative number as a bound for the\n\t      pseudo-random number generator, attempting to convert a negative\n\t      number to a hardware integer, overflow when converting a number\n\t      to a hardware integer, overflow when calculating the size of a\n\t      number, and attempting to use a non-integer where an integer is\n\t      required.\n\n\t      Converting to a hardware integer happens for the second operand\n\t      of the power (^), places (@), left shift (H), and right shift\n\t      (h) operators.\n\n       2      A parse error occurred.\n\n\t      Parse errors include unexpected EOF, using an invalid character,\n\t      failing to find the end of a string or comment, and using a\n\t      token where it is invalid.\n\n       3      A runtime error occurred.\n\n\t      Runtime errors include assigning an invalid number to any global\n\t      (ibase, obase, or scale), giving a bad expression to a read()\n\t      call, calling read() inside of a read() call, type errors\n\t      (including attempting to execute a number), and attempting an\n\t      operation when the stack has too few elements.\n\n       4      A fatal error occurred.\n\n\t      Fatal errors include memory allocation errors, I/O errors,\n\t      failing to open files, attempting to use files that do not have\n\t      only ASCII characters (dc(1) only accepts ASCII characters),\n\t      attempting to open a directory as a file, and giving invalid\n\t      command-line options.\n\n       The exit status 4 is special; when a fatal error occurs, dc(1) always\n       exits and returns 4, no matter what mode dc(1) is in.\n\n       The other statuses will only be returned when dc(1) is not in\n       interactive mode (see the INTERACTIVE MODE section), since dc(1) resets\n       its state (see the RESET section) and accepts more input when one of\n       those errors occurs in interactive mode.  This is also the case when\n       interactive mode is forced by the -i flag or --interactive option.\n\n       These exit statuses allow dc(1) to be used in shell scripting with\n       error checking, and its normal behavior can be forced by using the -i\n       flag or --interactive option.\n",
        "       Like bc(1), dc(1) has an interactive mode and a non-interactive mode.\n       Interactive mode is turned on automatically when both stdin and stdout\n       are hooked to a terminal, but the -i flag and --interactive option can\n       turn it on in other situations.\n\n       In interactive mode, dc(1) attempts to recover from errors (see the\n       RESET section), and in normal execution, flushes stdout as soon as\n       execution is done for the current input.  dc(1) may also reset on\n       SIGINT instead of exit, depending on the contents of, or default for,\n       the DC_SIGINT_RESET environment variable (see the ENVIRONMENT VARIABLES\n       section).\n",
        "       If stdin, stdout, and stderr are all connected to a TTY, then “TTY\n       mode” is considered to be available, and thus, dc(1) can turn on TTY\n       mode, subject to some settings.\n\n       If there is the environment variable DC_TTY_MODE in the environment\n       (see the ENVIRONMENT VARIABLES section), then if that environment\n       variable contains a non-zero integer, dc(1) will turn on TTY mode when\n       stdin, stdout, and stderr are all connected to a TTY.  If the\n       DC_TTY_MODE environment variable exists but is not a non-zero integer,\n       then dc(1) will not turn TTY mode on.\n\n       If the environment variable DC_TTY_MODE does not exist, the default\n       setting is used.  The default setting can be queried with the -h or\n       --help options.\n\n       TTY mode is different from interactive mode because interactive mode is\n       required in the bc(1) specification (see the STANDARDS section), and\n       interactive mode requires only stdin and stdout to be connected to a\n       terminal.\n",
        "       Command-line history is only enabled if TTY mode is, i.e., that stdin,\n       stdout, and stderr are connected to a TTY and the DC_TTY_MODE\n       environment variable (see the ENVIRONMENT VARIABLES section) and its\n       default do not disable TTY mode.  See the COMMAND LINE HISTORY section\n       for more information.\n",
        "       If TTY mode is available, then a prompt can be enabled.\tLike TTY mode\n       itself, it can be turned on or off with an environment variable:\n       DC_PROMPT (see the ENVIRONMENT VARIABLES section).\n\n       If the environment variable DC_PROMPT exists and is a non-zero integer,\n       then the prompt is turned on when stdin, stdout, and stderr are\n       connected to a TTY and the -P and --no-prompt options were not used.\n       The read prompt will be turned on under the same conditions, except\n       that the -R and --no-read-prompt options must also not be used.\n\n       However, if DC_PROMPT does not exist, the prompt can be enabled or\n       disabled with the DC_TTY_MODE environment variable, the -P and\n       --no-prompt options, and the -R and --no-read-prompt options.  See the\n       ENVIRONMENT VARIABLES and OPTIONS sections for more details.\n",
        "       Sending a SIGINT will cause dc(1) to do one of two things.\n\n       If dc(1) is not in interactive mode (see the INTERACTIVE MODE section),\n       or the DC_SIGINT_RESET environment variable (see the ENVIRONMENT\n       VARIABLES section), or its default, is either not an integer or it is\n       zero, dc(1) will exit.\n\n       However, if dc(1) is in interactive mode, and the DC_SIGINT_RESET or\n       its default is an integer and non-zero, then dc(1) will stop executing\n       the current input and reset (see the RESET section) upon receiving a\n       SIGINT.\n\n       Note that “current input” can mean one of two things.  If dc(1) is\n       processing input from stdin in interactive mode, it will ask for more\n       input.  If dc(1) is processing input from a file in interactive mode,\n       it will stop processing the file and start processing the next file, if\n       one exists, or ask for input from stdin if no other file exists.\n\n       This means that if a SIGINT is sent to dc(1) as it is executing a file,\n       it can seem as though dc(1) did not respond to the signal since it will\n       immediately start executing the next file.  This is by design; most\n       files that users execute when interacting with dc(1) have function\n       definitions, which are quick to parse.  If a file takes a long time to\n       execute, there may be a bug in that file.  The rest of the files could\n       still be executed without problem, allowing the user to continue.\n\n       SIGTERM and SIGQUIT cause dc(1) to clean up and exit, and it uses the\n       default handler for all other signals.  The one exception is SIGHUP; in\n       that case, and only when dc(1) is in TTY mode (see the TTY MODE\n       section), a SIGHUP will cause dc(1) to clean up and exit.\n",
        "       dc(1) supports interactive command-line editing.\n\n       If dc(1) can be in TTY mode (see the TTY MODE section), history can be\n       enabled.  This means that command-line history can only be enabled when\n       stdin, stdout, and stderr are all connected to a TTY.\n\n       Like TTY mode itself, it can be turned on or off with the environment\n       variable DC_TTY_MODE (see the ENVIRONMENT VARIABLES section).\n\n       Note: tabs are converted to 8 spaces.\n",
        "       This dc(1) ships with support for adding error messages for different\n       locales and thus, supports LC_MESSAGES.\n",
        "       bc(1)\n",
        "       The dc(1) utility operators and some behavior are compliant with the\n       operators in the IEEE Std 1003.1-2017 (“POSIX.1-2017”) bc(1)\n       specification at\n       https://pubs.opengroup.org/onlinepubs/9699919799/utilities/bc.html .\n",
        "       None are known.\tReport bugs at https://git.gavinhoward.com/gavin/bc .\n",
        "       Gavin D. Howard <gavin@gavinhoward.com> and contributors.\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "-C",
      "description": ", --no-digit-clamp Disables clamping of digits greater than or equal to the current ibase when parsing numbers. This means that the value added to a number from a digit is always that digit’s value multiplied by the value of ibase raised to the power of the digit’s position, which starts from 0 at the least significant digit. If this and/or the -c or --digit-clamp options are given multiple times, the last one given is used. This option overrides the DC_DIGIT_CLAMP environment variable (see the ENVIRONMENT VARIABLES section) and the default, which can be queried with the -h or --help options. This is a non-portable extension."
    },
    {
      "flag": "-c",
      "description": ", --digit-clamp Enables clamping of digits greater than or equal to the current ibase when parsing numbers. This means that digits that the value added to a number from a digit that is greater than or equal to the ibase is the value of ibase minus 1 all multiplied by the value of ibase raised to the power of the digit’s position, which starts from 0 at the least significant digit. If this and/or the -C or --no-digit-clamp options are given multiple times, the last one given is used. This option overrides the DC_DIGIT_CLAMP environment variable (see the ENVIRONMENT VARIABLES section) and the default, which can be queried with the -h or --help options. This is a non-portable extension."
    },
    {
      "flag": "-E",
      "description": " Sets the builtin variable seed to the value seed assuming that seed is in base 10.  It is a fatal error if seed is not a valid number. If multiple instances of this option are given, the last is used. This is a non-portable extension.",
      "optional": true
    },
    {
      "flag": "-e",
      "description": " Evaluates expr.  If multiple expressions are given, they are evaluated in order.  If files are given as well (see below), the expressions and files are evaluated in the order given.  This means that if a file is given before an expression, the file is read in and evaluated first. If this option is given on the command-line (i.e., not in DC_ENV_ARGS, see the ENVIRONMENT VARIABLES section), then after processing all expressions and files, dc(1) will exit, unless - (stdin) was given as an argument at least once to -f or --file, whether on the command-line or in DC_ENV_ARGS.  However, if any other -e, --expression, -f, or --file arguments are given after",
      "optional": true
    },
    {
      "flag": "-f-",
      "description": "or equivalent is given, dc(1) will give a fatal error and exit. This is a non-portable extension."
    },
    {
      "flag": "-f",
      "description": " Reads in file and evaluates it, line by line, as though it were read through stdin.  If expressions are also given (see above), the expressions are evaluated in the order given. If this option is given on the command-line (i.e., not in DC_ENV_ARGS, see the ENVIRONMENT VARIABLES section), then after processing all expressions and files, dc(1) will exit, unless - (stdin) was given as an argument at least once to -f or --file. However, if any other -e, --expression, -f, or --file arguments are given after -f- or equivalent is given, dc(1) will give a fatal error and exit. This is a non-portable extension.",
      "optional": true
    },
    {
      "flag": "-h",
      "description": ", --help Prints a usage message and exits."
    },
    {
      "flag": "-I",
      "description": " Sets the builtin variable ibase to the value ibase assuming that ibase is in base 10.  It is a fatal error if ibase is not a valid number. If multiple instances of this option are given, the last is used. This is a non-portable extension.",
      "optional": true
    },
    {
      "flag": "-i",
      "description": ", --interactive Forces interactive mode.\t(See the INTERACTIVE MODE section.) This is a non-portable extension."
    },
    {
      "flag": "-L",
      "description": ", --no-line-length Disables line length checking and prints numbers without backslashes and newlines.  In other words, this option sets BC_LINE_LENGTH to 0 (see the ENVIRONMENT VARIABLES section). This is a non-portable extension."
    },
    {
      "flag": "-O",
      "description": " Sets the builtin variable obase to the value obase assuming that obase is in base 10.  It is a fatal error if obase is not a valid number. If multiple instances of this option are given, the last is used. This is a non-portable extension.",
      "optional": true
    },
    {
      "flag": "-P",
      "description": ", --no-prompt Disables the prompt in TTY mode.\t(The prompt is only enabled in TTY mode.  See the TTY MODE section.)  This is mostly for those users that do not want a prompt or are not used to having them in dc(1).  Most of those users would want to put this option in DC_ENV_ARGS. These options override the DC_PROMPT and DC_TTY_MODE environment variables (see the ENVIRONMENT VARIABLES section). This is a non-portable extension."
    },
    {
      "flag": "-R",
      "description": ", --no-read-prompt Disables the read prompt in TTY mode.  (The read prompt is only enabled in TTY mode.  See the TTY MODE section.)\tThis is mostly for those users that do not want a read prompt or are not used to having them in dc(1).\tMost of those users would want to put this option in BC_ENV_ARGS (see the ENVIRONMENT VARIABLES section).  This option is also useful in hash bang lines of dc(1) scripts that prompt for user input. This option does not disable the regular prompt because the read prompt is only used when the ? command is used. These options do override the DC_PROMPT and DC_TTY_MODE environment variables (see the ENVIRONMENT VARIABLES section), but only for the read prompt. This is a non-portable extension."
    },
    {
      "flag": "-S",
      "description": " Sets the builtin variable scale to the value scale assuming that scale is in base 10.  It is a fatal error if scale is not a valid number. If multiple instances of this option are given, the last is used. This is a non-portable extension.",
      "optional": true
    },
    {
      "flag": "-v",
      "description": ", -V, --version Print the version information (copyright header) and exits."
    },
    {
      "flag": "-x",
      "description": "--extended-register Enables extended register mode.  See the Extended Register Mode subsection of the REGISTERS section for more information. This is a non-portable extension."
    },
    {
      "flag": "-z",
      "description": ", --leading-zeroes Makes dc(1) print all numbers greater than -1 and less than 1, and not equal to 0, with a leading zero. This is a non-portable extension. All long options are non-portable extensions."
    }
  ],
  "examples": [],
  "relatedCommands": [
    "bc",
    "decimal",
    "notation",
    "calculator",
    "version",
    "help",
    "digit-clamp",
    "no-digit-clamp",
    "interactive",
    "no-prompt",
    "no-read-prompt",
    "expr",
    "expression",
    "ibase",
    "obase"
  ],
  "seeAlso": [
    {
      "name": "bc",
      "section": 1
    }
  ],
  "metadata": {},
  "searchContent": "dc dc manual page dc 1 is an arbitrary-precision calculator dc -cchiprvvx --version --help --digit-clamp --no-digit-clamp --interactive --no-prompt --no-read-prompt --extended-register -e expr --expression expr -f file --file file file -i ibase --ibase ibase -o obase --obase obase -s scale --scale scale -e seed --seed seed dc manual page dc 1 arbitrary-precision calculator -c --no-digit-clamp disables clamping of digits greater than or equal to the current ibase when parsing numbers this means that the value added to a number from a digit is always that digit s value multiplied by the value of ibase raised to the power of the digit s position which starts from 0 at the least significant digit if this and or the -c or --digit-clamp options are given multiple times the last one given is used this option overrides the dc digit clamp environment variable see the environment variables section and the default which can be queried with the -h or --help options this is a non-portable extension -c --digit-clamp enables clamping of digits greater than or equal to the current ibase when parsing numbers this means that digits that the value added to a number from a digit that is greater than or equal to the ibase is the value of ibase minus 1 all multiplied by the value of ibase raised to the power of the digit s position which starts from 0 at the least significant digit if this and or the -c or --no-digit-clamp options are given multiple times the last one given is used this option overrides the dc digit clamp environment variable see the environment variables section and the default which can be queried with the -h or --help options this is a non-portable extension -e sets the builtin variable seed to the value seed assuming that seed is in base 10 it is a fatal error if seed is not a valid number if multiple instances of this option are given the last is used this is a non-portable extension -e evaluates expr if multiple expressions are given they are evaluated in order if files are given as well see below the expressions and files are evaluated in the order given this means that if a file is given before an expression the file is read in and evaluated first if this option is given on the command-line i e not in dc env args see the environment variables section then after processing all expressions and files dc 1 will exit unless - stdin was given as an argument at least once to -f or --file whether on the command-line or in dc env args however if any other -e --expression -f or --file arguments are given after -f- or equivalent is given dc 1 will give a fatal error and exit this is a non-portable extension -f reads in file and evaluates it line by line as though it were read through stdin if expressions are also given see above the expressions are evaluated in the order given if this option is given on the command-line i e not in dc env args see the environment variables section then after processing all expressions and files dc 1 will exit unless - stdin was given as an argument at least once to -f or --file however if any other -e --expression -f or --file arguments are given after -f- or equivalent is given dc 1 will give a fatal error and exit this is a non-portable extension -h --help prints a usage message and exits -i sets the builtin variable ibase to the value ibase assuming that ibase is in base 10 it is a fatal error if ibase is not a valid number if multiple instances of this option are given the last is used this is a non-portable extension -i --interactive forces interactive mode see the interactive mode section this is a non-portable extension -l --no-line-length disables line length checking and prints numbers without backslashes and newlines in other words this option sets bc line length to 0 see the environment variables section this is a non-portable extension -o sets the builtin variable obase to the value obase assuming that obase is in base 10 it is a fatal error if obase is not a valid number if multiple instances of this option are given the last is used this is a non-portable extension -p --no-prompt disables the prompt in tty mode the prompt is only enabled in tty mode see the tty mode section this is mostly for those users that do not want a prompt or are not used to having them in dc 1 most of those users would want to put this option in dc env args these options override the dc prompt and dc tty mode environment variables see the environment variables section this is a non-portable extension -r --no-read-prompt disables the read prompt in tty mode the read prompt is only enabled in tty mode see the tty mode section this is mostly for those users that do not want a read prompt or are not used to having them in dc 1 most of those users would want to put this option in bc env args see the environment variables section this option is also useful in hash bang lines of dc 1 scripts that prompt for user input this option does not disable the regular prompt because the read prompt is only used when the command is used these options do override the dc prompt and dc tty mode environment variables see the environment variables section but only for the read prompt this is a non-portable extension -s sets the builtin variable scale to the value scale assuming that scale is in base 10 it is a fatal error if scale is not a valid number if multiple instances of this option are given the last is used this is a non-portable extension -v -v --version print the version information copyright header and exits -x --extended-register enables extended register mode see the extended register mode subsection of the registers section for more information this is a non-portable extension -z --leading-zeroes makes dc 1 print all numbers greater than -1 and less than 1 and not equal to 0 with a leading zero this is a non-portable extension all long options are non-portable extensions synopsis gavin d howard january 2024 dc 1",
  "keywords": [
    "dc",
    "manual",
    "page",
    "dc(1)",
    "arbitrary-precision",
    "calculator."
  ],
  "complexity": "intermediate",
  "hash": "e14630e59960544c",
  "parsedAt": "2025-06-17T19:42:11.837Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": false,
  "hasDiagrams": false
}