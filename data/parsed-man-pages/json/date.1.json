{
  "name": "date",
  "section": 1,
  "title": "date manual page",
  "description": "When invoked without arguments, the date utility displays the current date and time.",
  "synopsis": "date [-nRu] [-z output_zone] [-I[FMT]] [-r filename] [-r seconds] [-v[+|-]val[y|m|w|d|H|M|S]] [+output_fmt] date [-jnRu] [-z output_zone] [-I[FMT]] [-v[+|-]val[y|m|w|d|H|M|S]] [[[mm]dd]HH]MM[[cc]yy][.SS] [+output_fmt] date [-jnRu] [-z output_zone] [-I[FMT]] [-v[+|-]val[y|m|w|d|H|M|S]] -f input_fmt new_date [+output_fmt]",
  "category": "User Commands",
  "sections": [
    {
      "id": "name",
      "title": "NAME",
      "content": "-f input_fmt new_date [+output_fmt]",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     date – display or set date and time\n",
        "     date [-nRu] [-z output_zone] [-I[FMT]] [-r filename] [-r seconds]",
        "     date [-jnRu] [-z output_zone] [-I[FMT]] [-v[+|-]val[y|m|w|d|H|M|S]]",
        "     date [-jnRu] [-z output_zone] [-I[FMT]] [-v[+|-]val[y|m|w|d|H|M|S]]"
      ]
    },
    {
      "id": "description",
      "title": "DESCRIPTION",
      "content": "macOS 15.5\t\t      September 10, 2024\t\t    macOS 15.5",
      "level": 1,
      "subsections": [],
      "codeBlocks": [
        "     When invoked without arguments, the date utility displays the current\n     date and time.  Otherwise, depending on the options specified, date will\n     set the date and time or print it in a user-defined way.\n\n     The date utility displays the date and time read from the kernel clock.\n     When used to set the date and time, both the kernel clock and the\n     hardware clock are updated.\n\n     Only the superuser may set the date, and if the system securelevel (see\n     securelevel(7)) is greater than 1, the time may not be changed by more\n     than 1 second.\n\n     The options are as follows:\n\n     -f input_fmt\n\t     Use input_fmt as the format string to parse the new_date provided\n\t     rather than using the default [[[mm]dd]HH]MM[[cc]yy][.SS] format.\n\t     Parsing is done using strptime(3).\n\n     -I[FMT]\n\t     Use ISO 8601 output format.  FMT may be omitted, in which case\n\t     the default is date.  Valid FMT values are date, hours, minutes,\n\t     seconds, and ns (for nanoseconds).  The date and time is\n\t     formatted to the specified precision.  When FMT is hours (or the\n\t     more precise minutes, seconds, or ns), the ISO 8601 format\n\t     includes the timezone.\n\n     -j      Do not try to set the date.  This allows you to use the -f flag\n\t     in addition to the + option to convert one date format to\n\t     another.  Note that any date or time components unspecified by\n\t     the -f format string take their values from the current time.\n\n     -n      Obsolete flag, accepted and ignored for compatibility.\n\n     -R      Use RFC 2822 date and time output format.\tThis is equivalent to\n\t     using “%a, %d %b %Y %T %z” as output_fmt while LC_TIME is set to\n\t     the “C” locale .\n\n     -r seconds\n\t     Print the date and time represented by seconds, where seconds is\n\t     the number of seconds since the Epoch (00:00:00 UTC, January 1,\n\t     1970; see time(3)), and can be specified in decimal, octal, or\n\t     hex.\n\n     -r filename\n\t     Print the date and time of the last modification of filename.\n\n     -u      Display or set the date in UTC (Coordinated Universal) time.  By\n\t     default date displays the time in the time zone described by\n\t     /etc/localtime or the TZ environment variable.\n\n     -z output_zone\n\t     Just before printing the time, change to the specified timezone;\n\t     see the description of TZ below.  This can be used with -j to\n\t     easily convert time specifications from one zone to another.\n\n     -v [+|-]val[y|m|w|d|H|M|S]\n\t     Adjust (i.e., take the current date and display the result of the\n\t     adjustment; not actually set the date) the second, minute, hour,\n\t     month day, week day, month or year according to val.  If val is\n\t     preceded by a plus or minus sign, the date is adjusted forward or\n\t     backward according to the remaining string, otherwise the\n\t     relevant part of the date is set.\tThe date can be adjusted as\n\t     many times as required using these flags.\tFlags are processed in\n\t     the order given.\n\n\t     When setting values (rather than adjusting them), seconds are in\n\t     the range 0-59, minutes are in the range 0-59, hours are in the\n\t     range 0-23, month days are in the range 1-31, week days are in\n\t     the range 0-6 (Sun-Sat), months are in the range 1-12 (Jan-Dec)\n\t     and years are in a limited range depending on the platform.\n\n\t     On i386, years are in the range 69-38 representing 1969-2038.  On\n\t     every other platform, years 0-68 are accepted and represent\n\t     2000-2068, and 69-99 are accepted and represent 1969-1999.  In\n\t     both cases, years between 100 and 1900 (both included) are\n\t     accepted and interpreted as relative to 1900 of the Gregorian\n\t     calendar with a limit of 138 on i386 and a much higher limit on\n\t     every other platform.  Years starting at 1901 are also accepted,\n\t     and are interpreted as absolute years.\n\n\t     If val is numeric, one of either y, m, w, d, H, M or S must be\n\t     used to specify which part of the date is to be adjusted.\n\n\t     The week day or month may be specified using a name rather than a\n\t     number.  If a name is used with the plus (or minus) sign, the\n\t     date will be put forwards (or backwards) to the next (previous)\n\t     date that matches the given week day or month.  This will not\n\t     adjust the date, if the given week day or month is the same as\n\t     the current one.\n\n\t     When a date is adjusted to a specific value or in units greater\n\t     than hours, daylight savings time considerations are ignored.\n\t     Adjustments in units of hours or less honor daylight saving time.\n\t     So, assuming the current date is March 26, 0:30 and that the DST\n\t     adjustment means that the clock goes forward at 01:00 to 02:00,\n\t     using -v +1H will adjust the date to March 26, 2:30.  Likewise,\n\t     if the date is October 29, 0:30 and the DST adjustment means that\n\t     the clock goes back at 02:00 to 01:00, using -v +3H will be\n\t     necessary to reach October 29, 2:30.\n\n\t     When the date is adjusted to a specific value that does not\n\t     actually exist (for example March 26, 1:30 BST 2000 in the\n\t     Europe/London timezone), the date will be silently adjusted\n\t     forward in units of one hour until it reaches a valid time.  When\n\t     the date is adjusted to a specific value that occurs twice (for\n\t     example October 29, 1:30 2000), the resulting timezone will be\n\t     set so that the date matches the earlier of the two times.\n\n\t     It is not possible to adjust a date to an invalid absolute day,\n\t     so using the switches -v 31d -v 12m will simply fail five months\n\t     of the year.  It is therefore usual to set the month before\n\t     setting the day; using -v 12m -v 31d always works.\n\n\t     Adjusting the date by months is inherently ambiguous because a\n\t     month is a unit of variable length depending on the current date.\n\t     This kind of date adjustment is applied in the most intuitive\n\t     way.  First of all, date tries to preserve the day of the month.\n\t     If it is impossible because the target month is shorter than the\n\t     present one, the last day of the target month will be the result.\n\t     For example, using -v +1m on May 31 will adjust the date to June\n\t     30, while using the same option on January 30 will result in the\n\t     date adjusted to the last day of February.  This approach is also\n\t     believed to make the most sense for shell scripting.\n\t     Nevertheless, be aware that going forth and back by the same\n\t     number of months may take you to a different date.\n\n\t     Refer to the examples below for further details.\n\n     An operand with a leading plus (‘+’) sign signals a user-defined format\n     string which specifies the format in which to display the date and time.\n     The format string may contain any of the conversion specifications\n     described in the strftime(3) manual page and ‘%N’ for nanoseconds, as\n     well as any arbitrary text.  A newline (‘\\n’) character is always output\n     after the characters specified by the format string.  The format string\n     for the default display is “+%+”.\n\n     If an operand does not have a leading plus sign, it is interpreted as a\n     value for setting the system's notion of the current date and time.  The\n     canonical representation for setting the date and time is:\n\n\t   cc\t   Century (either 19 or 20) prepended to the abbreviated\n\t\t   year.\n\t   yy\t   Year in abbreviated form (e.g., 89 for 1989, 06 for 2006).\n\t   mm\t   Numeric month, a number from 1 to 12.\n\t   dd\t   Day, a number from 1 to 31.\n\t   HH\t   Hour, a number from 0 to 23.\n\t   MM\t   Minutes, a number from 0 to 59.\n\t   SS\t   Seconds, a number from 0 to 60 (59 plus a potential leap\n\t\t   second).\n\n     Everything but the minutes is optional.\n\n     date understands the time zone definitions from the IANA Time Zone\n     Database, tzdata, located in /usr/share/zoneinfo.\tTime changes for\n     Daylight Saving Time, standard time, leap seconds and leap years are\n     handled automatically.\n\n     There are two ways to specify the time zone:\n\n     If the file or symlink /etc/localtime exists, it is interpreted as a time\n     zone definition file, usually in the directory hierarchy\n     /usr/share/zoneinfo, which contains the time zone definitions from\n     tzdata.\n\n     If the environment variable TZ is set, its value is interpreted as the\n     name of a time zone definition file, either an absolute path or a\n     relative path to a time zone definition in /usr/share/zoneinfo.  The TZ\n     variable overrides /etc/localtime.\n\n     If the time zone definition file is invalid, date silently reverts to\n     UTC.\n\n     Previous versions of date included the -d (set daylight saving time flag)\n     and -t (set negative time zone offset) options, but these details are now\n     handled automatically by tzdata.  Modern offsets are positive for time\n     zones ahead of UTC and negative for time zones behind UTC, but like the\n     obsolete -t option, the tzdata files in the subdirectory\n     /usr/share/zoneinfo/Etc still use an older convention where times ahead\n     of UTC are considered negative.\n",
        "     The following environment variable affects the execution of date:\n\n     TZ      The timezone to use when displaying dates.  The normal format is\n\t     a pathname relative to /usr/share/zoneinfo.  For example, the\n\t     command “TZ=America/Los_Angeles date” displays the current time\n\t     in California.  The variable can also specify an absolute path.\n\t     See environ(7) for more information.\n",
        "     /etc/localtime\tTime zone information file for default system time",
        "     /usr/share/zoneinfo",
        "     /var/log/messages\tRecord of the user setting the time.\n",
        "     The date utility exits 0 on success, 1 if unable to set the date, and 2\n     if able to set the local date, but unable to set it globally.\n",
        "     The command:\n\n\t   date \"+DATE: %Y-%m-%d%nTIME: %H:%M:%S\"\n\n     will display:\n\n\t   DATE: 1987-11-21\n\t   TIME: 13:36:16\n\n     In the Europe/London timezone, the command:\n\n\t   date -v1m -v+1y\n\n     will display:\n\n\t   Sun Jan  4 04:15:24 GMT 1998\n\n     where it is currently Mon Aug  4 04:15:24 BST 1997.\n\n     The command:\n\n\t   date -v1d -v3m -v0y -v-1d\n\n     will display the last day of February in the year 2000:\n\n\t   Tue Feb 29 03:18:00 GMT 2000\n\n     So will the command:\n\n\t   date -v3m -v30d -v0y -v-1m\n\n     because there is no such date as the 30th of February.\n\n     The command:\n\n\t   date -v1d -v+1m -v-1d -v-fri\n\n     will display the last Friday of the month:\n\n\t   Fri Aug 29 04:31:11 BST 1997\n\n     where it is currently Mon Aug  4 04:31:11 BST 1997.\n\n     The command:\n\n\t   date 0613162785\n\n     sets the date to “June 13, 1985, 4:27 PM”.\n\n\t   date \"+%m%d%H%M%Y.%S\"\n\n     may be used on one machine to print out the date suitable for setting on\n     another.\n\n     The command:\n\n\t   date 1432\n\n     sets the time to 2:32 PM, without modifying the date.\n\n     The command\n\n\t   TZ=America/Los_Angeles date -Iseconds -r 1533415339\n\n     will display\n\n\t   2018-08-04T13:42:19-07:00\n\n     The command:\n\n\t   env LC_ALL=C date -j -f \"%a %b %d %T %Z %Y\" \"`env LC_ALL=C date`\"\n\t   \"+%s\"\n\n     can be used to parse the output from date and express it in Epoch time.\n\n     Finally the command\n\n\t   TZ=America/Los_Angeles date -z Europe/Paris -j 0900\n\n     will print the time in the “Europe/Paris” timezone when it is 9:00 in the\n     “America/Los_Angeles” timezone.\n",
        "     It is invalid to combine the -I flag with either -R or an output format\n     (“+...”) operand.\tIf this occurs, date prints: ‘multiple output formats\n     specified’ and exits with status 1.\n",
        "     As above, except for the second line, which is:\n\n     date [-jnu] [[[[[cc]yy]mm]dd]HH]MM[.SS]\n\n     For more information about legacy mode, see compat(5).\n",
        "     locale(1), clock_gettime(2), gettimeofday(2), getutxent(3), strftime(3),\n     strptime(3), tzset(3)\n\n     R. Gusella and S. Zatti, TSP: The Time Synchronization Protocol for UNIX\n     4.3BSD.\n\n     Time Zone Database, https://iana.org/time-zones.\n",
        "     The date utility is expected to be compatible with IEEE Std 1003.2\n     (“POSIX.2”).  With the exception of the -u option, all options are\n     extensions to the standard.\n\n     The format selected by the -I flag is compatible with ISO 8601.\n\n     The ‘%N’ conversion specification for nanoseconds is a non-standard\n     extension.  It is compatible with GNU date's ‘%N’.\n",
        "     A date command appeared in Version 1 AT&T UNIX.\n\n     A number of options were added and then removed again, including the -d\n     (set DST flag) and -t (set negative time zone offset).  Time zones are\n     now handled by code bundled with tzdata.\n\n     The -I flag was added in FreeBSD 12.0.\n\n     The ‘%N’ conversion specification was added in FreeBSD 14.1.\n"
      ]
    }
  ],
  "flags": [
    {
      "flag": "-f",
      "description": " Use input_fmt as the format string to parse the new_date provided rather than using the default [[[mm]dd]HH]MM[[cc]yy][.SS] format. Parsing is done using strptime(3).",
      "optional": false
    },
    {
      "flag": "-I",
      "description": " Use ISO 8601 output format.  FMT may be omitted, in which case the default is date.  Valid FMT values are date, hours, minutes, seconds, and ns (for nanoseconds).  The date and time is formatted to the specified precision.  When FMT is hours (or the more precise minutes, seconds, or ns), the ISO 8601 format includes the timezone.",
      "argument": "FMT",
      "optional": true
    },
    {
      "flag": "-j",
      "description": "Do not try to set the date.  This allows you to use the -f flag in addition to the + option to convert one date format to another.  Note that any date or time components unspecified by the -f format string take their values from the current time."
    },
    {
      "flag": "-n",
      "description": "Obsolete flag, accepted and ignored for compatibility."
    },
    {
      "flag": "-R",
      "description": "Use RFC 2822 date and time output format.\tThis is equivalent to using “%a, %d %b %Y %T %z” as output_fmt while LC_TIME is set to the “C” locale ."
    },
    {
      "flag": "-r",
      "description": " Print the date and time represented by seconds, where seconds is the number of seconds since the Epoch (00:00:00 UTC, January 1, 1970; see time(3)), and can be specified in decimal, octal, or hex. Print the date and time of the last modification of filename.",
      "optional": true
    },
    {
      "flag": "-r",
      "description": " Print the date and time represented by seconds, where seconds is the number of seconds since the Epoch (00:00:00 UTC, January 1, 1970; see time(3)), and can be specified in decimal, octal, or hex. Print the date and time of the last modification of filename.",
      "optional": true
    },
    {
      "flag": "-u",
      "description": "Display or set the date in UTC (Coordinated Universal) time.  By default date displays the time in the time zone described by /etc/localtime or the TZ environment variable."
    },
    {
      "flag": "-z",
      "description": " Just before printing the time, change to the specified timezone; see the description of TZ below.  This can be used with -j to easily convert time specifications from one zone to another.",
      "optional": true
    },
    {
      "flag": "-v",
      "description": " Adjust (i.e., take the current date and display the result of the adjustment; not actually set the date) the second, minute, hour, month day, week day, month or year according to val.  If val is preceded by a plus or minus sign, the date is adjusted forward or backward according to the remaining string, otherwise the relevant part of the date is set.\tThe date can be adjusted as many times as required using these flags.\tFlags are processed in the order given. When setting values (rather than adjusting them), seconds are in the range 0-59, minutes are in the range 0-59, hours are in the range 0-23, month days are in the range 1-31, week days are in the range 0-6 (Sun-Sat), months are in the range 1-12 (Jan-Dec) and years are in a limited range depending on the platform. On i386, years are in the range 69-38 representing 1969-2038.  On every other platform, years 0-68 are accepted and represent 2000-2068, and 69-99 are accepted and represent 1969-1999.  In both cases, years between 100 and 1900 (both included) are accepted and interpreted as relative to 1900 of the Gregorian calendar with a limit of 138 on i386 and a much higher limit on every other platform.  Years starting at 1901 are also accepted, and are interpreted as absolute years. If val is numeric, one of either y, m, w, d, H, M or S must be used to specify which part of the date is to be adjusted. The week day or month may be specified using a name rather than a number.  If a name is used with the plus (or minus) sign, the date will be put forwards (or backwards) to the next (previous) date that matches the given week day or month.  This will not adjust the date, if the given week day or month is the same as the current one. When a date is adjusted to a specific value or in units greater than hours, daylight savings time considerations are ignored. Adjustments in units of hours or less honor daylight saving time. So, assuming the current date is March 26, 0:30 and that the DST adjustment means that the clock goes forward at 01:00 to 02:00, using -v +1H will adjust the date to March 26, 2:30.  Likewise, if the date is October 29, 0:30 and the DST adjustment means that the clock goes back at 02:00 to 01:00, using -v +3H will be necessary to reach October 29, 2:30. When the date is adjusted to a specific value that does not actually exist (for example March 26, 1:30 BST 2000 in the Europe/London timezone), the date will be silently adjusted forward in units of one hour until it reaches a valid time.  When the date is adjusted to a specific value that occurs twice (for example October 29, 1:30 2000), the resulting timezone will be set so that the date matches the earlier of the two times. It is not possible to adjust a date to an invalid absolute day, so using the switches -v 31d -v 12m will simply fail five months of the year.  It is therefore usual to set the month before setting the day; using -v 12m -v 31d always works. Adjusting the date by months is inherently ambiguous because a month is a unit of variable length depending on the current date. This kind of date adjustment is applied in the most intuitive way.  First of all, date tries to preserve the day of the month. If it is impossible because the target month is shorter than the present one, the last day of the target month will be the result. For example, using -v +1m on May 31 will adjust the date to June 30, while using the same option on January 30 will result in the date adjusted to the last day of February.  This approach is also believed to make the most sense for shell scripting. Nevertheless, be aware that going forth and back by the same number of months may take you to a different date. Refer to the examples below for further details. An operand with a leading plus (‘+’) sign signals a user-defined format string which specifies the format in which to display the date and time. The format string may contain any of the conversion specifications described in the strftime(3) manual page and ‘%N’ for nanoseconds, as well as any arbitrary text.  A newline (‘\\n’) character is always output after the characters specified by the format string.  The format string for the default display is “+%+”. If an operand does not have a leading plus sign, it is interpreted as a value for setting the system's notion of the current date and time.  The canonical representation for setting the date and time is: cc\t   Century (either 19 or 20) prepended to the abbreviated year. yy\t   Year in abbreviated form (e.g., 89 for 1989, 06 for 2006). mm\t   Numeric month, a number from 1 to 12. dd\t   Day, a number from 1 to 31. HH\t   Hour, a number from 0 to 23. MM\t   Minutes, a number from 0 to 59. SS\t   Seconds, a number from 0 to 60 (59 plus a potential leap second). Everything but the minutes is optional. date understands the time zone definitions from the IANA Time Zone Database, tzdata, located in /usr/share/zoneinfo.\tTime changes for Daylight Saving Time, standard time, leap seconds and leap years are handled automatically. There are two ways to specify the time zone: If the file or symlink /etc/localtime exists, it is interpreted as a time zone definition file, usually in the directory hierarchy /usr/share/zoneinfo, which contains the time zone definitions from tzdata. If the environment variable TZ is set, its value is interpreted as the name of a time zone definition file, either an absolute path or a relative path to a time zone definition in /usr/share/zoneinfo.  The TZ variable overrides /etc/localtime. If the time zone definition file is invalid, date silently reverts to UTC. Previous versions of date included the -d (set daylight saving time flag) and -t (set negative time zone offset) options, but these details are now handled automatically by tzdata.  Modern offsets are positive for time zones ahead of UTC and negative for time zones behind UTC, but like the obsolete -t option, the tzdata files in the subdirectory /usr/share/zoneinfo/Etc still use an older convention where times ahead of UTC are considered negative.",
      "argument": "+|-",
      "optional": true
    }
  ],
  "examples": [],
  "relatedCommands": [
    "locale",
    "clock_gettime",
    "gettimeofday",
    "getutxent",
    "strftime",
    "strptime",
    "tzset",
    "date",
    "display",
    "set",
    "time",
    "output_zone",
    "filename",
    "seconds",
    "val"
  ],
  "seeAlso": [
    {
      "name": "locale",
      "section": 1
    },
    {
      "name": "clock_gettime",
      "section": 2
    },
    {
      "name": "gettimeofday",
      "section": 2
    },
    {
      "name": "getutxent",
      "section": 3
    },
    {
      "name": "strftime",
      "section": 3
    },
    {
      "name": "strptime",
      "section": 3
    },
    {
      "name": "tzset",
      "section": 3
    }
  ],
  "metadata": {},
  "searchContent": "date date manual page when invoked without arguments the date utility displays the current date and time date -nru -z output zone -i fmt -r filename -r seconds -v - val y m w d h m s output fmt date -jnru -z output zone -i fmt -v - val y m w d h m s mm dd hh mm cc yy ss output fmt date -jnru -z output zone -i fmt -v - val y m w d h m s -f input fmt new date output fmt date manual page when invoked without arguments utility displays current time -f use input fmt as the format string to parse the new date provided rather than using the default mm dd hh mm cc yy ss format parsing is done using strptime 3 -i use iso 8601 output format fmt may be omitted in which case the default is date valid fmt values are date hours minutes seconds and ns for nanoseconds the date and time is formatted to the specified precision when fmt is hours or the more precise minutes seconds or ns the iso 8601 format includes the timezone -j do not try to set the date this allows you to use the -f flag in addition to the option to convert one date format to another note that any date or time components unspecified by the -f format string take their values from the current time -n obsolete flag accepted and ignored for compatibility -r use rfc 2822 date and time output format this is equivalent to using a d b y t z as output fmt while lc time is set to the c locale -r print the date and time represented by seconds where seconds is the number of seconds since the epoch 00 00 00 utc january 1 1970 see time 3 and can be specified in decimal octal or hex print the date and time of the last modification of filename -r print the date and time represented by seconds where seconds is the number of seconds since the epoch 00 00 00 utc january 1 1970 see time 3 and can be specified in decimal octal or hex print the date and time of the last modification of filename -u display or set the date in utc coordinated universal time by default date displays the time in the time zone described by etc localtime or the tz environment variable -z just before printing the time change to the specified timezone see the description of tz below this can be used with -j to easily convert time specifications from one zone to another -v adjust i e take the current date and display the result of the adjustment not actually set the date the second minute hour month day week day month or year according to val if val is preceded by a plus or minus sign the date is adjusted forward or backward according to the remaining string otherwise the relevant part of the date is set the date can be adjusted as many times as required using these flags flags are processed in the order given when setting values rather than adjusting them seconds are in the range 0-59 minutes are in the range 0-59 hours are in the range 0-23 month days are in the range 1-31 week days are in the range 0-6 sun-sat months are in the range 1-12 jan-dec and years are in a limited range depending on the platform on i386 years are in the range 69-38 representing 1969-2038 on every other platform years 0-68 are accepted and represent 2000-2068 and 69-99 are accepted and represent 1969-1999 in both cases years between 100 and 1900 both included are accepted and interpreted as relative to 1900 of the gregorian calendar with a limit of 138 on i386 and a much higher limit on every other platform years starting at 1901 are also accepted and are interpreted as absolute years if val is numeric one of either y m w d h m or s must be used to specify which part of the date is to be adjusted the week day or month may be specified using a name rather than a number if a name is used with the plus or minus sign the date will be put forwards or backwards to the next previous date that matches the given week day or month this will not adjust the date if the given week day or month is the same as the current one when a date is adjusted to a specific value or in units greater than hours daylight savings time considerations are ignored adjustments in units of hours or less honor daylight saving time so assuming the current date is march 26 0 30 and that the dst adjustment means that the clock goes forward at 01 00 to 02 00 using -v 1h will adjust the date to march 26 2 30 likewise if the date is october 29 0 30 and the dst adjustment means that the clock goes back at 02 00 to 01 00 using -v 3h will be necessary to reach october 29 2 30 when the date is adjusted to a specific value that does not actually exist for example march 26 1 30 bst 2000 in the europe london timezone the date will be silently adjusted forward in units of one hour until it reaches a valid time when the date is adjusted to a specific value that occurs twice for example october 29 1 30 2000 the resulting timezone will be set so that the date matches the earlier of the two times it is not possible to adjust a date to an invalid absolute day so using the switches -v 31d -v 12m will simply fail five months of the year it is therefore usual to set the month before setting the day using -v 12m -v 31d always works adjusting the date by months is inherently ambiguous because a month is a unit of variable length depending on the current date this kind of date adjustment is applied in the most intuitive way first of all date tries to preserve the day of the month if it is impossible because the target month is shorter than the present one the last day of the target month will be the result for example using -v 1m on may 31 will adjust the date to june 30 while using the same option on january 30 will result in the date adjusted to the last day of february this approach is also believed to make the most sense for shell scripting nevertheless be aware that going forth and back by the same number of months may take you to a different date refer to the examples below for further details an operand with a leading plus sign signals a user-defined format string which specifies the format in which to display the date and time the format string may contain any of the conversion specifications described in the strftime 3 manual page and n for nanoseconds as well as any arbitrary text a newline n character is always output after the characters specified by the format string the format string for the default display is if an operand does not have a leading plus sign it is interpreted as a value for setting the system s notion of the current date and time the canonical representation for setting the date and time is cc century either 19 or 20 prepended to the abbreviated year yy year in abbreviated form e g 89 for 1989 06 for 2006 mm numeric month a number from 1 to 12 dd day a number from 1 to 31 hh hour a number from 0 to 23 mm minutes a number from 0 to 59 ss seconds a number from 0 to 60 59 plus a potential leap second everything but the minutes is optional date understands the time zone definitions from the iana time zone database tzdata located in usr share zoneinfo time changes for daylight saving time standard time leap seconds and leap years are handled automatically there are two ways to specify the time zone if the file or symlink etc localtime exists it is interpreted as a time zone definition file usually in the directory hierarchy usr share zoneinfo which contains the time zone definitions from tzdata if the environment variable tz is set its value is interpreted as the name of a time zone definition file either an absolute path or a relative path to a time zone definition in usr share zoneinfo the tz variable overrides etc localtime if the time zone definition file is invalid date silently reverts to utc previous versions of date included the -d set daylight saving time flag and -t set negative time zone offset options but these details are now handled automatically by tzdata modern offsets are positive for time zones ahead of utc and negative for time zones behind utc but like the obsolete -t option the tzdata files in the subdirectory usr share zoneinfo etc still use an older convention where times ahead of utc are considered negative name -f input fmt new date output fmt description macos 15 5 september 10 2024 macos 15 5",
  "keywords": [
    "date",
    "manual",
    "page",
    "when",
    "invoked",
    "without",
    "arguments,",
    "utility",
    "displays",
    "current",
    "time."
  ],
  "complexity": "intermediate",
  "hash": "835338e18af1a426",
  "parsedAt": "2025-06-17T19:41:54.162Z",
  "parseVersion": "2.0.0",
  "isCommon": false,
  "hasInteractiveExamples": false,
  "hasDiagrams": false
}